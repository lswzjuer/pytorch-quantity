syntax = "proto2";

package roadstar.perception_v2;

import "modules/common/proto/error_code.proto";
import "modules/common/proto/geometry.proto";
import "modules/common/proto/header.proto";
import "modules/common/proto/math.proto";
import "modules/common/proto/sensor_source.proto";

enum ObjectType {
  UNKNOWN = 0;
  UNKNOWN_MOVABLE = 1;
  UNKNOWN_UNMOVABLE = 2;
  PEDESTRIAN = 3;  // Pedestrian, usually determined by moving behaviour.
  BICYCLE = 4;     // bike, motor bike
  VEHICLE = 5;     // Passenger car or truck.
  CAR = 6;         // Passenger car.
  TRUCK = 7;       // Truck.
  BUS = 8;
  TRICYCLE = 9;
  BLOCK = 10;
};

// Next id is 41
message Obstacle {
  // ======= Detection =======
  // obstacle ID.
  optional int32 id = 1;
  // GPS time in seconds.
  optional double timestamp = 2;
  // utm center of the object (cx, cy, z_min)
  optional roadstar.common.math.Vector3d center = 3;
  // ego center of the object
  optional roadstar.common.math.Vector3d ego_center = 4;
  // main direction
  optional roadstar.common.math.Vector3d direction = 5;
  // the yaw angle, theta = 0.0 <=> direction = (1, 0, 0)
  optional double theta = 6;
  // Size of obstacle bounding box.
  optional double length = 7;  // obstacle length.
  optional double width = 8;   // obstacle width.
  optional double height = 9;  // obstacle height.
  optional double det_confidence = 10;

  // ======= Classification =======
  optional ObjectType obj_type = 20;  // obstacle type
  // Probability of each type, used for track type.
  optional double type_prob = 21;

  // ======= tracking =======
  optional int32 track_id = 30;
  optional roadstar.common.math.Vector3d velocity = 31;  // obstacle velocity.
  optional roadstar.common.math.MatrixXd velocity_uncertainty = 38;
  optional double angular_velocity = 32;
  optional roadstar.common.math.Vector3d acceleration = 33;
  optional roadstar.common.math.MatrixXd acceleration_uncertainty = 39;
  // age of the tracked object
  optional double detection_time = 34;
  optional double tracking_time = 35;
  optional double latest_tracked_time = 36;

  // ======= Others ========
  optional roadstar.common.sensor.SensorSource sensor_source = 37 [default = UnknownSource];
  optional bool is_valid = 40 [default = true];
  optional bool is_on_hdmap = 41 [default = false];
  optional bool is_stationary = 42 [default = false];

  optional CameraSupplement camera_supplement = 100;
  optional LidarSupplement lidar_supplement = 101;
  optional RadarSupplement radar_supplement = 102;
}

message LidarSupplement {
  // grids occupied by this obstacle.
  repeated int32 occupied_grids = 1 [packed = true];
}

message RadarSupplement {
  optional bool is_background = 1 [default = false];
}

message CameraSupplement {
  // distance from lane center (just for obstacles from camera)
  optional double dis_from_lane_center = 1;

  // distance from our vehicle (just for obstacles from camera)
  optional double dis_from_ego = 2;

  // lane id of the obstacle lied in (just for obstacles from camera)
  optional int32 in_lane_id = 3;

  // obstacle 2d bounding box in camera coordinate.
  optional roadstar.common.Box2d img_box = 4;

  enum CameraObjectType {
    BG = 0;
    CAR = 1;
    BUS = 2;
    TRUCK = 3;
    PERSON = 4;
    BICYCLE = 5;
    TRICYCLE = 6;
    BLOCK = 7;
    MOTOR = 8;
  };
  optional CameraObjectType camera_object_type = 5
      [default = BG];  // obstacle type
  optional double confidence = 6;
}

message SensorObstacles {
  optional roadstar.common.Header header = 1;
  optional roadstar.common.ErrorCode error_code = 2 [default = OK];

  repeated Obstacle obstacles = 3;
  // observation sensor of the obstacle
  optional roadstar.common.sensor.SensorSource sensor_source = 30 [default = UnknownSource];
}
