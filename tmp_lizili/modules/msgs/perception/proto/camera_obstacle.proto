syntax = "proto2";

package roadstar.perception;

import "modules/common/proto/header.proto";

message ImgBox2d {
  optional double xmin = 1;  // in pixel.
  optional double ymin = 2;  // in pixel.
  optional double xmax = 3;  // in pixel.
  optional double ymax = 4;  // in pixel.
}

message ObstacleCamera {
  // obstacle ID.
  optional int32 id = 1;
  // obstacle 2d bounding box in camera coordinate.
  optional ImgBox2d img_box = 4;
  // Size of obstacle bounding box.
  optional double length = 5;  // obstacle length.
  optional double width = 6;   // obstacle width.
  optional double height = 7;  // obstacle height.
  // heading (of obstacle box) in the world coordinate system.
  optional double theta = 8;

  /*
  enum ObjectType {
    UNKNOWN = 0;
    UNKNOWN_MOVABLE = 1;
    UNKNOWN_UNMOVABLE = 2;
    PEDESTRIAN = 3;  // Pedestrian, usually determined by moving behaviour.
    BICYCLE = 4;     // bike, motor bike
    VEHICLE = 5;     // Passenger car or truck.
  };
  optional ObjectType object_type = 8;  // obstacle type
  */
  enum CameraObjectType {
    BG = 0;
    CAR = 1;
    BUS = 2;
    TRUCK = 3;
    PERSON = 4;
    BICYCLE = 5;
    MOTOR = 6;
    TRICYCLE = 7;
    BLOCK = 8;
  };
  optional CameraObjectType camera_object_type = 9;  // obstacle type
  // confidence of the obstacle by detetion.
  optional double confidence = 10;

  // ======= tracking ======
  optional double velocity = 11;  // obstacle velocity.
  optional double angular_velocity = 12;
  // moving heading
  optional double heading = 13;

  // duration of an obstacle since detection in s.
  optional double tracking_time = 15;
  optional int32 detection_times = 16;
  optional int32 track_id = 17;
  optional double latest_tracked_time = 18;

  // lane id of the obstacle lied in (just for obstacles from camera)
  optional int32 in_lane_id = 32;

  // distance from lane center (just for obstacles from camera)
  optional double dis_from_lane_center = 33;

  // distance from our vehicle (just for obstacles from camera)
  optional double dis_from_ego = 34;
}

message CameraObstacles {
  optional roadstar.common.Header header = 1;
  enum CameraType {
    HEAD_LEFT = 0;
    HEAD_RIGHT = 1;
    FRONT_LEFT = 2;
    FRONT_RIGHT = 3;
    MID_LEFT = 4;
    MID_RIGHT = 5;
    TAIL_LEFT = 6;
    TAIL_RIGHT = 7;
  };
  // camera_type for camera sensors.
  optional CameraType camera_type = 2 [default = HEAD_LEFT];
  // camera time in seconds.
  optional double timestamp = 3;
  repeated ObstacleCamera obstacle_camera = 4;
}

// message CameraObstacles {
//   optional roadstar.common.Header header = 1;
//   repeated CameraObstacle camera_obstacle = 2;
// }
