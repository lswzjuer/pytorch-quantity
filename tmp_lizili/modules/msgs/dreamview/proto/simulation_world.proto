syntax = "proto2";

package roadstar.dreamview;

import "modules/common/monitor_log/proto/monitor_log.proto";
import "modules/msgs/canbus/proto/chassis.proto";
import "modules/msgs/perception/proto/grid_map.proto";
import "modules/msgs/perception/proto/obstacle.proto";
import "modules/msgs/planning/proto/planning.proto";

// Next-id: 4
message PolygonPoint {
  optional double x = 1;
  optional double y = 2;
  optional double z = 3 [default = 0.0];
}

// Next-id: 3
message Prediction {
  optional double probability = 1;
  repeated PolygonPoint predicted_trajectory = 2;
}

// Next-id: 12
message Decision {
  enum Type {
    IGNORE = 0;    // Ignore the object
    STOP = 1;      // Stop at a distance from the object
    NUDGE = 2;     // Go around the object
    YIELD = 3;     // Go after the object
    OVERTAKE = 4;  // Go before the object
    FOLLOW = 5;    // Follow the object in the same lane
    SIDEPASS = 6;  // Pass the object in neighbouring lane
  }
  optional Type type = 1 [default = IGNORE];

  // Shape Info
  // Can be used for corners of nudge region
  repeated PolygonPoint polygon_point = 2;

  // Position Info
  // Can be used for stop fence
  optional double heading = 3;
  optional double latitude = 4;
  optional double longitude = 5;
  optional double position_x = 6;
  optional double position_y = 7;
  optional double length = 8 [default = 2.8];
  optional double width = 9 [default = 1.4];
  optional double height = 10 [default = 1.8];

  enum StopReasonCode {
    STOP_REASON_HEAD_VEHICLE = 1;
    STOP_REASON_DESTINATION = 2;
    STOP_REASON_PEDESTRIAN = 3;
    STOP_REASON_OBSTACLE = 4;
    STOP_REASON_SIGNAL = 100;
    STOP_REASON_STOP_SIGN = 101;
    STOP_REASON_YIELD_SIGN = 102;
    STOP_REASON_CLEAR_ZONE = 103;
    STOP_REASON_CROSSWALK = 104;
    STOP_REASON_EMERGENCY = 105;
    STOP_REASON_NOT_READY = 106;
  }
  optional StopReasonCode stopReason = 11;
}

// Next-id: 37
message Object {
  // ID
  optional string id = 1;  // primary identifier for each object

  // Shape Info
  repeated PolygonPoint polygon_point = 2;  // corners of an object

  // Position Info
  optional double heading = 3;
  optional double latitude = 4;
  optional double longitude = 5;
  optional double position_x = 6;
  optional double position_y = 7;
  optional double length = 8 [default = 2.8];
  optional double width = 9 [default = 1.4];
  optional double height = 10 [default = 1.8];

  // Motion Info
  // For objects with motion info such as ADC and some moving obstacles.
  optional double speed = 11;               // in m/s
  optional double speed_acceleration = 12;  // in m/s^2
  optional double speed_jerk = 13;
  optional double spin = 14;
  optional double spin_acceleration = 15;
  optional double spin_jerk = 16;
  optional double speed_heading = 30;
  optional double speed_acceleration_heading = 35;

  // For non-adc objects, (ego_x, ego_y) is the coordinate
  // with respect to adc itself
  optional double ego_x = 44;
  optional double ego_y = 45;

  // Signal Info
  // For objects with signals set and current signal such as Traffic Light and
  // Stop Sign.
  repeated string signal_set = 17;
  optional string current_signal = 18;
  optional string current_type = 41;
  optional double countdown_time = 42;
  optional double min_x = 43;

  optional string gear_position = 33;
  optional bool parking_brake = 34;

  // Time Info
  optional double timestamp_sec = 19;

  // Decision Info
  repeated Decision decision = 20;
  // ADC planning trajectory
  optional roadstar.planning.PlanningTrajectory planning_trajectory = 31;
  optional roadstar.planning.PlanningTrajectory extended_trajectory = 32;

  // Chassis Info
  // For ADC
  optional double throttle_percentage = 21;
  optional double brake_percentage = 22;
  optional double steer_rate = 23;
  optional double steer_angle = 24;
  optional roadstar.canbus.Chassis.DrivingMode driving_mode = 36;
  optional double desired_velocity = 37;
  optional double current_velocity = 38;
  optional double e_pose = 39;
  optional double e_yaw = 40;

  enum Type {
    UNKNOWN = 0;
    UNKNOWN_MOVABLE = 1;
    UNKNOWN_UNMOVABLE = 2;
    PEDESTRIAN = 3;  // pedestrian, usually determined by moving behaviour.
    BICYCLE = 4;     // bike, motor bike.
    VEHICLE = 5;     // passenger car or truck.
    CAR = 6;         // passenger car
    TRUCK = 7;       // truck
    BUS = 8;         // bus
    TRICYCLE = 9;    // tricycle
    BLOCK = 10;      // block
  };

  optional Type type = 26;  // obstacle type
  repeated Prediction prediction = 27;

  optional roadstar.perception.Obstacle.SensorSource sensor_source = 28;
}

message DelaysInMs {
  optional double chassis = 1;
  optional double localization = 3;
  optional double fusion_map = 4;
  optional double control_command = 5;
  optional double planning_trajectory = 6;
  optional double sensor_camera = 7;
}

// Next-id: 17
message SimulationWorld {
  // Time
  optional double timestamp_sec = 1;

  // Sequence number
  optional uint32 sequence_num = 2;

  // Objects in the world and the associated predictions/decisions
  repeated Object object = 3;

  // Static objects in the world
  optional roadstar.perception.GridMap grid_map = 32;

  // Autonomous driving cars
  optional Object auto_driving_car = 4;

  // Traffic light status
  repeated Object traffic_signal = 6;

  // Routing path
  repeated PolygonPoint route = 7;
  // Timestamp of latest routing
  optional double routing_time = 8;

  // Planned trajectory
  repeated Object planning_trajectory = 9;

  // Extended trajectory
  repeated Object extended_trajectory = 14;

  // Main stop
  optional Object main_stop = 10;

  // Speed limit
  optional double speed_limit = 11;

  optional DelaysInMs delay = 12;

  optional roadstar.common.monitor.MonitorMessage monitor = 13;
}
