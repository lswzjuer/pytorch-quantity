syntax = "proto2";

package roadstar.hdmap;

import "modules/common/proto/geometry.proto";
import "modules/common/proto/header.proto";
import "modules/msgs/hdmap/proto/connection.proto";
import "modules/msgs/hdmap/proto/hdmap_common.proto";
import "modules/msgs/hdmap/proto/hdmap_config.proto";
import "modules/msgs/hdmap/proto/map.proto";
import "modules/msgs/hdmap/proto/path.proto";
import "modules/msgs/hdmap/proto/point_info.proto";
import "modules/msgs/hdmap/proto/road_edge.proto";
import "modules/msgs/hdmap/proto/section.proto";

service RpcServiceNode {
  // Get all avaiable maps.
  rpc GetAvailableMaps(GetAvailableMapsRequest)
      returns (GetAvailableMapsResponse) {
  }

  // Set map.
  rpc SetMap(SetMapRequest) returns (SetMapResponse) {
  }

  rpc SetRoute(SetRouteRequest) returns (SetRouteResponse) {
  }

  // Set routing points.
  rpc SetRoutingPoints(SetRoutingPointsRequest)
      returns (SetRoutingPointsResponse) {
  }

  rpc GetRoutingPath(GetRoutingPathRequest) returns (GetRoutingPathResponse) {
  }

  // Get local path.
  rpc GetLocalPath(GetLocalPathRequest) returns (GetLocalPathResponse) {
  }

  rpc GetLocalMap(GetLocalMapRequest) returns (GetLocalMapResponse) {
  }

  rpc GetMapElements(GetMapElementsRequest) returns (GetMapElementsResponse) {
  }

  rpc GetPointOnRoad(GetPointOnRoadRequest) returns (GetPointOnRoadResponse) {
  }

  rpc GetCurrMap(GetCurrMapRequest) returns (GetCurrMapResponse) {
  }

  rpc GetCurrRoute(GetCurrRouteRequest) returns (GetCurrRouteResponse) {
  }
}

message MapElements {
  // Section elements.
  map<int32, Section> sections = 1;

  // Connection elements.
  map<int32, Connection> connections = 2;

  // Road edge.
  map<int32, RoadEdge> road_edges = 3;
}

message GetAvailableMapsRequest {
}

message GetAvailableMapsResponse {
  map<string, MapConfig> available_maps = 1;
}

message SetMapRequest {
  required string map = 1;
}

message SetMapResponse {
  optional string map = 1;
}

message SetRoutingPointsRequest {
  optional roadstar.common.Header header = 1;

  // At least two points. The first is start point, the end is final point.
  // The routing must go through each point in waypoint.
  repeated roadstar.common.PointENU points = 2;
}

message SetRoutingPointsResponse {
  optional Path path = 1;
}

message SetRouteRequest {
  required string route_name = 1;
}

message SetRouteResponse {
  optional Path path = 1;
}

message GetRoutingPathRequest {
}

message GetRoutingPathResponse {
  optional Path path = 1;
}

message GetLocalPathRequest {
  // The request location.
  required roadstar.common.PointENU location = 1;

  // The request forwarding distance.
  optional double forward_distance = 2 [default = 150.0];

  // The request backwarding distance.
  optional double backward_distance = 3 [default = 100.0];
}

message GetLocalPathResponse {
  // Local path.
  optional Path local_path = 1;

  // Local path stat.
  optional LocalPathStat local_path_stat = 2;
}

message GetPointInSectionRequest {
  // The requst location.
  required roadstar.common.PointENU location = 1;

  // The request radius.
  required double radius = 2;

  // The request points.
  repeated roadstar.common.PointENU points = 3;
}

message GetPointOnRoadRequest {
  // The requst location.
  required roadstar.common.PointENU location = 1;

  // The request radius.
  required double radius = 3;

  // The request points.
  repeated roadstar.common.PointENU points = 4;
}

message GetPointOnRoadResponse {
  repeated PointInfo point_infos = 1;
}

message GetLocalMapRequest {
  // The location.
  required roadstar.common.PointENU location = 1;

  // The radius of request map element ids.
  optional double radius = 2 [default = 150.0];
}

message GetLocalMapResponse {
  optional MapProto local_map = 1;
}

message GetMapElementsRequest {
  repeated MapUnit map_units = 1;
}

message GetMapElementsResponse {
  optional MapElements map_elements = 1;
}

message GetCurrMapRequest {
}

message GetCurrMapResponse {
  optional string map_name = 1;
}

message GetCurrRouteRequest {
}

message GetCurrRouteResponse {
  // route name.
  optional string route_name = 1;

  // routing points.
  optional RoutingPoints points = 2;
}

message GetMapWarningsRequest {
}

message GetMapWarningsResponse {
  optional string map_name = 1;
  repeated string warnings = 2;
}
