#!/usr/bin/env python

# This file implements data plotter, which is used to compare tracks generated
# by Asensing INS and Novatel INS.

import time
import threading
import rospy
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

from modules.msgs.localization.proto import localization_pb2
from modules.msgs.drivers.asensing.proto import asensing_ins_pb2


# Scale constants (hard-coded)
UTM_X_MIN = 210000  # minimum utm_x value
UTM_X_MAX = 230000  # maximum utm_x value
UTM_Y_MIN = 3300000  # minimum utm_y value
UTM_Y_MAX = 3400000  # maximum utm_y value


class Topic(object):
    """ Topic class for plotter. """

    def __init__(self, name, datatype, color):
        # Topic name
        self.name = name
        # Data type of the topic
        self.datatype = datatype
        # Color ("red", "blue", etc.)
        self.color = color

    def get_name(self):
        return self.name

    def get_datatype(self):
        return self.datatype

    def get_color(self):
        return self.color


class Plotter(object):
    """ Plotter class for processing UTM data generated by INS. """

    def __init__(self):
        # Subscribed topics
        self.topics = []
        # Lock to avoid race condition
        self.lock = threading.Lock()
        # Map topic name to its corresponding curve
        self.topic_curve_map = {}
        # Map topic name to its corresponding x data
        self.topic_xdata_map = {}
        # Map topic name to its corresponding y data
        self.topic_ydata_map = {}
        # Initialize the figure
        self.fig, self.ax = plt.subplots()
        self.ax.set_xlim(UTM_X_MIN, UTM_X_MAX)
        self.ax.set_ylim(UTM_Y_MIN, UTM_Y_MAX)
        self.ax.grid()

    def add_topic(self, topic):
        """ Add topic to the plotter. """

        self.topics.append(topic)
        curve, = self.ax.plot([], [], topic.get_color(),
                              label=topic.get_name())
        self.topic_curve_map[topic.get_name()] = curve
        self.topic_xdata_map[topic.get_name()] = np.array([])
        self.topic_ydata_map[topic.get_name()] = np.array([])

    def callback(self, msg, topic):
        """ Callback function for rospy topic subscription. """

        with self.lock:
            # Append new point to data array
            tn = topic.get_name()
            self.topic_xdata_map[tn] = np.append(
                self.topic_xdata_map[tn], msg.utm_x)
            self.topic_ydata_map[tn] = np.append(
                self.topic_ydata_map[tn], msg.utm_y)

        rospy.logdebug("Topic: {}; ".format(topic.get_name()))
        rospy.logdebug("UTM point: ({}, {}); ".format(msg.utm_x, msg.utm_y))

    def update_frame(self, *args):
        """ Frame updating function for matplotlib animation. """

        with self.lock:
            # Refresh the figure
            for topic in self.topics:
                tn = topic.get_name()
                curve = self.topic_curve_map[tn]
                xdata = self.topic_xdata_map[tn]
                ydata = self.topic_ydata_map[tn]
                curve.set_data(xdata, ydata)

    def listen(self):
        """ Listen to subscribed topics. """

        # Initialize listener node and give it a unique name
        rospy.init_node('listener', anonymous=True)

        # Subscribe topics
        for t in self.topics:
            rospy.Subscriber(t.get_name(), t.get_datatype(), self.callback, t)

        # Show the figure
        ani = FuncAnimation(self.fig, self.update_frame, interval=50)
        plt.legend(loc='upper right')
        plt.show()


if __name__ == '__main__':
    plotter = Plotter()

    novatel_topic = Topic('/roadstar/drivers/ins',
                          localization_pb2.Localization, "red")
    asensing_topic = Topic('/roadstar/drivers/asensing/ins',
                           asensing_ins_pb2.AsensingIns, "blue")
    plotter.add_topic(novatel_topic)
    plotter.add_topic(asensing_topic)

    plotter.listen()
