#! /usr/bin/env bash

SCRIPT_DIR=$(cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )
echo "script_dir = $SCRIPT_DIR"

source $SCRIPT_DIR/../../common/scripts/base.sh

SIMULATION_TEST="$BIN_PREFIX/modules/simulation/simulation_world/node/simulation_world_node_main"
MODULE_BASE_DIR="$BIN_PREFIX/modules/integration_test/simulation"

function get_param(){
  CONF_XML=$1
  vehicle=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_VEHICLE $CONF_XML")
  SERVER_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_SERVER_RUN_MODE $CONF_XML")
  POWERTRAIN_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_POWERTRAIN_RUN_MODE $CONF_XML")
  HDMAP_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_HDMAP_RUN_MODE $CONF_XML")
  PLANNING_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_PLANNING_RUN_MODE $CONF_XML")
  CONTROL_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_CONTROL_RUN_MODE $CONF_XML")
  DREAMVIEW_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_DREAMVIEW_RUN_MODE $CONF_XML")
  NODE_RUN_MODE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_NODE_RUN_MODE $CONF_XML")
  REPORT_PATH=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_REPORT_PATH $CONF_XML")
  REPORT_NAME=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_REPORT_NAME $CONF_XML")
  MAP=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_MAP_NAME $CONF_XML")
  ROUTE=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_MAP_ROUTING $CONF_XML")
  INIT_UTM_X=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_INIT_UTM_X $CONF_XML")
  INIT_UTM_Y=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_INIT_UTM_Y $CONF_XML")
  INIT_YAW=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_INIT_YAW $CONF_XML")
  OUTPUT_PATH=$(eval "$BAG_PARAMETER_GENERATER $GET_PARAMETER_CMD_OUTPUT_PATH $CONF_XML")
}

function stop_when_finished(){
  echo -n "check finish"
  for (( ; ; ))
  do
    NUM="$(pgrep -cf "${SIMULATION_TEST}")"
    if [ ${NUM} -eq "0" ]; then
      break
    else
      sleep 1
      echo -n "."
    fi
  done
}

