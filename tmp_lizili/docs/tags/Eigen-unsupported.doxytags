<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>Eigen::AlignedVector3</name>
    <filename>classEigen_1_1AlignedVector3.html</filename>
    <templarg></templarg>
    <base>MatrixBase&lt; AlignedVector3&lt; _Scalar &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::AutoDiffScalar</name>
    <filename>classEigen_1_1AutoDiffScalar.html</filename>
    <templarg>_DerType</templarg>
    <member kind="function">
      <type></type>
      <name>AutoDiffScalar</name>
      <anchorfile>classEigen_1_1AutoDiffScalar.html</anchorfile>
      <anchor>ae73d362745e986c00cee5658bf731412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AutoDiffScalar</name>
      <anchorfile>classEigen_1_1AutoDiffScalar.html</anchorfile>
      <anchor>a7f4f44f682ba5d500c34c4f2fa6ecb9e</anchor>
      <arglist>(const Scalar &amp;value, int nbDer, int derNumber)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AutoDiffScalar</name>
      <anchorfile>classEigen_1_1AutoDiffScalar.html</anchorfile>
      <anchor>a14e0f5ecc595deb05aaf336f5a81b861</anchor>
      <arglist>(const Real &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AutoDiffScalar</name>
      <anchorfile>classEigen_1_1AutoDiffScalar.html</anchorfile>
      <anchor>a09641114cbb3b98a1132b82dff5939e3</anchor>
      <arglist>(const Scalar &amp;value, const DerType &amp;der)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BlockSparseMatrix</name>
    <filename>classEigen_1_1BlockSparseMatrix.html</filename>
    <templarg></templarg>
    <templarg>_BlockAtCompileTime</templarg>
    <templarg>_Options</templarg>
    <templarg></templarg>
    <base>SparseMatrixBase&lt; BlockSparseMatrix&lt; _Scalar, _BlockAtCompileTime, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>blockCols</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a645eb7f708ca89383e0f3fabb30d9e92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>blockColsIndex</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a6310ee4a4aa6f3689eaed0395d0db35e</anchor>
      <arglist>(Index bj) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>blockPtr</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a16b8ee2d4e92d774bf286e6575fd8369</anchor>
      <arglist>(Index id) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>blockRows</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a5f4768ab4e48f7f81cd8a3697d3016e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>blockRowsIndex</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>ad43927292bc7b1e53cc98d4559838c96</anchor>
      <arglist>(Index bi) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockSparseMatrix</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a319d4ed434693fc09cdb7d71e090bbd8</anchor>
      <arglist>(Index brow, Index bcol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockSparseMatrix</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a5d0b6ea10540a0968410daf3b1ff99e8</anchor>
      <arglist>(const BlockSparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockSparseMatrix</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a1d5e6091b3a85a872f10a02265c3c8c6</anchor>
      <arglist>(const MatrixType &amp;spmat)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const BlockScalar &gt;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>aa6f4ffb07a0ef2863e7a933676a46abf</anchor>
      <arglist>(Index brow, Index bcol) const</arglist>
    </member>
    <member kind="function">
      <type>Ref&lt; BlockScalar &gt;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>af7d43390424f705f281c41a2c07db92f</anchor>
      <arglist>(Index brow, Index bcol)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>aa689bd28af9a8176d1c793c075aa0a42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerToBlock</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a53fd11658531b86986cd2a5fb2ea3d3d</anchor>
      <arglist>(Index inner) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a3acfdd3edc02e4347402a8d343131b9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a2c0d76392df6669fa66b592ef6b5618a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZerosBlocks</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a83d5af142c851196a2178bf9ec532d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BlockSparseMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a5c5479fd38867538383e092a1d90db5a</anchor>
      <arglist>(const MatrixType &amp;spmat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerToBlock</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a9f83554f7b1309ac7ad88d19ef8d6339</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a2e1814d2fb4d66320ce3ec97303d0648</anchor>
      <arglist>(const Index nonzerosblocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>ae0b2c5f1f4aa7a2a54dea00bbcef8e0b</anchor>
      <arglist>(Index brow, Index bcol)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a89c2e0b48b6425c4828a794f4c654796</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlockLayout</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>acad69e4bb5e747db973cacc75c2f4a4d</anchor>
      <arglist>(const VectorXi &amp;rowBlocks, const VectorXi &amp;colBlocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlockSize</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a1984d81fa41dc2f4e8f1208f602e7e45</anchor>
      <arglist>(Index blockSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBlockStructure</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>a40891e477661e68bc870319d1379c7aa</anchor>
      <arglist>(const MatrixType &amp;blockPattern)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1BlockSparseMatrix.html</anchorfile>
      <anchor>aa148b63f89555f4eed312638abe597eb</anchor>
      <arglist>(const InputIterator &amp;begin, const InputIterator &amp;end)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DGMRES</name>
    <filename>classEigen_1_1DGMRES.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; DGMRES&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>deflSize</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>ab80013fc06926d2067b677a021367363</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGMRES</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>a17bd25826b56c39bc7cc4ce8fbf8a848</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGMRES</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>a800fcf37c0ac66f76d5c070e4aeae2a7</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>restart</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>afba35ad9e10dba460a9658075ade4d57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>abc4c4e02112c861b122a19a2742319f0</anchor>
      <arglist>(const Index restart)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEigenv</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>ae74eb1faaaf3559bcf73b4d7703ea629</anchor>
      <arglist>(const Index neig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxEigenv</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>a6e715bd5199a6a4474a9bc9e8481f9bd</anchor>
      <arglist>(const Index maxNeig)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>dgmres</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>a1b06062ec16932d3a20ea4767d9de51d</anchor>
      <arglist>(const MatrixType &amp;mat, const Rhs &amp;rhs, Dest &amp;x, const Preconditioner &amp;precond) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Index</type>
      <name>dgmresCycle</name>
      <anchorfile>classEigen_1_1DGMRES.html</anchorfile>
      <anchor>ab77d66ef7f84ff15b6bd55fb76619218</anchor>
      <arglist>(const MatrixType &amp;mat, const Preconditioner &amp;precond, Dest &amp;x, DenseVector &amp;r0, RealScalar &amp;beta, const RealScalar &amp;normRhs, Index &amp;nbIts) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::TensorSycl::DimensionSize</name>
    <filename>structEigen_1_1TensorSycl_1_1DimensionSize.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DynamicSGroup</name>
    <filename>classEigen_1_1DynamicSGroup.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::DynamicSparseMatrix</name>
    <filename>classEigen_1_1DynamicSparseMatrix.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <templarg></templarg>
    <base>SparseMatrixBase&lt; DynamicSparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a64b7d586c6b212dbe912a9ee05c3a85a</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a17093cd39bd0e6ebd6250bc5feb61a0f</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED</type>
      <name>DynamicSparseMatrix</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a46a6947fcf115e6b7b731a8e01e7995d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED</type>
      <name>DynamicSparseMatrix</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>ad1c810ff3cfcc97db704d26b9d114f94</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED</type>
      <name>DynamicSparseMatrix</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>ab5bd886d79beb30802df0b1508727482</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED void</type>
      <name>endFill</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>aa806b3dde0a055844110610907b016f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED Scalar &amp;</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a70c8f529b38fd5b7d93d6dfe1a122723</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED Scalar &amp;</type>
      <name>fillrand</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a6a5eb3c9d153d8ebdf4e0967321108e2</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>aa0abc0e4565143f103f0d7373bd4a125</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insertBack</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a0a556652195b91c09e9f6c4d8b7cc81d</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insertBackByOuterInner</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>ac97c2463058ae55d7f0ef21c851eb5f3</anchor>
      <arglist>(Index outer, Index inner)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a473cd00ddc0319327f4c8a6c82ec96cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>af3b38485a69d03e5c53d9ba57f9ce1d0</anchor>
      <arglist>(Scalar reference, RealScalar epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a2d793e836fdb4bf0a85c9cf390e07861</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED void</type>
      <name>startFill</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>abade0bf46139d8577aa24ead30c76771</anchor>
      <arglist>(Index reserveSize=1000)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>startVec</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>a294b998a50cc01859425e5e7c23d6108</anchor>
      <arglist>(Index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DynamicSparseMatrix</name>
      <anchorfile>classEigen_1_1DynamicSparseMatrix.html</anchorfile>
      <anchor>af0677c8aec1e1dee9f0a389509082a83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::ElemTypeHolder</name>
    <filename>structutility_1_1tuple_1_1ElemTypeHolder.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::ElemTypeHolder&lt; 0, Tuple&lt; T, Ts... &gt; &gt;</name>
    <filename>structutility_1_1tuple_1_1ElemTypeHolder_3_010_00_01Tuple_3_01T_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::ElemTypeHolder&lt; k, Tuple&lt; T, Ts... &gt; &gt;</name>
    <filename>structutility_1_1tuple_1_1ElemTypeHolder_3_01k_00_01Tuple_3_01T_00_01Ts_8_8_8_01_4_01_4.html</filename>
    <templarg>k</templarg>
    <templarg></templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::EulerAngles</name>
    <filename>classEigen_1_1EulerAngles.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_System</templarg>
    <base>RotationBase&lt; EulerAngles&lt; _Scalar, _System &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a0bc2416b52b29a213eccad8a43ce61a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>ad0f0ee8240849b0f7d028695849cdbad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>QuaternionType</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>adf351608cad15e660279f7323e516d3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a2ab1d433ac9683268446f8905ac31aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_System</type>
      <name>System</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a17e3dee5fef4af35bbb4e319c2cdc3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>af0f446aa0f46b3439abedff63fabf39c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>alpha</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a6146f78ee0fb9d9a7d685a4654066825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>alpha</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a69942a5a9b0c3670e7f2797e84cbde8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>angles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a2decf84b5efd265f7251fd32f539a36b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>angles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>afff76daa2d6a3165a1354c349366fb80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>beta</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a1bf59f8acaed985964c98c1f59d8f5ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>beta</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a2db042cfba5486d46fdeb77fecd8e509</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerAngles&lt; NewScalarType, System &gt;</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>acbabd36b148c07fb3e6a0b346fff066e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerAngles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a47be9344fbd4a5b34df45486cfaf1e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerAngles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a765135b6e5d35248517b4268046840b6</anchor>
      <arglist>(const Scalar &amp;alpha, const Scalar &amp;beta, const Scalar &amp;gamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerAngles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a4f212a178fd75ac9e53569e7c1d97e84</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerAngles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>aa7d02f35a984118d4c157a63915bd216</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EulerAngles</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a22539c574d7b6ca4577691f533f60061</anchor>
      <arglist>(const RotationBase&lt; Derived, 3 &gt; &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>gamma</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>aa75a5f16105d96eedf81bf9f8e789e21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>gamma</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a4c6216fa2fca4d5d70d8f44dae4cf88c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EulerAngles</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a1c37cedc590311d6ecaec7215d7c8f2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a8ab2f4cea6fca8cf604b274038218d22</anchor>
      <arglist>(const EulerAngles &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>EulerAngles</type>
      <name>operator -</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a16d60da124c05d0d6f810a537032bc09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator QuaternionType</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>aa4ccd4b412c3146a9dd58a884eaea42e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EulerAngles &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a99446e06ed9cae7f1c8764f6264bbde3</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>EulerAngles &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>abc2256872ea7e285cb915b8af82b6810</anchor>
      <arglist>(const RotationBase&lt; Derived, 3 &gt; &amp;rot)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a11ec16b3ed918fac62d295012ec4e2ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>AlphaAxisVector</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a33d034ea7e8cac1f4d7c329d741b9a59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>BetaAxisVector</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>aede24ef1ffc5913f2eb6539c1f1b9dc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Vector3</type>
      <name>GammaAxisVector</name>
      <anchorfile>classEigen_1_1EulerAngles.html</anchorfile>
      <anchor>a77ea78dac1d599353e2a87d95cc6f1d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EulerSystem</name>
    <filename>classEigen_1_1EulerSystem.html</filename>
    <templarg>_AlphaAxis</templarg>
    <templarg>_BetaAxis</templarg>
    <templarg>_GammaAxis</templarg>
    <member kind="enumvalue">
      <name>AlphaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca58eb5d1cddcc26fc15f643eab45ce06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BetaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca6a215356d13cf14b7c48a27117dbc3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GammaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca121638032850c0d43438aedfb32e3d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsAlphaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca44dcc3422221a0284b76970e01f03877</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsBetaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca940fe9742857e33fa7d036f3a0fff57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsGammaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca3e7e0d4bd2abf4da43c48c3d0ecafbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOdd</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca3e35fba7036026953caf28323e699dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsEven</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca5066a58a34a7acfab35b76398d2cd506</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTaitBryan</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca900def911be74336de5186063de0a21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AlphaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca58eb5d1cddcc26fc15f643eab45ce06b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BetaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca6a215356d13cf14b7c48a27117dbc3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GammaAxisAbs</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca121638032850c0d43438aedfb32e3d4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsAlphaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca44dcc3422221a0284b76970e01f03877</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsBetaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca940fe9742857e33fa7d036f3a0fff57c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsEven</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca5066a58a34a7acfab35b76398d2cd506</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsGammaOpposite</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca3e7e0d4bd2abf4da43c48c3d0ecafbfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsOdd</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca3e35fba7036026953caf28323e699dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsTaitBryan</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>aea133da8ba441ca4763f56ed44cf256ca900def911be74336de5186063de0a21c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>AlphaAxis</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>a99fd18091ad6cd5629e9e5d8c223b3f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>BetaAxis</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>a4899578f5c8e0e4e430945b38448e3d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>GammaAxis</name>
      <anchorfile>classEigen_1_1EulerSystem.html</anchorfile>
      <anchor>ace6abcfe0b287329a5b9658b62e16b0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GMRES</name>
    <filename>classEigen_1_1GMRES.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; GMRES&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>get_restart</name>
      <anchorfile>classEigen_1_1GMRES.html</anchorfile>
      <anchor>ade721328e58ace2d4493cbdcbe53ad09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMRES</name>
      <anchorfile>classEigen_1_1GMRES.html</anchorfile>
      <anchor>a73153e328dfa402cb3640711289f2985</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMRES</name>
      <anchorfile>classEigen_1_1GMRES.html</anchorfile>
      <anchor>a9ceeeb826c7e60ee948c0d1c0a219607</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_restart</name>
      <anchorfile>classEigen_1_1GMRES.html</anchorfile>
      <anchor>ac50d6bbca4a8a275861770feb211900d</anchor>
      <arglist>(const Index restart)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HybridNonLinearSolver</name>
    <filename>classEigen_1_1HybridNonLinearSolver.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::IndexList</name>
    <filename>structutility_1_1tuple_1_1IndexList.html</filename>
    <templarg>Is</templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::IndexRange</name>
    <filename>structutility_1_1tuple_1_1IndexRange.html</filename>
    <templarg>MIN</templarg>
    <templarg>MAX</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::IterationController</name>
    <filename>classEigen_1_1IterationController.html</filename>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_maxiter</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>a42f72b0f3d490a6ceaa7bc76a51c1471</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>m_nit</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>ac9d122615471416cc827a3d8e8ea15f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>m_noise</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>afcff4288066c186967f15defcd833f5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_res</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>af60d33d2bdd09f3d00fd73ddc91fc1e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_resmax</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>a5342235a082ee820516fd593ee1efeac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>m_rhsn</name>
      <anchorfile>classEigen_1_1IterationController.html</anchorfile>
      <anchor>a43364d62c43861aff44cb0a86c4615a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IterScaling</name>
    <filename>classEigen_1_1IterScaling.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterScaling.html</anchorfile>
      <anchor>a6a76754399fd004b3ac6011e272ffb71</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRef</name>
      <anchorfile>classEigen_1_1IterScaling.html</anchorfile>
      <anchor>aeff5ccef2ccb32c6f472a190f8a511af</anchor>
      <arglist>(MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>VectorXd &amp;</type>
      <name>LeftScaling</name>
      <anchorfile>classEigen_1_1IterScaling.html</anchorfile>
      <anchor>ab88d288be912d90a1e597e5dab0bd47b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorXd &amp;</type>
      <name>RightScaling</name>
      <anchorfile>classEigen_1_1IterScaling.html</anchorfile>
      <anchor>a617229454935a6a4fda76b8af56c52ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterScaling.html</anchorfile>
      <anchor>acbca5170d8043f40e387bcb6a42f8b71</anchor>
      <arglist>(double tol)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::KdBVH</name>
    <filename>classEigen_1_1KdBVH.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <templarg>_Object</templarg>
    <member kind="function">
      <type>void</type>
      <name>getChildren</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>afa2682bdb56b8fae57d7226ee6675f44</anchor>
      <arglist>(Index index, VolumeIterator &amp;outVBegin, VolumeIterator &amp;outVEnd, ObjectIterator &amp;outOBegin, ObjectIterator &amp;outOEnd) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getRootIndex</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a8111486ece7980dd8f0d10aff9693d11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Volume &amp;</type>
      <name>getVolume</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a59e7a2afb19fe7ae919fb95425bd6bf0</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a431eed3c2567a854fb350f0b327d3307</anchor>
      <arglist>(Iter begin, Iter end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a10a9c8f6d596d7a2cd285a3fb3e8c053</anchor>
      <arglist>(OIter begin, OIter end, BIter boxBegin, BIter boxEnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdBVH</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a87d240e2d6ac5e87fc2e4ae6e0fe4bdc</anchor>
      <arglist>(Iter begin, Iter end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KdBVH</name>
      <anchorfile>classEigen_1_1KdBVH.html</anchorfile>
      <anchor>a94f781127eeec80a7659b8a625e2fa94</anchor>
      <arglist>(OIter begin, OIter end, BIter boxBegin, BIter boxEnd)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::KroneckerProduct</name>
    <filename>classEigen_1_1KroneckerProduct.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>KroneckerProductBase&lt; KroneckerProduct&lt; Lhs, Rhs &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1KroneckerProduct.html</anchorfile>
      <anchor>a10f65aca36ed69da354e70b300b5a223</anchor>
      <arglist>(Dest &amp;dst) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KroneckerProduct</name>
      <anchorfile>classEigen_1_1KroneckerProduct.html</anchorfile>
      <anchor>a0b01b6d5ae2413cef8fd91fe7a98a0d7</anchor>
      <arglist>(const Lhs &amp;A, const Rhs &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::KroneckerProductBase</name>
    <filename>classEigen_1_1KroneckerProductBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0b302d4e55f5a58955e6c645d066928f</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a673348e7d9d2a4570aa0bcac33507f7b</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KroneckerProductBase</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0cb05eaa978b9fdc0285b48a6e0ecfb1</anchor>
      <arglist>(const Lhs &amp;A, const Rhs &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KroneckerProductBase&lt; KroneckerProduct&lt; Lhs, Rhs &gt; &gt;</name>
    <filename>classEigen_1_1KroneckerProductBase.html</filename>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0b302d4e55f5a58955e6c645d066928f</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a673348e7d9d2a4570aa0bcac33507f7b</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KroneckerProductBase</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0cb05eaa978b9fdc0285b48a6e0ecfb1</anchor>
      <arglist>(const Lhs &amp;A, const Rhs &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>KroneckerProductBase&lt; KroneckerProductSparse&lt; Lhs, Rhs &gt; &gt;</name>
    <filename>classEigen_1_1KroneckerProductBase.html</filename>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0b302d4e55f5a58955e6c645d066928f</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a673348e7d9d2a4570aa0bcac33507f7b</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KroneckerProductBase</name>
      <anchorfile>classEigen_1_1KroneckerProductBase.html</anchorfile>
      <anchor>a0cb05eaa978b9fdc0285b48a6e0ecfb1</anchor>
      <arglist>(const Lhs &amp;A, const Rhs &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::KroneckerProductSparse</name>
    <filename>classEigen_1_1KroneckerProductSparse.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>KroneckerProductBase&lt; KroneckerProductSparse&lt; Lhs, Rhs &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1KroneckerProductSparse.html</anchorfile>
      <anchor>a8b7269c23294765e0965b70b5af2557b</anchor>
      <arglist>(Dest &amp;dst) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KroneckerProductSparse</name>
      <anchorfile>classEigen_1_1KroneckerProductSparse.html</anchorfile>
      <anchor>ac0a69ba844415fbe79e6514f32b41fb5</anchor>
      <arglist>(const Lhs &amp;A, const Rhs &amp;B)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LevenbergMarquardt</name>
    <filename>classEigen_1_1LevenbergMarquardt.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>FVectorType &amp;</type>
      <name>diag</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a6e237ca1f23cdf5caa98fe23c6bcf464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>epsilon</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>aac799068926ca0bc3387b2dc5c0eb113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>factor</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a282e28b8331376b9875429dab1e280ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>fnorm</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ac30c5ce96ac91663b287b2ba7ec7c712</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>ftol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a957ac071ec775779bb03d10b463ddfbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FVectorType &amp;</type>
      <name>fvec</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a6c296a4a5b91f0ecc398b479a67c242d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>gnorm</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ab91ec0507fb508a2402ac0dfa15af776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>gtol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a18597c537ec7d492ee6d43788178e458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ae65bdccd2487989ae9b25f9c2e9dfab9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>aeb094683f0abe9c29ee89be0677de744</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>JacobianType &amp;</type>
      <name>jacobian</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>aaf2179310fdf873483f5d8b46f15da8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lm_param</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>aa8aa0d8c1dab58ac51df999587609e09</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>JacobianType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>afd6cd64fdd7ca32cc71a83d91432ea69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxfev</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a495894dde1fedfba97721f6b4a076901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nfev</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ad9563c6abeb33c0aba82e55fd72c64a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>njev</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a31bedcc92106ed170fde5750559a62a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PermutationType</type>
      <name>permutation</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a691142ba877e072c58016b4be77e9855</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetParameters</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a16172a2048058ea0a908213a7b0f8971</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEpsilon</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a3e13f6631ae59be984ee1ea196899cd7</anchor>
      <arglist>(RealScalar epsfcn)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExternalScaling</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a4af7d41545ec5908485357493839e6f6</anchor>
      <arglist>(bool value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFactor</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a3054eeba042b197ae8d415729770db69</anchor>
      <arglist>(RealScalar factor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFtol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a09c0852c6a4534b84a16ac5d9c631c12</anchor>
      <arglist>(RealScalar ftol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGtol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>ad5610b2353f1ce5e0c7357ed1b215fea</anchor>
      <arglist>(RealScalar gtol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxfev</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>af072d0f89c44415d8ed284df8b4a634a</anchor>
      <arglist>(Index maxfev)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setXtol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a691b571366630f1329d2de7a5e40e7a5</anchor>
      <arglist>(RealScalar xtol)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>xtol</name>
      <anchorfile>classEigen_1_1LevenbergMarquardt.html</anchorfile>
      <anchor>a25a7629ea877d8f08670536b3d234897</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixComplexPowerReturnValue</name>
    <filename>classEigen_1_1MatrixComplexPowerReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixComplexPowerReturnValue.html</anchorfile>
      <anchor>ac7a7947bc6cad6554d31b08b847bc6dd</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixComplexPowerReturnValue</name>
      <anchorfile>classEigen_1_1MatrixComplexPowerReturnValue.html</anchorfile>
      <anchor>a3e5903e22f70e9deb07c3967ae52fd54</anchor>
      <arglist>(const Derived &amp;A, const ComplexScalar &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixExponentialReturnValue</name>
    <filename>structEigen_1_1MatrixExponentialReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>structEigen_1_1MatrixExponentialReturnValue.html</anchorfile>
      <anchor>a3dd2c65c7c6cdc41ab17415ee11899a0</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixExponentialReturnValue</name>
      <anchorfile>structEigen_1_1MatrixExponentialReturnValue.html</anchorfile>
      <anchor>a4048419b1ee2befc51564703ba11acab</anchor>
      <arglist>(const Derived &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixFunctionReturnValue</name>
    <filename>classEigen_1_1MatrixFunctionReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixFunctionReturnValue.html</anchorfile>
      <anchor>a202d594ae254e3ea5420ff95d9f03a67</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixFunctionReturnValue</name>
      <anchorfile>classEigen_1_1MatrixFunctionReturnValue.html</anchorfile>
      <anchor>af193d7a3e1b4e65dc70e64eb4bc8e17f</anchor>
      <arglist>(const Derived &amp;A, StemFunction f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixLogarithmReturnValue</name>
    <filename>classEigen_1_1MatrixLogarithmReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixLogarithmReturnValue.html</anchorfile>
      <anchor>ac17537a51ce53a44746fabd7a83d29d3</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixLogarithmReturnValue</name>
      <anchorfile>classEigen_1_1MatrixLogarithmReturnValue.html</anchorfile>
      <anchor>adfd2417a3d6f671e156b4ab1b92f1837</anchor>
      <arglist>(const Derived &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixMarketIterator</name>
    <filename>classEigen_1_1MatrixMarketIterator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1MatrixMarketIterator.html</anchorfile>
      <anchor>ac938961d685306ef5b48d9943f7dcabd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>refX</name>
      <anchorfile>classEigen_1_1MatrixMarketIterator.html</anchorfile>
      <anchor>a80f334d9fbbed0d24ba0c32d2bea16bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;</type>
      <name>rhs</name>
      <anchorfile>classEigen_1_1MatrixMarketIterator.html</anchorfile>
      <anchor>ac141e537f3bc3a3c078a2780a6a956b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixPower</name>
    <filename>classEigen_1_1MatrixPower.html</filename>
    <templarg>MatrixType</templarg>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1MatrixPower.html</anchorfile>
      <anchor>aa1258393dc13acd6e401e000f99b915f</anchor>
      <arglist>(ResultType &amp;res, RealScalar p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPower</name>
      <anchorfile>classEigen_1_1MatrixPower.html</anchorfile>
      <anchor>a5eb445525601510413b53cd347c44716</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerParenthesesReturnValue&lt; MatrixType &gt;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1MatrixPower.html</anchorfile>
      <anchor>a2ad22d156b1a7ff12d6c40a093cd95eb</anchor>
      <arglist>(RealScalar p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixPowerAtomic</name>
    <filename>classEigen_1_1MatrixPowerAtomic.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1MatrixPowerAtomic.html</anchorfile>
      <anchor>ac3cdfb54a5b60079d068784534cbc174</anchor>
      <arglist>(ResultType &amp;res) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPowerAtomic</name>
      <anchorfile>classEigen_1_1MatrixPowerAtomic.html</anchorfile>
      <anchor>ac0ec5f8d6c203cd9b53e2c95e01037d4</anchor>
      <arglist>(const MatrixType &amp;T, RealScalar p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixPowerParenthesesReturnValue</name>
    <filename>classEigen_1_1MatrixPowerParenthesesReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixPowerParenthesesReturnValue.html</anchorfile>
      <anchor>af91430ff248b714158cfba4301cc0e2b</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPowerParenthesesReturnValue</name>
      <anchorfile>classEigen_1_1MatrixPowerParenthesesReturnValue.html</anchorfile>
      <anchor>ae3a02d943a31427a6dc8c1f60f3367d7</anchor>
      <arglist>(MatrixPower&lt; MatrixType &gt; &amp;pow, RealScalar p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixPowerReturnValue</name>
    <filename>classEigen_1_1MatrixPowerReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixPowerReturnValue.html</anchorfile>
      <anchor>a5f15ad16576debad4d4cc0798ff63172</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixPowerReturnValue</name>
      <anchorfile>classEigen_1_1MatrixPowerReturnValue.html</anchorfile>
      <anchor>a3067e09b352f967a23bb2a9c50afee88</anchor>
      <arglist>(const Derived &amp;A, RealScalar p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixSquareRootReturnValue</name>
    <filename>classEigen_1_1MatrixSquareRootReturnValue.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1MatrixSquareRootReturnValue.html</anchorfile>
      <anchor>a97577165569edcf19429c7748b670e51</anchor>
      <arglist>(ResultType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixSquareRootReturnValue</name>
      <anchorfile>classEigen_1_1MatrixSquareRootReturnValue.html</anchorfile>
      <anchor>aa27fd0e59ff1711a55ee8a4342c035d5</anchor>
      <arglist>(const Derived &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MaxSizeVector</name>
    <filename>classEigen_1_1MaxSizeVector.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>MaxSizeVector&lt; Eigen::MaxSizeVector&lt; unsigned &gt; &gt;</name>
    <filename>classEigen_1_1MaxSizeVector.html</filename>
  </compound>
  <compound kind="class">
    <name>MaxSizeVector&lt; EventCount::Waiter &gt;</name>
    <filename>classEigen_1_1MaxSizeVector.html</filename>
  </compound>
  <compound kind="class">
    <name>MaxSizeVector&lt; ThreadData &gt;</name>
    <filename>classEigen_1_1MaxSizeVector.html</filename>
  </compound>
  <compound kind="class">
    <name>MaxSizeVector&lt; Waiter &gt;</name>
    <filename>classEigen_1_1MaxSizeVector.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::MINRES</name>
    <filename>classEigen_1_1MINRES.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; MINRES&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>MINRES</name>
      <anchorfile>classEigen_1_1MINRES.html</anchorfile>
      <anchor>aa519021be1178a99f5f9ec633de9fc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MINRES</name>
      <anchorfile>classEigen_1_1MINRES.html</anchorfile>
      <anchor>a971bc758d11d1795d9e0abd3c958030b</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MINRES</name>
      <anchorfile>classEigen_1_1MINRES.html</anchorfile>
      <anchor>a3f40ba58caac8b10ae7df474af93a05b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::NumericalDiff</name>
    <filename>classEigen_1_1NumericalDiff.html</filename>
    <templarg></templarg>
    <templarg>mode</templarg>
    <member kind="function">
      <type>int</type>
      <name>df</name>
      <anchorfile>classEigen_1_1NumericalDiff.html</anchorfile>
      <anchor>a8fc63f1c3307cc6e61dc4d70c57b5037</anchor>
      <arglist>(const InputType &amp;_x, JacobianType &amp;jac) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::NumTraits&lt; mpfr::mpreal &gt;</name>
    <filename>structEigen_1_1NumTraits_3_01mpfr_1_1mpreal_01_4.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PolynomialSolver</name>
    <filename>classEigen_1_1PolynomialSolver.html</filename>
    <templarg></templarg>
    <templarg>_Deg</templarg>
    <base>Eigen::PolynomialSolverBase</base>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PolynomialSolver.html</anchorfile>
      <anchor>ac3ceae48528f3798d44c15a025cb03b8</anchor>
      <arglist>(const OtherPolynomial &amp;poly)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PolynomialSolverBase</name>
    <filename>classEigen_1_1PolynomialSolverBase.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Deg</templarg>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>absGreatestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>aa2f003d9662af8c776f1a1c12a9d4210</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>absSmallestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a9316eeb24076bcd4f60ea4d7f3e549eb</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>greatestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a5094b7ccc49918b7c7ae9e2a8c49d4bd</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootType &amp;</type>
      <name>greatestRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a0327769cc88877a79c7c838f03d78384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realRoots</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a4ea3b29499623832a0ad7b2b3ab05597</anchor>
      <arglist>(Stl_back_insertion_sequence &amp;bi_seq, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootsType &amp;</type>
      <name>roots</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a07bcd5339be5eacdf7e566d07d81bedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>smallestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a24b054cdf82a8e9409bea47c3c05c756</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootType &amp;</type>
      <name>smallestRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a64389d0acf586c772fb3d1db47a3f7ef</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolynomialSolverBase&lt; _Scalar, 1 &gt;</name>
    <filename>classEigen_1_1PolynomialSolverBase.html</filename>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>absGreatestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>aa2f003d9662af8c776f1a1c12a9d4210</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>absSmallestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a9316eeb24076bcd4f60ea4d7f3e549eb</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>greatestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a5094b7ccc49918b7c7ae9e2a8c49d4bd</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootType &amp;</type>
      <name>greatestRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a0327769cc88877a79c7c838f03d78384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>realRoots</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a4ea3b29499623832a0ad7b2b3ab05597</anchor>
      <arglist>(Stl_back_insertion_sequence &amp;bi_seq, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootsType &amp;</type>
      <name>roots</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a07bcd5339be5eacdf7e566d07d81bedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RealScalar &amp;</type>
      <name>smallestRealRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a24b054cdf82a8e9409bea47c3c05c756</anchor>
      <arglist>(bool &amp;hasArealRoot, const RealScalar &amp;absImaginaryThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const RootType &amp;</type>
      <name>smallestRoot</name>
      <anchorfile>classEigen_1_1PolynomialSolverBase.html</anchorfile>
      <anchor>a64389d0acf586c772fb3d1db47a3f7ef</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RandomSetter</name>
    <filename>classEigen_1_1RandomSetter.html</filename>
    <templarg></templarg>
    <templarg>MapTraits</templarg>
    <templarg>OuterPacketBits</templarg>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1RandomSetter.html</anchorfile>
      <anchor>ac34e5cd67e370641c3b48c8a91705046</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1RandomSetter.html</anchorfile>
      <anchor>a77dcbbc964b42027e00af269a5147c68</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomSetter</name>
      <anchorfile>classEigen_1_1RandomSetter.html</anchorfile>
      <anchor>a62e960bd52cec62a59ebb285f381138f</anchor>
      <arglist>(SparseMatrixType &amp;target)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RandomSetter</name>
      <anchorfile>classEigen_1_1RandomSetter.html</anchorfile>
      <anchor>a3e4a78672df59ab4dd2799919b431027</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::RangeBuilder</name>
    <filename>structutility_1_1tuple_1_1RangeBuilder.html</filename>
    <templarg>MIN</templarg>
    <templarg>N</templarg>
    <templarg>Is</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SGroup</name>
    <filename>classEigen_1_1SGroup.html</filename>
    <templarg>Gen</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SkylineInplaceLU</name>
    <filename>classEigen_1_1SkylineInplaceLU.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>a590e9a988b2843712a29a541787e6c38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>flags</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>a5e491f7643c548ac81d3f4a7e432be19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>precision</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>a050bcbe008f2ddeea4f6d5872e0daca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlags</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>afd8013d183aaca495dfd10d819e61aaf</anchor>
      <arglist>(int f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecision</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>a1c057a7dec39b8b196d49d7d411ea999</anchor>
      <arglist>(RealScalar v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SkylineInplaceLU</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>ac76b9384281e73b86b80f770015cf436</anchor>
      <arglist>(MatrixType &amp;matrix, int flags=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>a53c846d76559221d2bcf336a2da4d68f</anchor>
      <arglist>(const MatrixBase&lt; BDerived &gt; &amp;b, MatrixBase&lt; XDerived &gt; *x, const int transposed=0) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>succeeded</name>
      <anchorfile>classEigen_1_1SkylineInplaceLU.html</anchorfile>
      <anchor>abd633c27a0a342fb392b6af3ceb800ba</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SkylineMatrix</name>
    <filename>classEigen_1_1SkylineMatrix.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>SkylineMatrixBase&lt; SkylineMatrix&lt; _Scalar, _Options &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>a1269310d041fb3ca2a980644f3cfe5a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DONT_INLINE Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>a6e2d550f29d0dd59f83aa9d568d92c23</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>aea6d3b694cef560f15a7d18c1f010604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>aac6da20a87fca9d4cb6b871504497577</anchor>
      <arglist>(Index reserveSize, Index reserveUpperSize, Index reserveLowerSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>a918eed5cc583f6d402f0db60c5c5ad52</anchor>
      <arglist>(size_t rows, size_t cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>afeb349e5dc4b5d8c107ff067b44438f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>a56c9841de52e52744a2d5e6593979154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SkylineMatrix</name>
      <anchorfile>classEigen_1_1SkylineMatrix.html</anchorfile>
      <anchor>a456b254a757d26580b2c05fe270eaae7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SkylineMatrixBase</name>
    <filename>classEigen_1_1SkylineMatrixBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a38d1bf953af9198ddd3f0e56fc282015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a288f9228ca4a52efa9d3f4edef53a635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a0c8807124023bf5a3e94bd0a61dcf1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31af6ae6724ce38083a0032925e68782a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a687566e95391ffd9783432d3fee5d655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a30b689b8ac0277eaa3da46fd52702cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a30b689b8ac0277eaa3da46fd52702cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a288f9228ca4a52efa9d3f4edef53a635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a687566e95391ffd9783432d3fee5d655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31af6ae6724ce38083a0032925e68782a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a38d1bf953af9198ddd3f0e56fc282015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a0c8807124023bf5a3e94bd0a61dcf1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>aff9cfadb45ffbae8a33b710bc9b49d71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived, IsSkyline &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a8223cbedd8027149ac7a5e930d89f156</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a901f2691facc1a0321740300dc7a12d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>aaeda265186dd626052df8580779b7460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a63cc4a263d32a8a225e4a42e891b8ac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a8243b2fe6bcc6c3037717fcb0afa9d46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a635234baea6bd59f97e6bd219adbdb64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SkylineMatrixBase&lt; SkylineMatrix&lt; _Scalar, _Options &gt; &gt;</name>
    <filename>classEigen_1_1SkylineMatrixBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>CoeffReadCost</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a30b689b8ac0277eaa3da46fd52702cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a288f9228ca4a52efa9d3f4edef53a635</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a687566e95391ffd9783432d3fee5d655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31af6ae6724ce38083a0032925e68782a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a38d1bf953af9198ddd3f0e56fc282015</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>add28682c71abaa8fe54491586b1a3d31a0c8807124023bf5a3e94bd0a61dcf1b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>aff9cfadb45ffbae8a33b710bc9b49d71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SkylineMatrix&lt; _Scalar, _Options &gt;, IsSkyline &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a8223cbedd8027149ac7a5e930d89f156</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a901f2691facc1a0321740300dc7a12d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>aaeda265186dd626052df8580779b7460</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a63cc4a263d32a8a225e4a42e891b8ac0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a8243b2fe6bcc6c3037717fcb0afa9d46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SkylineMatrixBase.html</anchorfile>
      <anchor>a635234baea6bd59f97e6bd219adbdb64</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SkylineStorage</name>
    <filename>classEigen_1_1SkylineStorage.html</filename>
    <templarg>Scalar</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Spline</name>
    <filename>classEigen_1_1Spline.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ab73cb2143311ff0e3411b3409e8346d3ae0308df454dc12fe04b50909acccc432</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a34e3c94600adfcdc98b413ac6c92c7f2aeb9d45bc9095c3065fa5fa2e0ac3e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::BasisDerivativeType</type>
      <name>BasisDerivativeType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a9db0b0108353660cd03524f2e67d6b3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::BasisVectorType</type>
      <name>BasisVectorType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a1d49cef942ea59d85d1711ee32354e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::ControlPointVectorType</type>
      <name>ControlPointVectorType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ac42c673462a98ad1779761bebeb450bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a34e3c94600adfcdc98b413ac6c92c7f2aeb9d45bc9095c3065fa5fa2e0ac3e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ab73cb2143311ff0e3411b3409e8346d3ae0308df454dc12fe04b50909acccc432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::KnotVectorType</type>
      <name>KnotVectorType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a066f7a8b120316c9068b559f0790e9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::ParameterVectorType</type>
      <name>ParameterVectorType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a04bcc878ef5c8316e8cc60b4cf00d77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SplineTraits&lt; Spline &gt;::PointType</type>
      <name>PointType</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a9ade8a2f81dae6eedb8845cb080672bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a8cafd78b564825c76fbb3419653d9742</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; Spline &gt;::BasisDerivativeType</type>
      <name>basisFunctionDerivatives</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a17d416e814d1ee957e5b309dc423751f</anchor>
      <arglist>(Scalar u, DenseIndex order) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; Spline, DerivativeOrder &gt;::BasisDerivativeType</type>
      <name>basisFunctionDerivatives</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>acd36d8b5a4f57eb1d7f27989ac6d54ac</anchor>
      <arglist>(Scalar u, DenseIndex order=DerivativeOrder) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; Spline &gt;::BasisVectorType</type>
      <name>basisFunctions</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>afe0997f0bb02a3fac3073016abac04c6</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function">
      <type>const ControlPointVectorType &amp;</type>
      <name>ctrls</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a0fc81e475d3a0ba34da1bd97f2e8fbc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>degree</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a0df23e941ac0f31dcd095a4dd4f4a7ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; Spline &gt;::DerivativeType</type>
      <name>derivatives</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a196730cf190dfa16907db888277e5aed</anchor>
      <arglist>(Scalar u, DenseIndex order) const</arglist>
    </member>
    <member kind="function">
      <type>SplineTraits&lt; Spline, DerivativeOrder &gt;::DerivativeType</type>
      <name>derivatives</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a50bcf6c99a95ecab7c475f3ab503ee22</anchor>
      <arglist>(Scalar u, DenseIndex order=DerivativeOrder) const</arglist>
    </member>
    <member kind="function">
      <type>const KnotVectorType &amp;</type>
      <name>knots</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ae3eac8af580ad880d8ad3a259d453aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a3c7e1838eae4ee7e341ef9d3dbf9ba45</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function">
      <type>DenseIndex</type>
      <name>span</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ab62751802b4cc237aadb0dbf3455df98</anchor>
      <arglist>(Scalar u) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a25ebf3b3621db98ffe60eba3c0d64025</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ac9dfdbeabf9573642d970e29e92dd2be</anchor>
      <arglist>(const OtherVectorType &amp;knots, const OtherArrayType &amp;ctrls)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Spline</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>a0e6083605acc9f565e8bf4057b3f4bd3</anchor>
      <arglist>(const Spline&lt; Scalar, Dimension, OtherDegree &gt; &amp;spline)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasisDerivativeType</type>
      <name>BasisFunctionDerivatives</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>ab5d0d30713ca56dcd33dbb37c262829a</anchor>
      <arglist>(const Scalar u, const DenseIndex order, const DenseIndex degree, const KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BasisVectorType</type>
      <name>BasisFunctions</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>aac1839e8a956636d76bec24a4afc27e2</anchor>
      <arglist>(Scalar u, DenseIndex degree, const KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DenseIndex</type>
      <name>Span</name>
      <anchorfile>classEigen_1_1Spline.html</anchorfile>
      <anchor>aaba7632c61b84194e890696c2b57be1b</anchor>
      <arglist>(typename SplineTraits&lt; Spline &gt;::Scalar u, DenseIndex degree, const typename SplineTraits&lt; Spline &gt;::KnotVectorType &amp;knots)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SplineFitting</name>
    <filename>structEigen_1_1SplineFitting.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static SplineType</type>
      <name>Interpolate</name>
      <anchorfile>structEigen_1_1SplineFitting.html</anchorfile>
      <anchor>adc80b6f0dd0dbbea28130fb254626874</anchor>
      <arglist>(const PointArrayType &amp;pts, DenseIndex degree)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineType</type>
      <name>Interpolate</name>
      <anchorfile>structEigen_1_1SplineFitting.html</anchorfile>
      <anchor>af08185c8b635283f7c76efe91576cc83</anchor>
      <arglist>(const PointArrayType &amp;pts, DenseIndex degree, const KnotVectorType &amp;knot_parameters)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineType</type>
      <name>InterpolateWithDerivatives</name>
      <anchorfile>structEigen_1_1SplineFitting.html</anchorfile>
      <anchor>a7bd937fdcfa168dbdc27932886a4da9f</anchor>
      <arglist>(const PointArrayType &amp;points, const PointArrayType &amp;derivatives, const IndexArray &amp;derivativeIndices, const unsigned int degree)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SplineType</type>
      <name>InterpolateWithDerivatives</name>
      <anchorfile>structEigen_1_1SplineFitting.html</anchorfile>
      <anchor>a0317c97f2b57ccf5dcf077409d51e54d</anchor>
      <arglist>(const PointArrayType &amp;points, const PointArrayType &amp;derivatives, const IndexArray &amp;derivativeIndices, const unsigned int degree, const ParameterVectorType &amp;parameters)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</name>
    <filename>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <templarg>_DerivativeOrder</templarg>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a6604818622321182ee6cde9a89ba8e7baa546f3e09061b25456cf70107db72ccd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>aef4ab656b1e8d15d23d40d2fbb9c925ca75a34223007ae974d1c19d653b2abfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a221a6ee568c8739433cccdb87e3af607a7e79c844da14c6fa961e112d05e23175</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; _Scalar, Dynamic, Dynamic, RowMajor, NumOfDerivativesAtCompileTime, OrderAtCompileTime &gt;</type>
      <name>BasisDerivativeType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a507283e4ba6108e20eae19e805816770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a221a6ee568c8739433cccdb87e3af607a7e79c844da14c6fa961e112d05e23175</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; _Scalar, _Dim, Dynamic, DerivativeMemoryLayout, _Dim, NumOfDerivativesAtCompileTime &gt;</type>
      <name>DerivativeType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a5e0a0e3b07c844c84cf164a7f0db9314</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>aef4ab656b1e8d15d23d40d2fbb9c925ca75a34223007ae974d1c19d653b2abfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01__DerivativeOrder_01_4.html</anchorfile>
      <anchor>a6604818622321182ee6cde9a89ba8e7baa546f3e09061b25456cf70107db72ccd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, Dynamic &gt;</name>
    <filename>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Dim</templarg>
    <templarg>_Degree</templarg>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>afb561488427a3868689d41543e4ebcdea14c4a4e9fe5d03a6ba00511dacf018b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a7f2690702e8b05f58999af5d3f782188a39d70871bb511aeb19f8c5a2501f0eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a029ca9388d5fccd31e01c874045bff6da782b4fa82b6dd9b27315743dc4696719</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>aa48faeb50daedf7ffa75aa7ab8cdd558a5699cd0a1c022f44b527c079adfc0049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a3091b2daa8cd1a1539396f6bdd53b5c8a3b107c361982e84a53d02e066743dcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, Dynamic, Dynamic, RowMajor, NumOfDerivativesAtCompileTime, OrderAtCompileTime &gt;</type>
      <name>BasisDerivativeType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a79379499c52489dbf2b0251941f98370</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, 1, OrderAtCompileTime &gt;</type>
      <name>BasisVectorType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a8f6574a4a8281fad62adbde35169bae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, Dimension, Dynamic &gt;</type>
      <name>ControlPointVectorType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>ad4a21460926a6186f3b56cec9380e742</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Degree</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a7f2690702e8b05f58999af5d3f782188a39d70871bb511aeb19f8c5a2501f0eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DerivativeMemoryLayout</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a3091b2daa8cd1a1539396f6bdd53b5c8a3b107c361982e84a53d02e066743dcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, Dimension, Dynamic, DerivativeMemoryLayout, Dimension, NumOfDerivativesAtCompileTime &gt;</type>
      <name>DerivativeType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>ab8a352bf7e6f02ab6f1864e372868db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Dimension</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>afb561488427a3868689d41543e4ebcdea14c4a4e9fe5d03a6ba00511dacf018b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, 1, Dynamic &gt;</type>
      <name>KnotVectorType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a2f5f4e5598c650df3f284c3db0eeafa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumOfDerivativesAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>aa48faeb50daedf7ffa75aa7ab8cdd558a5699cd0a1c022f44b527c079adfc0049</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OrderAtCompileTime</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a029ca9388d5fccd31e01c874045bff6da782b4fa82b6dd9b27315743dc4696719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, 1, Dynamic &gt;</type>
      <name>ParameterVectorType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>a61cd43163c3fe6c68cc6c191d210a36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; Scalar, Dimension, 1 &gt;</type>
      <name>PointType</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>ad479d9b94761b2cf332fda5984301fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>structEigen_1_1SplineTraits_3_01Spline_3_01__Scalar_00_01__Dim_00_01__Degree_01_4_00_01Dynamic_01_4.html</anchorfile>
      <anchor>aa440dee6a559821c867c94ee4bbf60f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::StaticIf</name>
    <filename>structutility_1_1tuple_1_1StaticIf.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::StaticIf&lt; true, T &gt;</name>
    <filename>structutility_1_1tuple_1_1StaticIf_3_01true_00_01T_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::StaticSGroup</name>
    <filename>classEigen_1_1StaticSGroup.html</filename>
    <templarg>Gen</templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::StdMapTraits</name>
    <filename>structEigen_1_1StdMapTraits.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Tensor</name>
    <filename>classEigen_1_1Tensor.html</filename>
    <templarg>Scalar_</templarg>
    <templarg>NumIndices_</templarg>
    <templarg>Options_</templarg>
    <templarg>IndexType_</templarg>
    <base>TensorBase&lt; Tensor&lt; Scalar_, NumIndices_, Options_, IndexType_ &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1Tensor.html</anchorfile>
      <anchor>ade5949755478e59ad152dd952d6a8636</anchor>
      <arglist>(const array&lt; Index, NumIndices &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1Tensor.html</anchorfile>
      <anchor>a903e6654bc86b4abe01ddba12dc17223</anchor>
      <arglist>(const Sizes&lt; Indices... &gt; &amp;dimensions)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tensor</name>
      <anchorfile>classEigen_1_1Tensor.html</anchorfile>
      <anchor>a9d0f7b1474af9b4e76cb4e544c2bb03c</anchor>
      <arglist>(const array&lt; Index, NumIndices &gt; &amp;dimensions)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorAssign</name>
    <filename>classTensorAssign.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorBase</name>
    <filename>classEigen_1_1TensorBase.html</filename>
    <templarg></templarg>
    <templarg>AccessLevel</templarg>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; Tensor&lt; Scalar_, NumIndices_, Options_, IndexType_ &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorAssignOp&lt; LhsXprType, RhsXprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorBroadcastingOp&lt; Broadcast, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorChippingOp&lt; DimId, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorConcatenationOp&lt; Axis, LhsXprType, RhsXprType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorContractionOp&lt; Indices, LhsXprType, RhsXprType, OutputKernelType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorConversionOp&lt; TargetType, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorConvolutionOp&lt; Indices, InputXprType, KernelXprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCustomBinaryOp&lt; CustomBinaryFunc, LhsXprType, RhsXprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCustomUnaryOp&lt; CustomUnaryFunc, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCwiseBinaryOp&lt; BinaryOp, LhsXprType, RhsXprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCwiseNullaryOp&lt; NullaryOp, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCwiseTernaryOp&lt; TernaryOp, Arg1XprType, Arg2XprType, Arg3XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorCwiseUnaryOp&lt; UnaryOp, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorEvalToOp&lt; XprType, MakePointer_ &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorFixedSize&lt; Scalar_, Dimensions_, Options_, IndexType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorForcedEvalOp&lt; XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorGeneratorOp&lt; Generator, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorImagePatchOp&lt; Rows, Cols, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorIndexTupleOp&lt; XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorInflationOp&lt; Strides, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorLayoutSwapOp&lt; ArgType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorLayoutSwapOp&lt; XprType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorMap&lt; PlainObjectType, Options_, MakePointer_ &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorPaddingOp&lt; PaddingDimensions, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorPatchOp&lt; PatchDim, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReductionOp&lt; Op, Dims, XprType, MakePointer_ &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReductionOp&lt; ReduceOp, Dims, const TensorIndexTupleOp&lt; ArgType &gt;, MakePointer_ &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorRef&lt; Derived &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorRef&lt; PlainObjectType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReshapingOp&lt; NewDimensions, ArgType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReshapingOp&lt; NewDimensions, XprType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReverseOp&lt; ReverseDimensions, ArgType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorReverseOp&lt; ReverseDimensions, XprType &gt;, WriteAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorScanOp&lt; Op, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorSelectOp&lt; IfXprType, ThenXprType, ElseXprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorShufflingOp&lt; Shuffle, ArgType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorShufflingOp&lt; Shuffle, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorSlicingOp&lt; StartIndices, Sizes, ArgType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorSlicingOp&lt; StartIndices, Sizes, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorStridingOp&lt; Strides, ArgType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorStridingOp&lt; Strides, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorStridingSlicingOp&lt; StartIndices, StopIndices, Strides, ArgType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorStridingSlicingOp&lt; StartIndices, StopIndices, Strides, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorTraceOp&lt; Dims, XprType &gt; &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorTupleReducerDeviceOp&lt; StrideDims, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorTupleReducerOp&lt; ReduceOp, Dims, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBase&lt; TensorVolumePatchOp&lt; Planes, Rows, Cols, XprType &gt;, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1TensorBase.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBlockShapeType</name>
    <filename>classTensorBlockShapeType.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorBroadcasting</name>
    <filename>classTensorBroadcasting.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorConcatenationOp</name>
    <filename>classEigen_1_1TensorConcatenationOp.html</filename>
    <templarg>Axis</templarg>
    <templarg>LhsXprType</templarg>
    <templarg>RhsXprType</templarg>
    <base>TensorBase&lt; TensorConcatenationOp&lt; Axis, LhsXprType, RhsXprType &gt;, WriteAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorConcatenationOp&lt; Axis, LeftArgType, RightArgType &gt;</name>
    <filename>classEigen_1_1TensorConcatenationOp.html</filename>
    <base>Eigen::TensorBase</base>
  </compound>
  <compound kind="class">
    <name>TensorContraction</name>
    <filename>classTensorContraction.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorConversionOp</name>
    <filename>classEigen_1_1TensorConversionOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>TensorBase&lt; TensorConversionOp&lt; TargetType, XprType &gt;, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorConvolution</name>
    <filename>classTensorConvolution.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorConvolution</name>
    <filename>classTensorConvolution.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorCustomBinaryOp</name>
    <filename>classEigen_1_1TensorCustomBinaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>TensorBase&lt; TensorCustomBinaryOp&lt; CustomBinaryFunc, LhsXprType, RhsXprType &gt;, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorCustomUnaryOp</name>
    <filename>classEigen_1_1TensorCustomUnaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>TensorBase&lt; TensorCustomUnaryOp&lt; CustomUnaryFunc, XprType &gt;, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorDevice</name>
    <filename>classEigen_1_1TensorDevice.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorEvaluator</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <templarg>Derived</templarg>
    <templarg>Device</templarg>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; Arg1Type, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; Arg2Type, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; Arg3Type, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; ArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; ArgType, SyclKernelDevice &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const SyclKernelDevice &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorChippingOp&lt; DimId, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorConcatenationOp&lt; Axis, LeftArgType, RightArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorIndexTupleOp&lt; ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorLayoutSwapOp&lt; ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorReductionOp&lt; ReduceOp, Dims, const TensorIndexTupleOp&lt; ArgType &gt; &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorRef&lt; Derived &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorReshapingOp&lt; NewDimensions, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorReverseOp&lt; ReverseDimensions, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorShufflingOp&lt; Shuffle, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorSlicingOp&lt; StartIndices, Sizes, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorStridingOp&lt; Strides, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; const TensorStridingSlicingOp&lt; StartIndices, StopIndices, Strides, ArgType &gt;, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; ElseArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; EvalLeftArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; EvalRightArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; IfArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; InputArgType, const Eigen::SyclDevice &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const const Eigen::SyclDevice &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; InputArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; KernelArgType, const Eigen::SyclDevice &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const const Eigen::SyclDevice &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; KernelArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; LeftArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; RightArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorEvaluator&lt; ThenArgType, Device &gt;</name>
    <filename>structEigen_1_1TensorEvaluator.html</filename>
    <member kind="function">
      <type>const Device &amp;</type>
      <name>device</name>
      <anchorfile>structEigen_1_1TensorEvaluator.html</anchorfile>
      <anchor>a98b51809ed8f7a1f736eb7b952b9636e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorExecutor</name>
    <filename>classTensorExecutor.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorExpr</name>
    <filename>classTensorExpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorFixedSize</name>
    <filename>classEigen_1_1TensorFixedSize.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Options_</templarg>
    <templarg></templarg>
    <base>TensorBase&lt; TensorFixedSize&lt; Scalar_, Dimensions_, Options_, IndexType &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorForcedEval</name>
    <filename>classTensorForcedEval.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorForcedEval</name>
    <filename>classTensorForcedEval.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorGeneratorOp</name>
    <filename>classEigen_1_1TensorGeneratorOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>TensorBase&lt; TensorGeneratorOp&lt; Generator, XprType &gt;, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorImagePatch</name>
    <filename>classTensorImagePatch.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorIndexTuple</name>
    <filename>classTensorIndexTuple.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorInflation</name>
    <filename>classTensorInflation.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorKChippingReshaping</name>
    <filename>classTensorKChippingReshaping.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorLayoutSwap</name>
    <filename>classTensorLayoutSwap.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorMap</name>
    <filename>classEigen_1_1TensorMap.html</filename>
    <templarg></templarg>
    <templarg>Options_</templarg>
    <templarg>MakePointer_</templarg>
    <base>TensorBase&lt; TensorMap&lt; PlainObjectType, Options_, MakePointer_ &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorPadding</name>
    <filename>classTensorPadding.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorPatch</name>
    <filename>classTensorPatch.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorReduction</name>
    <filename>classTensorReduction.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TensorRef</name>
    <filename>classEigen_1_1TensorRef.html</filename>
    <templarg>PlainObjectType</templarg>
    <base>TensorBase&lt; TensorRef&lt; PlainObjectType &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorRef&lt; Derived &gt;</name>
    <filename>classEigen_1_1TensorRef.html</filename>
    <base>TensorBase&lt; TensorRef&lt; Derived &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>TensorReshaping</name>
    <filename>classTensorReshaping.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorReverse</name>
    <filename>classTensorReverse.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorScan</name>
    <filename>classTensorScan.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorShuffling</name>
    <filename>classTensorShuffling.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorSlicing</name>
    <filename>classTensorSlicing.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorStriding</name>
    <filename>classTensorStriding.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorTrace</name>
    <filename>classTensorTrace.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorTupleIndex</name>
    <filename>classTensorTupleIndex.html</filename>
  </compound>
  <compound kind="class">
    <name>TensorVolumePatch</name>
    <filename>classTensorVolumePatch.html</filename>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::Tuple</name>
    <filename>structutility_1_1tuple_1_1Tuple.html</filename>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>utility::tuple::Tuple&lt; T, Ts... &gt;</name>
    <filename>structutility_1_1tuple_1_1Tuple_3_01T_00_01Ts_8_8_8_01_4.html</filename>
    <templarg></templarg>
    <templarg>Ts</templarg>
  </compound>
  <compound kind="class">
    <name>Tuple&lt; Ts... &gt;</name>
    <filename>structutility_1_1tuple_1_1Tuple.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>namespaceEigen.html</filename>
    <class kind="class">Eigen::AlignedVector3</class>
    <class kind="class">Eigen::AutoDiffScalar</class>
    <class kind="class">Eigen::BlockSparseMatrix</class>
    <class kind="class">Eigen::DGMRES</class>
    <class kind="class">Eigen::DynamicSGroup</class>
    <class kind="class">Eigen::DynamicSparseMatrix</class>
    <class kind="class">Eigen::EulerAngles</class>
    <class kind="class">Eigen::EulerSystem</class>
    <class kind="class">Eigen::GMRES</class>
    <class kind="class">Eigen::HybridNonLinearSolver</class>
    <class kind="class">Eigen::IterationController</class>
    <class kind="class">Eigen::IterScaling</class>
    <class kind="class">Eigen::KdBVH</class>
    <class kind="class">Eigen::KroneckerProduct</class>
    <class kind="class">Eigen::KroneckerProductBase</class>
    <class kind="class">Eigen::KroneckerProductSparse</class>
    <class kind="class">Eigen::LevenbergMarquardt</class>
    <class kind="class">Eigen::MatrixComplexPowerReturnValue</class>
    <class kind="struct">Eigen::MatrixExponentialReturnValue</class>
    <class kind="class">Eigen::MatrixFunctionReturnValue</class>
    <class kind="class">Eigen::MatrixLogarithmReturnValue</class>
    <class kind="class">Eigen::MatrixMarketIterator</class>
    <class kind="class">Eigen::MatrixPower</class>
    <class kind="class">Eigen::MatrixPowerAtomic</class>
    <class kind="class">Eigen::MatrixPowerParenthesesReturnValue</class>
    <class kind="class">Eigen::MatrixPowerReturnValue</class>
    <class kind="class">Eigen::MatrixSquareRootReturnValue</class>
    <class kind="class">Eigen::MaxSizeVector</class>
    <class kind="class">Eigen::MINRES</class>
    <class kind="class">Eigen::NumericalDiff</class>
    <class kind="struct">Eigen::NumTraits&lt; mpfr::mpreal &gt;</class>
    <class kind="class">Eigen::PolynomialSolver</class>
    <class kind="class">Eigen::PolynomialSolverBase</class>
    <class kind="class">Eigen::RandomSetter</class>
    <class kind="class">Eigen::SGroup</class>
    <class kind="class">Eigen::SkylineInplaceLU</class>
    <class kind="class">Eigen::SkylineMatrix</class>
    <class kind="class">Eigen::SkylineMatrixBase</class>
    <class kind="class">Eigen::SkylineStorage</class>
    <class kind="class">Eigen::Spline</class>
    <class kind="struct">Eigen::SplineFitting</class>
    <class kind="struct">Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</class>
    <class kind="struct">Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, Dynamic &gt;</class>
    <class kind="class">Eigen::StaticSGroup</class>
    <class kind="struct">Eigen::StdMapTraits</class>
    <class kind="class">Eigen::Tensor</class>
    <class kind="class">Eigen::TensorBase</class>
    <class kind="class">Eigen::TensorConcatenationOp</class>
    <class kind="class">Eigen::TensorConversionOp</class>
    <class kind="class">Eigen::TensorCustomBinaryOp</class>
    <class kind="class">Eigen::TensorCustomUnaryOp</class>
    <class kind="class">Eigen::TensorDevice</class>
    <class kind="class">Eigen::TensorEvaluator</class>
    <class kind="class">Eigen::TensorFixedSize</class>
    <class kind="class">Eigen::TensorGeneratorOp</class>
    <class kind="class">Eigen::TensorMap</class>
    <class kind="class">Eigen::TensorRef</class>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXYX &gt;</type>
      <name>EulerAnglesXYXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga409ece4f53f28fca09e41a705651ce48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXYX &gt;</type>
      <name>EulerAnglesXYXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga5a160649131f84254585880a440aa0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXYZ &gt;</type>
      <name>EulerAnglesXYZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga861bc3a579ec33581769d5266b6f6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXYZ &gt;</type>
      <name>EulerAnglesXYZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga53fe408232ad7621d6a443d76f9ac93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXZX &gt;</type>
      <name>EulerAnglesXZXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gad106302a1f6e1fcea51830f2ff42e94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXZX &gt;</type>
      <name>EulerAnglesXZXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4c6a4ad5a71566605a8794ff4c4fa5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXZY &gt;</type>
      <name>EulerAnglesXZYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga9d8eba2490e596e5f733c6e99f580d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXZY &gt;</type>
      <name>EulerAnglesXZYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gae28ed3be70d16192d0933a5458802094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYXY &gt;</type>
      <name>EulerAnglesYXYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabafb17a58c430c0abc5bfa7d4925d10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYXY &gt;</type>
      <name>EulerAnglesYXYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga21b9f67580cd78643d3d08a44d8ef93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYXZ &gt;</type>
      <name>EulerAnglesYXZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga001f9fbfc82948f04dff2790ba32dc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYXZ &gt;</type>
      <name>EulerAnglesYXZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga6843b6cd5803f635ee866ff61a5a06ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYZX &gt;</type>
      <name>EulerAnglesYZXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga848046359634eda7cec3f57c0461460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYZX &gt;</type>
      <name>EulerAnglesYZXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gafbc20c24cc82d1450dfc1254276f4b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYZY &gt;</type>
      <name>EulerAnglesYZYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga48505785c62a6e33aa238da99e0d30b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYZY &gt;</type>
      <name>EulerAnglesYZYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga04878b185127fdc80d32f7dff0ff9e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZXY &gt;</type>
      <name>EulerAnglesZXYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4fb0d195504d934ab3244d3685ff1cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZXY &gt;</type>
      <name>EulerAnglesZXYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga2d7e6ab44093ec3db57e3c87c55abcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZXZ &gt;</type>
      <name>EulerAnglesZXZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4102840115ae42675c083a2336eb7800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZXZ &gt;</type>
      <name>EulerAnglesZXZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gac5971a9807d22d26a0240189ba43bdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZYX &gt;</type>
      <name>EulerAnglesZYXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4afa80019cff83df31b633b35c102cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZYX &gt;</type>
      <name>EulerAnglesZYXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga68a16f769307e750dbfac6268771f377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZYZ &gt;</type>
      <name>EulerAnglesZYZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gad5b07931b7affb1fdb8e0a55505e2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZYZ &gt;</type>
      <name>EulerAnglesZYZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga8ad45f85baa68354f72ba9af68b6867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Y, EULER_X &gt;</type>
      <name>EulerSystemXYX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gaf31ed290215ceddba27c304bb8537ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Y, EULER_Z &gt;</type>
      <name>EulerSystemXYZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga7c4d42543380af953bfc009fa012d8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Z, EULER_X &gt;</type>
      <name>EulerSystemXZX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga0080bc8af60feb746663bd83e930b39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Z, EULER_Y &gt;</type>
      <name>EulerSystemXZY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga35f001d8aeef43d6a3d661c6e70dd762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_X, EULER_Y &gt;</type>
      <name>EulerSystemYXY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabeaefca8d5f5f9ddeac746b3ba3945fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_X, EULER_Z &gt;</type>
      <name>EulerSystemYXZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gac043703434ad0ccdb513953b1393df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_Z, EULER_X &gt;</type>
      <name>EulerSystemYZX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga3a02c9a9ed8ae8286b003246064e7ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_Z, EULER_Y &gt;</type>
      <name>EulerSystemYZY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gada37f727fbc59ea1ec28d55e87079e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_X, EULER_Y &gt;</type>
      <name>EulerSystemZXY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga9918e0f6c2f203b5a38561dede6a97c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_X, EULER_Z &gt;</type>
      <name>EulerSystemZXZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gafe06260e96bfa685e738112b604cd095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_Y, EULER_X &gt;</type>
      <name>EulerSystemZYX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabdbee31f3c91ee6cd9b57b6866487274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_Y, EULER_Z &gt;</type>
      <name>EulerSystemZYZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga8116a4aae51fbe002bed95a001641a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; double, 2 &gt;</type>
      <name>Spline2d</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa04df76fa4fc7d93538c28bbbd838507</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; float, 2 &gt;</type>
      <name>Spline2f</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a1709ceddcb1e899317ac4bdb9682807f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; double, 3 &gt;</type>
      <name>Spline3d</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a34dfede40d5b8f3b2443ff20d891f455</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Spline&lt; float, 3 &gt;</type>
      <name>Spline3f</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a612e989f65acc6abc1593909f901e455</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EulerAxis</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gae614aa7cdd687fb5c421a54f2ce5c361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_X</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361a11e1ea88cbe04a6fc077475d515d0b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_Y</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361aee756a2b63043248f3d83541386c266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_Z</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361a95187b9943820cca5edc4bc96b3c08be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const TensorCwiseTernaryOp&lt; internal::scalar_betainc_op&lt; typename XDerived::Scalar &gt;, const ADerived, const BDerived, const XDerived &gt;</type>
      <name>betainc</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6d7e9b581a1fc3ca3c8aff6a0a69f523</anchor>
      <arglist>(const ADerived &amp;a, const BDerived &amp;b, const XDerived &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseTernaryOp&lt; Eigen::internal::scalar_betainc_op&lt; typename ArgXDerived::Scalar &gt;, const ArgADerived, const ArgBDerived, const ArgXDerived &gt;</type>
      <name>betainc</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac58db11132cd34e57ad819f3e77ff60c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; ArgADerived &gt; &amp;a, const Eigen::ArrayBase&lt; ArgBDerived &gt; &amp;b, const Eigen::ArrayBase&lt; ArgXDerived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVIntersect</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a07d8e283f082c972338f3fc4f644b2a9</anchor>
      <arglist>(const BVH &amp;tree, Intersector &amp;intersector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>BVIntersect</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac3b8047a3ee05b5e6fec4668197a9a43</anchor>
      <arglist>(const BVH1 &amp;tree1, const BVH2 &amp;tree2, Intersector &amp;intersector)</arglist>
    </member>
    <member kind="function">
      <type>Minimizer::Scalar</type>
      <name>BVMinimize</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>adcbe73ac1482eacab0e18ee32c25508e</anchor>
      <arglist>(const BVH &amp;tree, Minimizer &amp;minimizer)</arglist>
    </member>
    <member kind="function">
      <type>Minimizer::Scalar</type>
      <name>BVMinimize</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a915f6adc8b195c94a83c35de6a842556</anchor>
      <arglist>(const BVH1 &amp;tree1, const BVH2 &amp;tree2, Minimizer &amp;minimizer)</arglist>
    </member>
    <member kind="function">
      <type>NumTraits&lt; typename Polynomial::Scalar &gt;::Real</type>
      <name>cauchy_max_bound</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>ga375e3ea1f370fb76dfe0f43a89b95926</anchor>
      <arglist>(const Polynomial &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>NumTraits&lt; typename Polynomial::Scalar &gt;::Real</type>
      <name>cauchy_min_bound</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gab076afbdba0e9298a541cc4e8cc7506b</anchor>
      <arglist>(const Polynomial &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ChordLengths</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>ga1b4cbde5d98411405871accf877552d2</anchor>
      <arglist>(const PointArrayType &amp;pts, KnotVectorType &amp;chord_lengths)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_gamma_sample_der_alpha_op&lt; typename AlphaDerived::Scalar &gt;, const AlphaDerived, const SampleDerived &gt;</type>
      <name>gamma_sample_der_alpha</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>afd81653604859fe8e5b09552a7a800c9</anchor>
      <arglist>(const Eigen::ArrayBase&lt; AlphaDerived &gt; &amp;alpha, const Eigen::ArrayBase&lt; SampleDerived &gt; &amp;sample)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_i0e_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>i0e</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa68750d97d0266aed9333cc295dca383</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_i1e_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>i1e</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a80326e9c54ccc23300f871b116842e4d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_igamma_op&lt; typename Derived::Scalar &gt;, const Derived, const ExponentDerived &gt;</type>
      <name>igamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6e89509c5ff1af076baea462520f231c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;a, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_igamma_der_a_op&lt; typename Derived::Scalar &gt;, const Derived, const ExponentDerived &gt;</type>
      <name>igamma_der_a</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad0b09518c9ef2376690af1b346f77ff1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;a, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_igammac_op&lt; typename Derived::Scalar &gt;, const Derived, const ExponentDerived &gt;</type>
      <name>igammac</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a2b1593c0c3f9d1673ae5980ae03e75f1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;a, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>KnotAveraging</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>ga9474da5ed68bbd9a6788a999330416d6</anchor>
      <arglist>(const KnotVectorType &amp;parameters, DenseIndex degree, KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>KnotAveragingWithDerivatives</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>gae10a6f9b6ab7fb400a2526b6382c533b</anchor>
      <arglist>(const ParameterVectorType &amp;parameters, const unsigned int degree, const IndexArray &amp;derivativeIndices, KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>KroneckerProduct&lt; A, B &gt;</type>
      <name>kroneckerProduct</name>
      <anchorfile>group__KroneckerProduct__Module.html</anchorfile>
      <anchor>gaa8924dffc6cee7aa1e908dc395a7a167</anchor>
      <arglist>(const MatrixBase&lt; A &gt; &amp;a, const MatrixBase&lt; B &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>KroneckerProductSparse&lt; A, B &gt;</type>
      <name>kroneckerProduct</name>
      <anchorfile>group__KroneckerProduct__Module.html</anchorfile>
      <anchor>gaca497f43cc92bcbf6eaff64984a266cc</anchor>
      <arglist>(const EigenBase&lt; A &gt; &amp;a, const EigenBase&lt; B &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix_sqrt_quasi_triangular</name>
      <anchorfile>group__MatrixFunctions__Module.html</anchorfile>
      <anchor>ga2f490197e16df831683018e383e29346</anchor>
      <arglist>(const MatrixType &amp;arg, ResultType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix_sqrt_triangular</name>
      <anchorfile>group__MatrixFunctions__Module.html</anchorfile>
      <anchor>gae51c91f920f6ea4a7f6f72caa1e8249f</anchor>
      <arglist>(const MatrixType &amp;arg, ResultType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>poly_eval</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gadb64ffddaa9e83634e3ab0e3fd3664f5</anchor>
      <arglist>(const Polynomials &amp;poly, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>poly_eval_horner</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gaadbf059bc28ce1cf94c57c1454633d40</anchor>
      <arglist>(const Polynomials &amp;poly, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_polygamma_op&lt; typename DerivedX::Scalar &gt;, const DerivedN, const DerivedX &gt;</type>
      <name>polygamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a7ec2455c3a3bb4b0c1401b25a8480361</anchor>
      <arglist>(const Eigen::ArrayBase&lt; DerivedN &gt; &amp;n, const Eigen::ArrayBase&lt; DerivedX &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roots_to_monicPolynomial</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gafbc3648f7ef67db3d5d04454fc1257fd</anchor>
      <arglist>(const RootVector &amp;rv, Polynomial &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_zeta_op&lt; typename DerivedX::Scalar &gt;, const DerivedX, const DerivedQ &gt;</type>
      <name>zeta</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ade7c45ba55113cf0c89e33972f3da434</anchor>
      <arglist>(const Eigen::ArrayBase&lt; DerivedX &gt; &amp;x, const Eigen::ArrayBase&lt; DerivedQ &gt; &amp;q)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>AdolcForward_Module</name>
    <title>Adolc forward module</title>
    <filename>group__AdolcForward__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>AlignedVector3_Module</name>
    <title>Aligned vector3 module</title>
    <filename>group__AlignedVector3__Module.html</filename>
    <class kind="class">Eigen::AlignedVector3</class>
  </compound>
  <compound kind="group">
    <name>ArpackSupport_Module</name>
    <title>Arpack support module</title>
    <filename>group__ArpackSupport__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>AutoDiff_Module</name>
    <title>Auto Diff module</title>
    <filename>group__AutoDiff__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>BVH_Module</name>
    <title>BVH module</title>
    <filename>group__BVH__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>CXX11_Tensor_Module</name>
    <title>Tensor Module</title>
    <filename>group__CXX11__Tensor__Module.html</filename>
    <class kind="class">Eigen::Tensor</class>
    <class kind="class">TensorAssign</class>
    <class kind="class">Eigen::TensorBase</class>
    <class kind="class">TensorBlockShapeType</class>
    <class kind="class">TensorBroadcasting</class>
    <class kind="class">Eigen::TensorConcatenationOp</class>
    <class kind="class">TensorContraction</class>
    <class kind="class">Eigen::TensorConversionOp</class>
    <class kind="class">TensorConvolution</class>
    <class kind="class">Eigen::TensorCustomBinaryOp</class>
    <class kind="class">Eigen::TensorCustomUnaryOp</class>
    <class kind="class">Eigen::TensorDevice</class>
    <class kind="class">Eigen::TensorEvaluator</class>
    <class kind="class">TensorExecutor</class>
    <class kind="class">TensorExpr</class>
    <class kind="class">Eigen::TensorFixedSize</class>
    <class kind="class">TensorForcedEval</class>
    <class kind="class">Eigen::TensorGeneratorOp</class>
    <class kind="class">TensorImagePatch</class>
    <class kind="class">TensorIndexTuple</class>
    <class kind="class">TensorInflation</class>
    <class kind="class">TensorKChippingReshaping</class>
    <class kind="class">TensorLayoutSwap</class>
    <class kind="class">Eigen::TensorMap</class>
    <class kind="class">TensorPadding</class>
    <class kind="class">TensorPatch</class>
    <class kind="class">TensorReduction</class>
    <class kind="class">Eigen::TensorRef</class>
    <class kind="class">TensorReshaping</class>
    <class kind="class">TensorReverse</class>
    <class kind="class">TensorScan</class>
    <class kind="class">TensorShuffling</class>
    <class kind="class">TensorSlicing</class>
    <class kind="class">TensorStriding</class>
    <class kind="class">TensorTrace</class>
    <class kind="class">TensorTupleIndex</class>
    <class kind="class">TensorVolumePatch</class>
  </compound>
  <compound kind="group">
    <name>CXX11_TensorSymmetry_Module</name>
    <title>Tensor Symmetry Module</title>
    <filename>group__CXX11__TensorSymmetry__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>CXX11_ThreadPool_Module</name>
    <title>C++11 ThreadPool Module</title>
    <filename>group__CXX11__ThreadPool__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>EulerAngles_Module</name>
    <title>EulerAngles module</title>
    <filename>group__EulerAngles__Module.html</filename>
    <class kind="class">Eigen::EulerAngles</class>
    <class kind="class">Eigen::EulerSystem</class>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXYX &gt;</type>
      <name>EulerAnglesXYXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga409ece4f53f28fca09e41a705651ce48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXYX &gt;</type>
      <name>EulerAnglesXYXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga5a160649131f84254585880a440aa0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXYZ &gt;</type>
      <name>EulerAnglesXYZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga861bc3a579ec33581769d5266b6f6807</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXYZ &gt;</type>
      <name>EulerAnglesXYZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga53fe408232ad7621d6a443d76f9ac93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXZX &gt;</type>
      <name>EulerAnglesXZXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gad106302a1f6e1fcea51830f2ff42e94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXZX &gt;</type>
      <name>EulerAnglesXZXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4c6a4ad5a71566605a8794ff4c4fa5e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemXZY &gt;</type>
      <name>EulerAnglesXZYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga9d8eba2490e596e5f733c6e99f580d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemXZY &gt;</type>
      <name>EulerAnglesXZYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gae28ed3be70d16192d0933a5458802094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYXY &gt;</type>
      <name>EulerAnglesYXYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabafb17a58c430c0abc5bfa7d4925d10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYXY &gt;</type>
      <name>EulerAnglesYXYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga21b9f67580cd78643d3d08a44d8ef93c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYXZ &gt;</type>
      <name>EulerAnglesYXZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga001f9fbfc82948f04dff2790ba32dc8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYXZ &gt;</type>
      <name>EulerAnglesYXZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga6843b6cd5803f635ee866ff61a5a06ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYZX &gt;</type>
      <name>EulerAnglesYZXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga848046359634eda7cec3f57c0461460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYZX &gt;</type>
      <name>EulerAnglesYZXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gafbc20c24cc82d1450dfc1254276f4b7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemYZY &gt;</type>
      <name>EulerAnglesYZYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga48505785c62a6e33aa238da99e0d30b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemYZY &gt;</type>
      <name>EulerAnglesYZYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga04878b185127fdc80d32f7dff0ff9e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZXY &gt;</type>
      <name>EulerAnglesZXYd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4fb0d195504d934ab3244d3685ff1cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZXY &gt;</type>
      <name>EulerAnglesZXYf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga2d7e6ab44093ec3db57e3c87c55abcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZXZ &gt;</type>
      <name>EulerAnglesZXZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4102840115ae42675c083a2336eb7800</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZXZ &gt;</type>
      <name>EulerAnglesZXZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gac5971a9807d22d26a0240189ba43bdcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZYX &gt;</type>
      <name>EulerAnglesZYXd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga4afa80019cff83df31b633b35c102cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZYX &gt;</type>
      <name>EulerAnglesZYXf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga68a16f769307e750dbfac6268771f377</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; double, EulerSystemZYZ &gt;</type>
      <name>EulerAnglesZYZd</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gad5b07931b7affb1fdb8e0a55505e2de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerAngles&lt; float, EulerSystemZYZ &gt;</type>
      <name>EulerAnglesZYZf</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga8ad45f85baa68354f72ba9af68b6867a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Y, EULER_X &gt;</type>
      <name>EulerSystemXYX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gaf31ed290215ceddba27c304bb8537ed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Y, EULER_Z &gt;</type>
      <name>EulerSystemXYZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga7c4d42543380af953bfc009fa012d8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Z, EULER_X &gt;</type>
      <name>EulerSystemXZX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga0080bc8af60feb746663bd83e930b39e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_X, EULER_Z, EULER_Y &gt;</type>
      <name>EulerSystemXZY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga35f001d8aeef43d6a3d661c6e70dd762</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_X, EULER_Y &gt;</type>
      <name>EulerSystemYXY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabeaefca8d5f5f9ddeac746b3ba3945fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_X, EULER_Z &gt;</type>
      <name>EulerSystemYXZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gac043703434ad0ccdb513953b1393df8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_Z, EULER_X &gt;</type>
      <name>EulerSystemYZX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga3a02c9a9ed8ae8286b003246064e7ddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Y, EULER_Z, EULER_Y &gt;</type>
      <name>EulerSystemYZY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gada37f727fbc59ea1ec28d55e87079e6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_X, EULER_Y &gt;</type>
      <name>EulerSystemZXY</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga9918e0f6c2f203b5a38561dede6a97c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_X, EULER_Z &gt;</type>
      <name>EulerSystemZXZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gafe06260e96bfa685e738112b604cd095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_Y, EULER_X &gt;</type>
      <name>EulerSystemZYX</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gabdbee31f3c91ee6cd9b57b6866487274</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EulerSystem&lt; EULER_Z, EULER_Y, EULER_Z &gt;</type>
      <name>EulerSystemZYZ</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ga8116a4aae51fbe002bed95a001641a8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>EulerAxis</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>gae614aa7cdd687fb5c421a54f2ce5c361</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_X</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361a11e1ea88cbe04a6fc077475d515d0b38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_Y</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361aee756a2b63043248f3d83541386c266b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EULER_Z</name>
      <anchorfile>group__EulerAngles__Module.html</anchorfile>
      <anchor>ggae614aa7cdd687fb5c421a54f2ce5c361a95187b9943820cca5edc4bc96b3c08be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FFT_Module</name>
    <title>Fast Fourier Transform module</title>
    <filename>group__FFT__Module.html</filename>
    <docanchor file="group__FFT__Module" title="Design">FFTDesign</docanchor>
  </compound>
  <compound kind="group">
    <name>IterativeSolvers_Module</name>
    <title>Iterative solvers module</title>
    <filename>group__IterativeSolvers__Module.html</filename>
    <class kind="class">Eigen::IterationController</class>
    <class kind="class">Eigen::IterScaling</class>
    <member kind="function">
      <type>void</type>
      <name>constrained_cg</name>
      <anchorfile>group__IterativeSolvers__Module.html</anchorfile>
      <anchor>ga1c2f99746877fd46158af4a6b7dce2f9</anchor>
      <arglist>(const TMatrix &amp;A, const CMatrix &amp;C, VectorX &amp;x, const VectorB &amp;b, const VectorF &amp;f, IterationController &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pseudo_inverse</name>
      <anchorfile>group__IterativeSolvers__Module.html</anchorfile>
      <anchor>ga58a0ccf0e71d88beeb5dcf72ed0bdd5f</anchor>
      <arglist>(const CMatrix &amp;C, CINVMatrix &amp;CINV)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>KroneckerProduct_Module</name>
    <title>KroneckerProduct module</title>
    <filename>group__KroneckerProduct__Module.html</filename>
    <class kind="class">Eigen::KroneckerProduct</class>
    <class kind="class">Eigen::KroneckerProductBase</class>
    <class kind="class">Eigen::KroneckerProductSparse</class>
    <member kind="function">
      <type>KroneckerProduct&lt; A, B &gt;</type>
      <name>kroneckerProduct</name>
      <anchorfile>group__KroneckerProduct__Module.html</anchorfile>
      <anchor>gaa8924dffc6cee7aa1e908dc395a7a167</anchor>
      <arglist>(const MatrixBase&lt; A &gt; &amp;a, const MatrixBase&lt; B &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>KroneckerProductSparse&lt; A, B &gt;</type>
      <name>kroneckerProduct</name>
      <anchorfile>group__KroneckerProduct__Module.html</anchorfile>
      <anchor>gaca497f43cc92bcbf6eaff64984a266cc</anchor>
      <arglist>(const EigenBase&lt; A &gt; &amp;a, const EigenBase&lt; B &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LevenbergMarquardt_Module</name>
    <title>Levenberg-Marquardt module</title>
    <filename>group__LevenbergMarquardt__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>MatrixFunctions_Module</name>
    <title>Matrix functions module</title>
    <filename>group__MatrixFunctions__Module.html</filename>
    <class kind="class">Eigen::MatrixComplexPowerReturnValue</class>
    <class kind="struct">Eigen::MatrixExponentialReturnValue</class>
    <class kind="class">Eigen::MatrixFunctionReturnValue</class>
    <class kind="class">Eigen::MatrixLogarithmReturnValue</class>
    <class kind="class">Eigen::MatrixPower</class>
    <class kind="class">Eigen::MatrixPowerAtomic</class>
    <class kind="class">Eigen::MatrixPowerParenthesesReturnValue</class>
    <class kind="class">Eigen::MatrixPowerReturnValue</class>
    <class kind="class">Eigen::MatrixSquareRootReturnValue</class>
    <member kind="function">
      <type>void</type>
      <name>matrix_sqrt_quasi_triangular</name>
      <anchorfile>group__MatrixFunctions__Module.html</anchorfile>
      <anchor>ga2f490197e16df831683018e383e29346</anchor>
      <arglist>(const MatrixType &amp;arg, ResultType &amp;result)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matrix_sqrt_triangular</name>
      <anchorfile>group__MatrixFunctions__Module.html</anchorfile>
      <anchor>gae51c91f920f6ea4a7f6f72caa1e8249f</anchor>
      <arglist>(const MatrixType &amp;arg, ResultType &amp;result)</arglist>
    </member>
    <page>group__MatrixFunctions__Module</page>
  </compound>
  <compound kind="group">
    <name>MoreVectorization</name>
    <title>More vectorization module</title>
    <filename>group__MoreVectorization.html</filename>
  </compound>
  <compound kind="group">
    <name>NonLinearOptimization_Module</name>
    <title>Non linear optimization module</title>
    <filename>group__NonLinearOptimization__Module.html</filename>
    <class kind="class">Eigen::HybridNonLinearSolver</class>
    <class kind="class">Eigen::LevenbergMarquardt</class>
    <docanchor file="group__NonLinearOptimization__Module" title="Tests">Tests</docanchor>
    <docanchor file="group__NonLinearOptimization__Module" title="API: overview of methods">API</docanchor>
    <docanchor file="group__NonLinearOptimization__Module" title="Examples">examples</docanchor>
  </compound>
  <compound kind="group">
    <name>NumericalDiff_Module</name>
    <title>Numerical differentiation module</title>
    <filename>group__NumericalDiff__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>OpenGLSUpport_Module</name>
    <title>OpenGL Support module</title>
    <filename>group__OpenGLSUpport__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>Polynomials_Module</name>
    <title>Polynomials module</title>
    <filename>group__Polynomials__Module.html</filename>
    <class kind="class">Eigen::PolynomialSolver</class>
    <class kind="class">Eigen::PolynomialSolverBase</class>
    <member kind="function">
      <type>NumTraits&lt; typename Polynomial::Scalar &gt;::Real</type>
      <name>cauchy_max_bound</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>ga375e3ea1f370fb76dfe0f43a89b95926</anchor>
      <arglist>(const Polynomial &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>NumTraits&lt; typename Polynomial::Scalar &gt;::Real</type>
      <name>cauchy_min_bound</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gab076afbdba0e9298a541cc4e8cc7506b</anchor>
      <arglist>(const Polynomial &amp;poly)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>poly_eval</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gadb64ffddaa9e83634e3ab0e3fd3664f5</anchor>
      <arglist>(const Polynomials &amp;poly, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>poly_eval_horner</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gaadbf059bc28ce1cf94c57c1454633d40</anchor>
      <arglist>(const Polynomials &amp;poly, const T &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>roots_to_monicPolynomial</name>
      <anchorfile>group__Polynomials__Module.html</anchorfile>
      <anchor>gafbc3648f7ef67db3d5d04454fc1257fd</anchor>
      <arglist>(const RootVector &amp;rv, Polynomial &amp;poly)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Skyline_Module</name>
    <title>Skyline module</title>
    <filename>group__Skyline__Module.html</filename>
    <class kind="class">Eigen::SkylineInplaceLU</class>
    <class kind="class">Eigen::SkylineMatrix</class>
    <class kind="class">Eigen::SkylineMatrixBase</class>
  </compound>
  <compound kind="group">
    <name>SparseExtra_Module</name>
    <title>SparseExtra module</title>
    <filename>group__SparseExtra__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>SpecialFunctions_Module</name>
    <title>Special math functions module</title>
    <filename>group__SpecialFunctions__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>Splines_Module</name>
    <title>Spline and spline fitting module</title>
    <filename>group__Splines__Module.html</filename>
    <class kind="class">Eigen::Spline</class>
    <class kind="struct">Eigen::SplineFitting</class>
    <class kind="struct">Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, _DerivativeOrder &gt;</class>
    <class kind="struct">Eigen::SplineTraits&lt; Spline&lt; _Scalar, _Dim, _Degree &gt;, Dynamic &gt;</class>
    <member kind="function">
      <type>void</type>
      <name>ChordLengths</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>ga1b4cbde5d98411405871accf877552d2</anchor>
      <arglist>(const PointArrayType &amp;pts, KnotVectorType &amp;chord_lengths)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>KnotAveraging</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>ga9474da5ed68bbd9a6788a999330416d6</anchor>
      <arglist>(const KnotVectorType &amp;parameters, DenseIndex degree, KnotVectorType &amp;knots)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>KnotAveragingWithDerivatives</name>
      <anchorfile>group__Splines__Module.html</anchorfile>
      <anchor>gae10a6f9b6ab7fb400a2526b6382c533b</anchor>
      <arglist>(const ParameterVectorType &amp;parameters, const unsigned int degree, const IndexArray &amp;derivativeIndices, KnotVectorType &amp;knots)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>eigen_tensors</name>
    <title>Eigen Tensors</title>
    <filename>eigen_tensors</filename>
  </compound>
  <compound kind="page">
    <name>matrixbaseextra_page</name>
    <title></title>
    <filename>group__MatrixFunctions__Module</filename>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase methods defined in the MatrixFunctions module">matrixbaseextra</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::cos()">matrixbase_cos</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::cosh()">matrixbase_cosh</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::exp()">matrixbase_exp</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::log()">matrixbase_log</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::pow()">matrixbase_pow</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::matrixFunction()">matrixbase_matrixfunction</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::sin()">matrixbase_sin</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::sinh()">matrixbase_sinh</docanchor>
    <docanchor file="group__MatrixFunctions__Module" title="MatrixBase::sqrt()">matrixbase_sqrt</docanchor>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>%Eigen&apos;s unsupported modules</title>
    <filename>index</filename>
  </compound>
</tagfile>
