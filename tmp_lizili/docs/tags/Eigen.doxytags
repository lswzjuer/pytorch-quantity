<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile>
  <compound kind="class">
    <name>Eigen::aligned_allocator</name>
    <filename>classEigen_1_1aligned__allocator.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::AlignedBox</name>
    <filename>classEigen_1_1AlignedBox.html</filename>
    <templarg></templarg>
    <templarg>_AmbientDim</templarg>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a600b5a58e77104ef7281dba6dcffb808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6c39e42a5db22f2ca934f5aedcb9985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a384d9fbe2c6b6b69a8ea7c5632a61f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a8eba0291472401f9a777cf571f1b8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6740871e968264dc5a55248c7f67fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af68213ceced0d7988b2b9200225dcae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66786d5e4ba263c9725c3476fc421281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5c7a2e5d12782ebf716aff9c1866f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a352b1a4b80151a3d8d8b63cbd113e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a7cd9ba0b2da76e88e3e1b11796841383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66446e8ccb4fe84bdcebc6d3c1e52a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a96ff8acc760b61ae37f38b1f63a21306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ab174a824f21db60fcbfe0ca1136ed6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6eb2e279c813983a8bc89f62959be3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a774ef355da13d6bee6a6e7244c15231a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a600b5a58e77104ef7281dba6dcffb808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6c39e42a5db22f2ca934f5aedcb9985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a600b5a58e77104ef7281dba6dcffb808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6c39e42a5db22f2ca934f5aedcb9985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a384d9fbe2c6b6b69a8ea7c5632a61f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a8eba0291472401f9a777cf571f1b8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6740871e968264dc5a55248c7f67fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af68213ceced0d7988b2b9200225dcae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a384d9fbe2c6b6b69a8ea7c5632a61f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a8eba0291472401f9a777cf571f1b8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6740871e968264dc5a55248c7f67fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af68213ceced0d7988b2b9200225dcae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66786d5e4ba263c9725c3476fc421281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5c7a2e5d12782ebf716aff9c1866f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a352b1a4b80151a3d8d8b63cbd113e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a7cd9ba0b2da76e88e3e1b11796841383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66446e8ccb4fe84bdcebc6d3c1e52a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a96ff8acc760b61ae37f38b1f63a21306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ab174a824f21db60fcbfe0ca1136ed6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6eb2e279c813983a8bc89f62959be3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66786d5e4ba263c9725c3476fc421281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5c7a2e5d12782ebf716aff9c1866f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a352b1a4b80151a3d8d8b63cbd113e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a7cd9ba0b2da76e88e3e1b11796841383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66446e8ccb4fe84bdcebc6d3c1e52a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a96ff8acc760b61ae37f38b1f63a21306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ab174a824f21db60fcbfe0ca1136ed6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6eb2e279c813983a8bc89f62959be3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a43aba4c646424355dd39864655a3386f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ade9f3bc760956c19d9c087b3a9cd6389</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>abbda47b393f17094998da5cdcb73df28</anchor>
      <arglist>(const OtherVectorType1 &amp;_min, const OtherVectorType2 &amp;_max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a77f5058435889bf0dfe84bdbd158f10b</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a05f7ca06a060c8d4d2e910870669538c</anchor>
      <arglist>(const AlignedBox&lt; OtherScalarType, AmbientDimAtCompileTime &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AlignedBox, AlignedBox&lt; NewScalarType, AmbientDimAtCompileTime &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a5b867bc4a02f78d7feaf45eaaa6f5484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>clamp</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a683b454f1571780e8ddfc5d781949b51</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a8bfd8127621e4a19032945744adf5041</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a013a78bb0e9ac3a27dc1e604435288fb</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>corner</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a09619d632dd6979e9d09738493221d55</anchor>
      <arglist>(CornerType corner) const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a92fbafe85f1c941ed0b4c92711e8db56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a5301115f222e591b38cc1ebed36856e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const</type>
      <name>EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ab4950605c14c530c2d56c75f0e253d10</anchor>
      <arglist>(VectorTypeSum, RealScalar, quotient) center() const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ac252032292dcf60984191e4dd26f0955</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>extend</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0ca284f3375f68b9e9aef558cd5bcd37</anchor>
      <arglist>(const AlignedBox &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a3915f625f0e57029ea27ace34aff29b2</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>NonInteger</type>
      <name>exteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>afb3b43bab1d84a95e7a515ca854cda70</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ad3d947d3e32b1521bb1ccd9eab4c46cb</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>intersects</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0bdea9a9410af7ad6f63ce71a2f59443</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ad785aecce6792bd88c3a4de35d782f18</anchor>
      <arglist>(const AlignedBox &amp;other, const RealScalar &amp;prec=ScalarTraits::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a2d994551368f0d06876a31dccb26de59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a37b401dd265c942c9ef2db1e2b1e56e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a987d516532b24fcadc34d2f501579c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a0e0a35eb40a9079468f447c1bab8a400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox</type>
      <name>merged</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a59eb62d949598853fbc83836e8f2960c</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>af7fddcf06b60392f3f21b4d8e0f763a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType &amp;()</type>
      <name>min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>adad123f7e84a2437806a791b96af04bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>sample</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>adff08c9965ec5348e38b25d9bb41e9de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEmpty</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a16bc3e6779107a091f08e4cb7e36e793</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNull</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a2399d72bf7dbd9f3589c69f32cbec306</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, Scalar &gt;, const VectorType, const VectorType &gt;</type>
      <name>sizes</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a4d0f2228231a351280a1b14b1915fe7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a845dd8a069c204d15f12aa2702dd9539</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredExteriorDistance</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>aa91643da79398e454618ad06b92ff531</anchor>
      <arglist>(const AlignedBox &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>AlignedBox &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>a319e3e6338893db6986533d545a92046</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;a_t)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>volume</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae048c23dc498b5012a080737e5b1d1c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a600b5a58e77104ef7281dba6dcffb808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6c39e42a5db22f2ca934f5aedcb9985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Min</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a600b5a58e77104ef7281dba6dcffb808</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Max</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6c39e42a5db22f2ca934f5aedcb9985f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a384d9fbe2c6b6b69a8ea7c5632a61f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a8eba0291472401f9a777cf571f1b8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6740871e968264dc5a55248c7f67fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af68213ceced0d7988b2b9200225dcae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a384d9fbe2c6b6b69a8ea7c5632a61f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a8eba0291472401f9a777cf571f1b8b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeft</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6740871e968264dc5a55248c7f67fb9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRight</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378af68213ceced0d7988b2b9200225dcae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66786d5e4ba263c9725c3476fc421281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5c7a2e5d12782ebf716aff9c1866f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a352b1a4b80151a3d8d8b63cbd113e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a7cd9ba0b2da76e88e3e1b11796841383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66446e8ccb4fe84bdcebc6d3c1e52a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a96ff8acc760b61ae37f38b1f63a21306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ab174a824f21db60fcbfe0ca1136ed6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6eb2e279c813983a8bc89f62959be3bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66786d5e4ba263c9725c3476fc421281</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a5c7a2e5d12782ebf716aff9c1866f50f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a352b1a4b80151a3d8d8b63cbd113e40b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightFloor</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a7cd9ba0b2da76e88e3e1b11796841383</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a66446e8ccb4fe84bdcebc6d3c1e52a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BottomRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a96ff8acc760b61ae37f38b1f63a21306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopLeftCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378ab174a824f21db60fcbfe0ca1136ed6cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TopRightCeil</name>
      <anchorfile>classEigen_1_1AlignedBox.html</anchorfile>
      <anchor>ae4aa935b36004fffc49c7a3a85e2d378a6eb2e279c813983a8bc89f62959be3bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AMDOrdering</name>
    <filename>classEigen_1_1AMDOrdering.html</filename>
    <templarg>StorageIndex</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>afce433557abcba9e49fa81581a58fa51</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1AMDOrdering.html</anchorfile>
      <anchor>a7f3fd7224b084f0f5655c97ea8eb6466</anchor>
      <arglist>(const SparseSelfAdjointView&lt; SrcType, SrcUpLo &gt; &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::AngleAxis</name>
    <filename>classEigen_1_1AngleAxis.html</filename>
    <templarg></templarg>
    <base>RotationBase&lt; AngleAxis&lt; _Scalar &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>acd9b10692d7d726b28670e4d3a282fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a5c9671c47a3b26c2b585042f42426d7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a5bcd8f21aa18b629e2b5c64d03caeb96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a08752eea5e7762f2585fbd8136dc7b4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ab58bae23f0af86d66d8aa1dc5c1dbe39</anchor>
      <arglist>(const Scalar &amp;angle, const MatrixBase&lt; Derived &gt; &amp;axis)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>af3476809863b6a0dfe17f49a3dcc6530</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a2e6eee34f611e4c762fdd4e4bc5935e6</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AngleAxis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a7c6bdf26fc162c6423d7cff097a9a00e</anchor>
      <arglist>(const AngleAxis&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Vector3 &amp;</type>
      <name>axis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aeb281dd2ac2332c876da30ee708f15fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Vector3 &amp;</type>
      <name>axis</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a6fe6a68ebe395dd43953592813cdeee5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; AngleAxis, AngleAxis&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a566d3231bd0e209469ab8ee37aada6a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a2e35689645f69ba886df1a0a14b76ffe</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>af01cf54d9e86fe12b41a4b7f70d06c2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ac0f2fe0856dedd6f46891a70ec9f402d</anchor>
      <arglist>(const AngleAxis &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ac85e2b87e05a9f7e5113f9a9a657fb4c</anchor>
      <arglist>(const AngleAxis &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>QuaternionType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ac869c831ffb3457f7a7d1c215d2f94f2</anchor>
      <arglist>(const QuaternionType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>aa79ba9655d1b8fe12d75082902cea88b</anchor>
      <arglist>(const QuaternionBase&lt; QuatDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; Scalar &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a61747e22cfd8bd36456de2deed877fca</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>ad333c1b13aa0fa01d7fab30f18d2cd46</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="friend">
      <type>friend QuaternionType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1AngleAxis.html</anchorfile>
      <anchor>a904a7e5cddeab4ee1e22f2beb8a1f7c1</anchor>
      <arglist>(const QuaternionType &amp;a, const AngleAxis &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArithmeticSequence</name>
    <filename>classEigen_1_1ArithmeticSequence.html</filename>
    <templarg>FirstType</templarg>
    <templarg>SizeType</templarg>
    <templarg>IncrType</templarg>
    <member kind="function">
      <type>Index</type>
      <name>first</name>
      <anchorfile>classEigen_1_1ArithmeticSequence.html</anchorfile>
      <anchor>a780ee27a63b77d4f34f74d8ca2381d12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1ArithmeticSequence.html</anchorfile>
      <anchor>a34a4117a3590ccc99177449f8c47740e</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1ArithmeticSequence.html</anchorfile>
      <anchor>aef60a3585c1551c77e6dbf568b06c485</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Array</name>
    <filename>classEigen_1_1Array.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, DPARM_SIZE, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, UMFPACK_CONTROL, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; double, UMFPACK_INFO, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; Index, 1, Dynamic &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; int, IPARM_SIZE, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; RealScalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; StorageIndex, 2, 1 &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Array&lt; StorageIndex, 64, 1, DontAlign &gt;</name>
    <filename>classEigen_1_1Array.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ad9f6f2c9890092e12fd3344aa6ffcbd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a2c3f6165e88d157195d87c9bc44d9fc0</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a0b8a25eb8bde16732c95eaad8a8a8b85</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a60196d3a62e1d19746e011dd1cefdfc5</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a473a6a8fdd69a31312efaf6bdb3fc546</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a3b781cdd2aa6fa9421047e6bc29d1bf6</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ae20df0e99b3a2bcf35f6cf83755a1f80</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a00db21a7dd3a6e4df632913204742466</anchor>
      <arglist>(const Scalar &amp;val0, const Scalar &amp;val1, const Scalar &amp;val2, const Scalar &amp;val3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>aa1ef64a2517d538e03b71584369e14bb</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Array</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a295b8d13170c4512480bc74ef9de4299</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other, typename internal::enable_if&lt; internal::is_convertible&lt; typename OtherDerived::Scalar, Scalar &gt;::value, PrivateType &gt;::type=PrivateType())</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a7f91aee7fcdc00e617525189144e94cd</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>ac32b3b262f92f135766a1b5cf4522b75</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a4bda8f55edb3cb293c6ef3078362455b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Array.html</anchorfile>
      <anchor>a86cb29d966d548242de713c59e9c9582</anchor>
      <arglist>(const Array &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayBase</name>
    <filename>classEigen_1_1ArrayBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AbsReturnType</type>
      <name>abs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a86c66d70354eb6b0d098e75c99f5aede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Abs2ReturnType</type>
      <name>abs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a023e3c31a4810d3912528048c91d7a4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AcosReturnType</type>
      <name>acos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a371354b58288c20b3c2ecf76550924a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ArgReturnType</type>
      <name>arg</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0ecf327d063adcac1e9b6bda145920bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AsinReturnType</type>
      <name>asin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5a74e1968834d8c58621d448bcaa0e9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AtanReturnType</type>
      <name>atan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a51cd34c4850041ddd72fefb1420ae47d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad7769fab2e8b5dd35c40d9394db09d5c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CeilReturnType</type>
      <name>ceil</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac59f067b13a0d3c340d70f72ad93b403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CosReturnType</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a02c07fce456a1a6ec9510ca8b0934911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoshReturnType</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3f34a09fc1a72fd2dc6b5fafb857fcb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CubeReturnType</type>
      <name>cube</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9c51fddee43c97c2866f3ebef2777f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a2c0852f002c2753e15a560faa809f669</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9404f0dfe9893a694a254c44b279dbdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8a0e51e08e321933b725b1ba07c8b568</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab1649a24d7f548548170a181e7719649</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5c2d62bd0af0ff8b840ddbfe55d037b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aca8450443d8227d701587f5e95467846</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a81031fa2ce994339135d8b176965859d</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac9768f94b682a357f330d99aaeeb6fde</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad3c3edc4cb180361283d25d6f824657a</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0366d9294835e26186f5b7e17837161b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Derived ::Scalar, OtherDerived ::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abeb9d8f32bdec135c23519479c67b1cc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7ba8a1fadeb44b94d259dfe1818169b7</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adbadc43c5781488b596f2cbbe76e5ad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5f121588f7d15e1d5edae469e52956ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DigammaReturnType</type>
      <name>digamma</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aaf0baf4f49ed5d0c34c93b51f5b52405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ErfReturnType</type>
      <name>erf</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa66c066b3ae58005ede6df1008cbdb63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ErfcReturnType</type>
      <name>erfc</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a61cd99ac8047071026baaa370ef8dff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ExpReturnType</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a555df413a093a7dea1bf59253189c815</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Expm1ReturnType</type>
      <name>expm1</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5b3a8efed7e0a163b414c2b57b399cb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FloorReturnType</type>
      <name>floor</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a34b65b383ea92ed2a192189b1c459f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7da82f3eb206b756cf88248229699c6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsFiniteReturnType</type>
      <name>isFinite</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5c5a7423b3f37674b84c8225ea07b8f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsInfReturnType</type>
      <name>isInf</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5d2d81378f75f812b30090c14015cec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsNaNReturnType</type>
      <name>isNaN</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aab10b156cb69206461728782dd01c37a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LgammaReturnType</type>
      <name>lgamma</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8d895befac096a4063931df916d24b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LogReturnType</type>
      <name>log</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49537efa216ab4e72f7493149d4057b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Log10ReturnType</type>
      <name>log10</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3aee49623b05271ed8c1f0218094de3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Log1pReturnType</type>
      <name>log1p</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>add72fa61c1dd79e39a4a7e8c2efb9c9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LogisticReturnType</type>
      <name>logistic</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad2002651e95e488dd95dcbb4cf51b459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; Derived &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af01e9ea8087e390af8af453bbe4c276c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; max&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a048b7ba4cc5bd40d5170de52adf96d23</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a55effac7bb6c036fd77595f37f19aeaa</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; min&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a106abbfa113a75694e1f4d769cae4553</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a68f56367b22f5f292b3bbf9b3588c491</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Derived, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae9fdcc707ea715e536a275433f523a73</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Derived ::Scalar, OtherDerived ::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab1c3d5b5b3fb3673fd77d356c7c02fb6</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6d501c981ba22cb1e904c7afc77695e7</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a993c3a469dbadbccad5c8e128940ce6e</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const BooleanNotReturnType</type>
      <name>operator!</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a982684b90fd894b31b3a6722a5d994a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8b64dbaac49dbddad0486f468e280955</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a95ed0a77dd9aa39c9313e311872cc219</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9cc9fdb4d0d6eb80a45107b86aacbfed</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab2f0dd7ee68fe18db448fb0e130ea177</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a494dfcf3960741f2665b4a7715112a93</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aac76a5e5e735b97f955189825cef7e2c</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a73a03adbe26a4c53aa30f3a093244bb7</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a82983eb19ffee1afd0a241dfcfab8351</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1717e11dfe9341e9cfba13140cedddce</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8587d8d893f5225a4511e9d76d9fe3cc</anchor>
      <arglist>(const ArrayBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a80cacb05b6881fba659efb2377e4fd22</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_xor_op, const Derived, const OtherDerived &gt;</type>
      <name>operator^</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0fe919d353ea7db651ae187d7b4b82d1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Derived, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a13db4ad1f536334ca5e3a03eb2e565cc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; pow&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9b2dc1fc2bd04821c160e0f3ab6bc9f5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0835cd3955b1ec526ade33a0a46d368c</anchor>
      <arglist>(const T &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>const RoundReturnType</type>
      <name>round</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7c7a4b876ccf13f1c6239ac22b64f15a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RsqrtReturnType</type>
      <name>rsqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a96b3bacc3c69889d643029731a80bd74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SignReturnType</type>
      <name>sign</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49913414190b9be411622256eb7d249a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SinReturnType</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae865fde726793307cf91245393e6c79d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SinhReturnType</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a343f3b40026376ce47c171d140570a78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SqrtReturnType</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adbe7fe792be28d5293ae6a586b36c028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SquareReturnType</type>
      <name>square</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4fe59f7f07a8b445e47b0a6d9f1c15a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TanReturnType</type>
      <name>tan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af8432af9625900e18b0039fb9c6f274f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TanhReturnType</type>
      <name>tanh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3942095ad9a78534b6861b3818ac680b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_zeta_op&lt; Scalar &gt;, const Derived, const DerivedQ &gt;</type>
      <name>zeta</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a85d936801f9ee45e593cc300fcb69876</anchor>
      <arglist>(const Eigen::ArrayBase&lt; DerivedQ &gt; &amp;q) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad8d2a269c57eeddf172d95a7a3855766</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a89a54787e069bfc1e44823d39a2c3ee4</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a655d0b3986d9e610466703c00a05bd2a</anchor>
      <arglist>(const T &amp;s, const StorageBaseType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Derived::Scalar, ScalarExponent &gt;, Derived, Constant&lt; ScalarExponent &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5df3d99d47747b72d61f235c9fb925e3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x, const ScalarExponent &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_pow_op&lt; typename Derived::Scalar, typename ExponentDerived::Scalar &gt;, const Derived, const ExponentDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb769e1ab1d809abb77c7ab98021ad81</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;exponents)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, Derived::Scalar &gt;, Constant&lt; Scalar &gt;, Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb7a6224d50620991d1fb9888b8be6e6</anchor>
      <arglist>(const Scalar &amp;x, const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</name>
    <filename>classEigen_1_1ArrayBase.html</filename>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AbsReturnType</type>
      <name>abs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a86c66d70354eb6b0d098e75c99f5aede</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Abs2ReturnType</type>
      <name>abs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a023e3c31a4810d3912528048c91d7a4d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AcosReturnType</type>
      <name>acos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a371354b58288c20b3c2ecf76550924a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ArgReturnType</type>
      <name>arg</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0ecf327d063adcac1e9b6bda145920bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AsinReturnType</type>
      <name>asin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5a74e1968834d8c58621d448bcaa0e9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AtanReturnType</type>
      <name>atan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a51cd34c4850041ddd72fefb1420ae47d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad7769fab2e8b5dd35c40d9394db09d5c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CeilReturnType</type>
      <name>ceil</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac59f067b13a0d3c340d70f72ad93b403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CosReturnType</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a02c07fce456a1a6ec9510ca8b0934911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoshReturnType</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3f34a09fc1a72fd2dc6b5fafb857fcb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CubeReturnType</type>
      <name>cube</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9c51fddee43c97c2866f3ebef2777f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a2c0852f002c2753e15a560faa809f669</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9404f0dfe9893a694a254c44b279dbdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8a0e51e08e321933b725b1ba07c8b568</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab1649a24d7f548548170a181e7719649</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5c2d62bd0af0ff8b840ddbfe55d037b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aca8450443d8227d701587f5e95467846</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a81031fa2ce994339135d8b176965859d</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ac9768f94b682a357f330d99aaeeb6fde</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad3c3edc4cb180361283d25d6f824657a</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0366d9294835e26186f5b7e17837161b</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; ArrayWrapper&lt; ExpressionType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>abeb9d8f32bdec135c23519479c67b1cc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7ba8a1fadeb44b94d259dfe1818169b7</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adbadc43c5781488b596f2cbbe76e5ad4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5f121588f7d15e1d5edae469e52956ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DigammaReturnType</type>
      <name>digamma</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aaf0baf4f49ed5d0c34c93b51f5b52405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ErfReturnType</type>
      <name>erf</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aa66c066b3ae58005ede6df1008cbdb63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ErfcReturnType</type>
      <name>erfc</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a61cd99ac8047071026baaa370ef8dff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ExpReturnType</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a555df413a093a7dea1bf59253189c815</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Expm1ReturnType</type>
      <name>expm1</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5b3a8efed7e0a163b414c2b57b399cb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FloorReturnType</type>
      <name>floor</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a34b65b383ea92ed2a192189b1c459f76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7da82f3eb206b756cf88248229699c6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsFiniteReturnType</type>
      <name>isFinite</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5c5a7423b3f37674b84c8225ea07b8f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsInfReturnType</type>
      <name>isInf</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5d2d81378f75f812b30090c14015cec4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IsNaNReturnType</type>
      <name>isNaN</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aab10b156cb69206461728782dd01c37a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LgammaReturnType</type>
      <name>lgamma</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8d895befac096a4063931df916d24b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LogReturnType</type>
      <name>log</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49537efa216ab4e72f7493149d4057b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Log10ReturnType</type>
      <name>log10</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3aee49623b05271ed8c1f0218094de3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Log1pReturnType</type>
      <name>log1p</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>add72fa61c1dd79e39a4a7e8c2efb9c9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LogisticReturnType</type>
      <name>logistic</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad2002651e95e488dd95dcbb4cf51b459</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af01e9ea8087e390af8af453bbe4c276c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; max&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a048b7ba4cc5bd40d5170de52adf96d23</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>max</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a55effac7bb6c036fd77595f37f19aeaa</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; min&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a106abbfa113a75694e1f4d769cae4553</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const CwiseNullaryOp&lt; internal::scalar_constant_op&lt; Scalar &gt;, PlainObject &gt; &gt;</type>
      <name>min</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a68f56367b22f5f292b3bbf9b3588c491</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae9fdcc707ea715e536a275433f523a73</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; ArrayWrapper&lt; ExpressionType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab1c3d5b5b3fb3673fd77d356c7c02fb6</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a6d501c981ba22cb1e904c7afc77695e7</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a993c3a469dbadbccad5c8e128940ce6e</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const BooleanNotReturnType</type>
      <name>operator!</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a982684b90fd894b31b3a6722a5d994a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8b64dbaac49dbddad0486f468e280955</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, T &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a95ed0a77dd9aa39c9313e311872cc219</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9cc9fdb4d0d6eb80a45107b86aacbfed</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ab2f0dd7ee68fe18db448fb0e130ea177</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, T &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a494dfcf3960741f2665b4a7715112a93</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>aac76a5e5e735b97f955189825cef7e2c</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a73a03adbe26a4c53aa30f3a093244bb7</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a82983eb19ffee1afd0a241dfcfab8351</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a1717e11dfe9341e9cfba13140cedddce</anchor>
      <arglist>(const ArrayBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a8587d8d893f5225a4511e9d76d9fe3cc</anchor>
      <arglist>(const ArrayBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a80cacb05b6881fba659efb2377e4fd22</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_xor_op, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator^</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0fe919d353ea7db651ae187d7b4b82d1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a13db4ad1f536334ca5e3a03eb2e565cc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; pow&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a9b2dc1fc2bd04821c160e0f3ab6bc9f5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, T &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a0835cd3955b1ec526ade33a0a46d368c</anchor>
      <arglist>(const T &amp;exponent) const</arglist>
    </member>
    <member kind="function">
      <type>const RoundReturnType</type>
      <name>round</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a7c7a4b876ccf13f1c6239ac22b64f15a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RsqrtReturnType</type>
      <name>rsqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a96b3bacc3c69889d643029731a80bd74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SignReturnType</type>
      <name>sign</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a49913414190b9be411622256eb7d249a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SinReturnType</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ae865fde726793307cf91245393e6c79d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SinhReturnType</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a343f3b40026376ce47c171d140570a78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SqrtReturnType</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>adbe7fe792be28d5293ae6a586b36c028</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SquareReturnType</type>
      <name>square</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a4fe59f7f07a8b445e47b0a6d9f1c15a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TanReturnType</type>
      <name>tan</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>af8432af9625900e18b0039fb9c6f274f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TanhReturnType</type>
      <name>tanh</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a3942095ad9a78534b6861b3818ac680b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_zeta_op&lt; Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const DerivedQ &gt;</type>
      <name>zeta</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a85d936801f9ee45e593cc300fcb69876</anchor>
      <arglist>(const Eigen::ArrayBase&lt; DerivedQ &gt; &amp;q) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_sum_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>ad8d2a269c57eeddf172d95a7a3855766</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_difference_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a89a54787e069bfc1e44823d39a2c3ee4</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a655d0b3986d9e610466703c00a05bd2a</anchor>
      <arglist>(const T &amp;s, const StorageBaseType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; ArrayWrapper&lt; ExpressionType &gt; ::Scalar, ScalarExponent &gt;, ArrayWrapper&lt; ExpressionType &gt;, Constant&lt; ScalarExponent &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>a5df3d99d47747b72d61f235c9fb925e3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x, const ScalarExponent &amp;exponent)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseBinaryOp&lt; Eigen::internal::scalar_pow_op&lt; typename ArrayWrapper&lt; ExpressionType &gt; ::Scalar, typename ExponentDerived::Scalar &gt;, const ArrayWrapper&lt; ExpressionType &gt;, const ExponentDerived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb769e1ab1d809abb77c7ab98021ad81</anchor>
      <arglist>(const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x, const Eigen::ArrayBase&lt; ExponentDerived &gt; &amp;exponents)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_pow_op&lt; Scalar, ArrayWrapper&lt; ExpressionType &gt; ::Scalar &gt;, Constant&lt; Scalar &gt;, ArrayWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1ArrayBase.html</anchorfile>
      <anchor>acb7a6224d50620991d1fb9888b8be6e6</anchor>
      <arglist>(const Scalar &amp;x, const Eigen::ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ArrayWrapper</name>
    <filename>classEigen_1_1ArrayWrapper.html</filename>
    <templarg></templarg>
    <base>ArrayBase&lt; ArrayWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>a1dff702690e4d5795b3d08c5c6c1d082</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1ArrayWrapper.html</anchorfile>
      <anchor>a1c5e643b7dc161066754e0812d57c4f1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::ArrayXpr</name>
    <filename>structEigen_1_1ArrayXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::symbolic::BaseExpr</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseExpr&lt; AddExpr&lt; Arg0, Arg1 &gt; &gt;</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseExpr&lt; NegateExpr&lt; Arg0 &gt; &gt;</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseExpr&lt; ProductExpr&lt; Arg0, Arg1 &gt; &gt;</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseExpr&lt; QuotientExpr&lt; Arg0, Arg1 &gt; &gt;</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseExpr&lt; SymbolExpr&lt; tag &gt; &gt;</name>
    <filename>classEigen_1_1symbolic_1_1BaseExpr.html</filename>
    <member kind="function">
      <type>Index</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1symbolic_1_1BaseExpr.html</anchorfile>
      <anchor>a4149f50157823063e59c18ce04ed2496</anchor>
      <arglist>(const T &amp;values) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BDCSVD</name>
    <filename>classEigen_1_1BDCSVD.html</filename>
    <templarg>_MatrixType</templarg>
    <base>SVDBase&lt; BDCSVD&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a39514816d38f9c418cf3f3514b511c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a3e1fa48b3d042b7daf7392724a68bb60</anchor>
      <arglist>(Index rows, Index cols, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDCSVD</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a302746d9c534cd513c1df87c7ae4850d</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a52e3c627775010775c64d16a00cdb770</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>acf27f41ed044d74ea8e8cbaf17ffdb04</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1BDCSVD.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::BiCGSTAB</name>
    <filename>classEigen_1_1BiCGSTAB.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_Preconditioner</templarg>
    <base>IterativeSolverBase&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>ae1a0df6ef6e947256c3cb83ce7df7eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BiCGSTAB</name>
      <anchorfile>classEigen_1_1BiCGSTAB.html</anchorfile>
      <anchor>a5842afd9566e254bc727de1fd7f46362</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Block</name>
    <filename>classEigen_1_1Block.html</filename>
    <templarg>XprType</templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>aebf8889be487c3fd556ffc32ba97cb0a</anchor>
      <arglist>(XprType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a66685b5f860015fd2e752489213dc0a9</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Block</name>
      <anchorfile>classEigen_1_1Block.html</anchorfile>
      <anchor>a7203a3c88122d60221c3730517fff607</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Block&lt; VectorType, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit ? 1 :Size, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit ? Size :1 &gt;</name>
    <filename>classEigen_1_1Block.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::BlockImpl&lt; XprType, BlockRows, BlockCols, InnerPanel, Sparse &gt;</name>
    <filename>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</filename>
    <templarg></templarg>
    <templarg>BlockRows</templarg>
    <templarg>BlockCols</templarg>
    <templarg>InnerPanel</templarg>
    <base>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>aa724feeda73e4d5d2330c6dced2d18f9</anchor>
      <arglist>(XprType &amp;xpr, Index i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockImpl</name>
      <anchorfile>classEigen_1_1BlockImpl_3_01XprType_00_01BlockRows_00_01BlockCols_00_01InnerPanel_00_01Sparse_01_4.html</anchorfile>
      <anchor>a2fe461bd49f27e586b7d0e652e370644</anchor>
      <arglist>(XprType &amp;xpr, Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodBase</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <templarg>Derived</templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, _UpLo, CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CholmodBase&lt; _MatrixType, _UpLo, CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1CholmodBase.html</filename>
    <base>SparseSolverBase&lt; CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5ac967e9f4ccfc43ca9e610b89232c24</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_common &amp;</type>
      <name>cholmod</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a6a85bf52d6aa480240a64f277d7f96c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>abaf5be01b1e3035a4de0b19f5b63549e</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ab4ffb4a9735ad7e81a01d5789ce96547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a5bd9c9ec4d1c15f202a6c66b5e9ef37b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>ada4cc43c64767d186fcb8997440cc753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logDeterminant</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a597f7839a39604af18a8741a0d8c46bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1CholmodBase.html</anchorfile>
      <anchor>a886fc102723ca7bde4ac7162dfd72f5d</anchor>
      <arglist>(const RealScalar &amp;offset)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodDecomposition</name>
    <filename>classEigen_1_1CholmodDecomposition.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLDLT</name>
    <filename>classEigen_1_1CholmodSimplicialLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSimplicialLLT</name>
    <filename>classEigen_1_1CholmodSimplicialLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::CholmodSupernodalLLT</name>
    <filename>classEigen_1_1CholmodSupernodalLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <base>CholmodBase&lt; _MatrixType, _UpLo, CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::COLAMDOrdering</name>
    <filename>classEigen_1_1COLAMDOrdering.html</filename>
    <templarg>StorageIndex</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1COLAMDOrdering.html</anchorfile>
      <anchor>a708cb20191dcd79856d922f262405946</anchor>
      <arglist>(const MatrixType &amp;mat, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ColPivHouseholderQR</name>
    <filename>classEigen_1_1ColPivHouseholderQR.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ac87c3bf42098d6f7324dafbc50fa83f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9d8a92c2a2f0debe5454812372237ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5965d4fdebc04b2df71d67ff0b2d0c2c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a1aa6a5b95380df0ceb224cb833316d4f</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a65782010a93a4c9ef4a9191ac8fe30bc</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ab6ad43e6a6fb75726eae0d5499948f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a608016776319abe8fe96b85f83c8dd3d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a7c9294565d179226133770160b827be1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ac5943d19aa5fd96340c7df6874fcb1b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a28ab9d8916ca609c5469c4c192fbfa28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5c756a789175197cab3eff3a3e479ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; ColPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a31c45402e74774d9cd13af0e57a6b72f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a0031998053c9c7345c9458f7443aa263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a945720f8d683f8ebe97fa807edd3142a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a87a7d06e0b0479e5b56b19c2a4f56365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>afdc29438a335871f67449c253369ce12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aa572ac050c8d4fadd4f08a87f6b1e62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a44c534d47bde6b67ce4b5247d142ef30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aac8c43d720170980f582d01494df9e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a796610bab81f0527aa1ae440c71f58a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a2a59aaa689613ce5ef0c9130ad33940e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ae712cdc9f0e521cfc8061bee58ff55ee</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a648df14c457ceceb09d933d06d3bdded</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; ColPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aaa9c4af89930ab3bb7612ed9ae33d3f5</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a72276adb1aa11f870f50d0bd58af014d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ColPivHouseholderQR&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1ColPivHouseholderQR.html</filename>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ac87c3bf42098d6f7324dafbc50fa83f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a9d8a92c2a2f0debe5454812372237ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5965d4fdebc04b2df71d67ff0b2d0c2c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a1aa6a5b95380df0ceb224cb833316d4f</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ColPivHouseholderQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a65782010a93a4c9ef4a9191ac8fe30bc</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ab6ad43e6a6fb75726eae0d5499948f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a608016776319abe8fe96b85f83c8dd3d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a7c9294565d179226133770160b827be1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ac5943d19aa5fd96340c7df6874fcb1b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a28ab9d8916ca609c5469c4c192fbfa28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a5c756a789175197cab3eff3a3e479ef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; ColPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a31c45402e74774d9cd13af0e57a6b72f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a0031998053c9c7345c9458f7443aa263</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a945720f8d683f8ebe97fa807edd3142a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a87a7d06e0b0479e5b56b19c2a4f56365</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>afdc29438a335871f67449c253369ce12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aa572ac050c8d4fadd4f08a87f6b1e62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a44c534d47bde6b67ce4b5247d142ef30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aac8c43d720170980f582d01494df9e8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a796610bab81f0527aa1ae440c71f58a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a2a59aaa689613ce5ef0c9130ad33940e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>ae712cdc9f0e521cfc8061bee58ff55ee</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>ColPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a648df14c457ceceb09d933d06d3bdded</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; ColPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>aaa9c4af89930ab3bb7612ed9ae33d3f5</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1ColPivHouseholderQR.html</anchorfile>
      <anchor>a72276adb1aa11f870f50d0bd58af014d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CommaInitializer</name>
    <filename>structEigen_1_1CommaInitializer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>XprType &amp;</type>
      <name>finished</name>
      <anchorfile>structEigen_1_1CommaInitializer.html</anchorfile>
      <anchor>a3cf9e2b8a227940f50103130b2d2859a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CompleteOrthogonalDecomposition</name>
    <filename>classEigen_1_1CompleteOrthogonalDecomposition.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ac040c34ce3fb2b68d3f57adc0c29d526</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a601c67a4a0bbe9c7b25b885279db9ff2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a7ba33814fd3fdc62f6179cdcd655c679</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>aa6c282dd7452ebe754024edb71bebd09</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>afcfaf7a395f853247c23bb52b1ffb1cc</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompleteOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a082295ba2aac35a8b8b9e2d46e1d7ce4</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>aca2b59560c4851b7d7701872990a3426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ad25a868ecd499d6dda0119e4d3659504</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ac95b93ddad59c6e57d06fcd4737b27e1</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a1f5c45f78848cfdbb96963cefbbb3274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a2740067b81ec3e0ad20a2bea9a5a475f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a7c4f24f868295349a3bb99e5f217b069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a53dd287d3e1bbc548595d63880fd51bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ad59d6dc78dab52a0038ac372b4a72c0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQTZ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ad89e2529fc1a8721239d9b6be9613a69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a806213f5c96ff765265f47067229586d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a4cd178f13aefe5189d4beeb3eb1c5897</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a5b712a58c13b7e5089be9228ec42f738</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>af9d7a5bdbc16a4a0bf7394ef0dd208da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; CompleteOrthogonalDecomposition &gt;</type>
      <name>pseudoInverse</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a3c89639299720ce089435d26d6822d6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>af348f64b26f8467a020062c22b748806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CompleteOrthogonalDecomposition &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>aa9c9f7cbde9d58ca5552381b70ad8d82</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>CompleteOrthogonalDecomposition &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a27c8da71874be7a64d6723bd0cae9f4f</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CompleteOrthogonalDecomposition, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>ab303e177cc7df17e435c79dca9ef5654</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a3909f07268496c0f08f1b57331d91075</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>zCoeffs</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a0b28c24992d313d4b04d109dcc7e5220</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyZAdjointOnTheLeftInPlace</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>a0a89641e0b4ea92c515405f2a31e6abe</anchor>
      <arglist>(Rhs &amp;rhs) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeInPlace</name>
      <anchorfile>classEigen_1_1CompleteOrthogonalDecomposition.html</anchorfile>
      <anchor>adb0b963d7d8f96492904e8eda03efbf5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexEigenSolver</name>
    <filename>classEigen_1_1ComplexEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3604c99a69fac3bee42c88cb2b589143</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;(~RowMajor), MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad3a663b1ff5200a098dabbbf9b7162b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a67cd4d20590abfd86b2639c4c8ea3dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>abc0218d8b902af0d6c759bfc0a8a8d74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad61f6278843a601096276c9a72c0252f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a61035d40c9498bb1d47628cdd4946785</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3322a21574c61eefd450c003515ad802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a86751f64ebcd5c554551fb5eaaa02db7</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexEigenSolver</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a748de5c1e7f730e16421e6d451437600</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>aeb7e38c6db5369f5c974f3786e94c1f0</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a10c25c7620e7faedcd39991cce3a757b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EigenvectorType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a3aa5e27800349990778da8fa532c1270</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>aeec4754e32bf2d1c650bf3aed110c3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>ad4d9d8b90145900b9686d2dabbe46730</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexEigenSolver.html</anchorfile>
      <anchor>a0c5a974da17774d75be41e351e6bda62</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ComplexSchur</name>
    <filename>classEigen_1_1ComplexSchur.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>ComplexMatrixType</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>af61fe57877d51cfb50178f78534042f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ae1a4713b53f821867fbad617e426832a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a652104d13723a5b1db2937866a034557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9a8ee9df37ee1f90d0e53103c58683c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad707d9978dc36b3b15e460c2a83f4093</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9c92c6e4c33890d2d063c5c8dd22777d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a3543d2c286563108cd9ace672bbb1c09</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a05dfbf329047aba756a844f8fe2de314</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a2fc0b7bc409a49e7cdb7b6edcfff26eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a8c5ee15fecfd126fc362c3f2fd28f51e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>add3ab5ed83f7f2f06b79fa910a2d5684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>afed8177cf9836f032d42bdb6c6bc6e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a6ca227fbd5387f3a625351354b8eec44</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad37ef6058ce690a1fac4cc524b70cbf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ComplexSchur&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1ComplexSchur.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>ComplexMatrixType</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>af61fe57877d51cfb50178f78534042f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ae1a4713b53f821867fbad617e426832a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a652104d13723a5b1db2937866a034557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9a8ee9df37ee1f90d0e53103c58683c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad707d9978dc36b3b15e460c2a83f4093</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComplexSchur</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a9c92c6e4c33890d2d063c5c8dd22777d</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a3543d2c286563108cd9ace672bbb1c09</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a05dfbf329047aba756a844f8fe2de314</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a2fc0b7bc409a49e7cdb7b6edcfff26eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a8c5ee15fecfd126fc362c3f2fd28f51e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>add3ab5ed83f7f2f06b79fa910a2d5684</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ComplexMatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>afed8177cf9836f032d42bdb6c6bc6e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComplexSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>a6ca227fbd5387f3a625351354b8eec44</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1ComplexSchur.html</anchorfile>
      <anchor>ad37ef6058ce690a1fac4cc524b70cbf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ConjugateGradient</name>
    <filename>classEigen_1_1ConjugateGradient.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <templarg>_Preconditioner</templarg>
    <base>IterativeSolverBase&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>a92a9656ca9fa4da240194f89229255eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConjugateGradient</name>
      <anchorfile>classEigen_1_1ConjugateGradient.html</anchorfile>
      <anchor>ac10f778fcd137eca1f6057c8ddd3d644</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseBinaryOp</name>
    <filename>classEigen_1_1CwiseBinaryOp.html</filename>
    <templarg>BinaryOp</templarg>
    <templarg>LhsType</templarg>
    <templarg>RhsType</templarg>
    <member kind="function">
      <type>const BinaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>adfb40100689f5e13be1786db5d7fecbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _LhsNested &amp;</type>
      <name>lhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>a33b8ee8eda1d963591b80ec07525f918</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _RhsNested &amp;</type>
      <name>rhs</name>
      <anchorfile>classEigen_1_1CwiseBinaryOp.html</anchorfile>
      <anchor>ae508116a8a328c0ca01df38cb4819663</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseNullaryOp</name>
    <filename>classEigen_1_1CwiseNullaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const NullaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseNullaryOp.html</anchorfile>
      <anchor>afef9c2479e357786e4c92da1aa625248</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseTernaryOp</name>
    <filename>classEigen_1_1CwiseTernaryOp.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const _Arg1Nested &amp;</type>
      <name>arg1</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a776de41baf8921bcdba24ec2166f0a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _Arg2Nested &amp;</type>
      <name>arg2</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>afebd6d4ed4101bcbb34c36f99ff27fda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const _Arg3Nested &amp;</type>
      <name>arg3</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a07e6cc21d253ae0bd68913fb65aa8151</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const TernaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseTernaryOp.html</anchorfile>
      <anchor>a9009f896ee1103c8f28a748e59f12b9a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryOp</name>
    <filename>classEigen_1_1CwiseUnaryOp.html</filename>
    <templarg>UnaryOp</templarg>
    <templarg>XprType</templarg>
    <member kind="function">
      <type>const UnaryOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>aa70041dd94ec46f330cf19a06425d172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; XprTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a89589b919998657056de6378dd7dedc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_all&lt; XprTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryOp.html</anchorfile>
      <anchor>a073345b7e19f058c1890f8538e0cfd96</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::CwiseUnaryView</name>
    <filename>classEigen_1_1CwiseUnaryView.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const ViewOp &amp;</type>
      <name>functor</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>af01271cdadcbcf195b5d3130ff2e1a48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>a21d59e387e600b1d650cb002175760b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_reference&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1CwiseUnaryView.html</anchorfile>
      <anchor>add6689b53e595e968e89592ea30b6800</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::Dense</name>
    <filename>structEigen_1_1Dense.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher_3_01Array_3_01__Scalar_00_01__Rows_00_01_9f66d076f8f04907f9f0093247d3c377.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>Eigen::ArrayBase</base>
  </compound>
  <compound kind="struct">
    <name>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>structEigen_1_1doxygen_1_1dense__xpr__base__dispatcher_3_01Matrix_3_01__Scalar_00_01__Rows_00_0116fa1ae814876cf66b62915b437740e6.html</filename>
    <templarg></templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>Eigen::MatrixBase</base>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseBase</name>
    <filename>classEigen_1_1DenseBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eeadb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eead2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eeacc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea4d4548a01ba37a6c2031a3c1f0a37d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea787f85fd67ee5985917eb2cef6e70441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>random_access_iterator_type</type>
      <name>const_iterator</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a306d9418d4b34874e9005d961c490cd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea7392c9b2ad41ba3c16fdc5306c04d581</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsRowMajor</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea406b6af91d61d348ba1c9764bdd66008</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea1156955c8099c5072934b74c72654ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>random_access_iterator_type</type>
      <name>iterator</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af5130902770642a1a057a99c397d357d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxColsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eeacc3a41000cf1d29dd1a320b2a09d2a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxRowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eead2baadea085372837b0e80dc93be1306</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MaxSizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea3a459062d39cb34452518f5f201161d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea4d4548a01ba37a6c2031a3c1f0a37d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Array&lt; typename internal::traits&lt; Derived &gt;::Scalar, internal::traits&lt; Derived &gt;::RowsAtCompileTime, internal::traits&lt; Derived &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Derived &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Derived &gt;::MaxRowsAtCompileTime, internal::traits&lt; Derived &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainArray</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65328b7d6fc10a26ff6cd5801a6a44eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; typename internal::traits&lt; Derived &gt;::Scalar, internal::traits&lt; Derived &gt;::RowsAtCompileTime, internal::traits&lt; Derived &gt;::ColsAtCompileTime, AutoAlign|(internal::traits&lt; Derived &gt;::Flags &amp;RowMajorBit ? RowMajor :ColMajor), internal::traits&lt; Derived &gt;::MaxRowsAtCompileTime, internal::traits&lt; Derived &gt;::MaxColsAtCompileTime &gt;</type>
      <name>PlainMatrix</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa301ef39d63443e9ef0b84f47350116e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; internal::is_same&lt; typename internal::traits&lt; Derived &gt;::XprKind, MatrixXpr &gt;::value, PlainMatrix, PlainArray &gt;::type</type>
      <name>PlainObject</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aae45af9b5aca5a9caae98fd201f47cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eeadb37c78ebbf15aa20b65c3b70415a1ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5feed465b3a8e60c47e73ecce83e39a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab7ffc93e03d6e5dbe95de10353ef54eea25cb495affdbd796198462b8ef06be91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d1aba3f6c414715d830f760913c7e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9276182dab8236c33f1e7abf491d504d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae42ab60296c120e9f45ce3b44e1761a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFinite</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af1e669fd3aaae50a4870dc1b8f3b8884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abfbf4cb72dd577e62fbe035b1c53e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57591454af931f9dffa71c9da28d5641</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad9368ce70b06167ec5fc19398d329f5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2b54192f66aeae063d8f336cc15a379d</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3cd9a0f28ffe97f61eb9d5f7ddc8cf6d</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa632e9e729e54614cb02e1eafdee28b7</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acb4feeb4fcdfbc1c4142e386082d2a5e</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad31c9f4e5739f48c43903a7971bed9f5</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adcadf0223a613e236ebc7c717e29c5c0</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a70f0da1b756deb9d5e73e22e4753e9e0</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a914509f13e3222aa24627648ef232850</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a10949a9280dc910c06bd937c0fe586d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a77ed1eff5ffff0d6617c55c25f73ee25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac5031f68cc0b39c743eae168ed010b94</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7cf9ffde8bbc8bb29df873699518893b</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a009d17da3f0028854c4cbc82fd0df972</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a19879c908c2c5256406c200c4ac3c28a</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65a8dd26f943ed61bfcc7b912677523b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac860595c41daec812c35ba47809b4f16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68ad879b121a7f1ea716f287d8df7cf8</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a43d80e43aca655ed92009030f8d34976</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a04e862fdb5180277fe43388ae4ddf977</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7fce34a6da3cd7bfad9a7c3195602dba</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a164290bc114be03e0d71ee3b8dca86ac</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a407f6b9fb6e67503cc551a339dde85a9</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a268acfaf59f5de4d89481ea5f28df2ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae9a3dfd9b826ba3103de0128576fb15b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeb3b76f02986c2af2521d07164b5ffde</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a27f3b8aeaf37cb1decc9413ffceafa0f</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68c63405b4f66d00ea3ab6ca1c3fd138</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConstColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58837c81de446efbdb58da07b73a63c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColwiseReturnType</type>
      <name>colwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1c0e1b6067ec1de6cb8799da55aa7d30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7ef38c2028216e755bd1dece909e8197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>count</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a229be090c665b9bf7d1fcdfd1ab6e0c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae71d079e16d91360d10066b316b48485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab34773522e43bfb02e9cf652d7b5dd60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EvalReturnType</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa73e57a2f0f7cfcb4ad4d55ea0b6414b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9be169c308801411aa24be93d30930bf</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>EIGEN_DEPRECATED const Derived &amp;</type>
      <name>flagged</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9b3f75f76ae40439be870258e80c7346</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const WithFormat&lt; Derived &gt;</type>
      <name>format</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab231f1a6057f28d4244145e12c9fc0c7</anchor>
      <arglist>(const IOFormat &amp;fmt) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNaN</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab13d158c900560d3e1b25d85d2d33dd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a63d497720b56cde7fc9387f8ff54882c</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a432bd781fc7c9fa161a6d207758c7941</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7f84542e210e33d270e8739cc7a58e8e</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acc63ed57d91bb5d8bb4371e05154ed61</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a98e1785a4ea90e2bece694c80e57cb6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a288461d80253a5356180360e576ddbd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a714a7964441e3db0510fe7675c2cae6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6ae0c28f1c503f380bfae8813b120a4d</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6838b497da6256e09e3aa0e29f3449b1</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7273e4467c8272b3bd46f499404be8cf</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8965c41c5a4afe4ebe124bcd04fe94ed</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae8443357b808cd393be1b51974213f9c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApproxToConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9b150d48bc5e4366887ccb466e40c6b</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1ca84e4179b3e5081ed11d89bbd9e74f</anchor>
      <arglist>(const Scalar &amp;value, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adfca6ff4e473f68fbbeabbd03b7504a9</anchor>
      <arglist>(const typename NumTraits&lt; Scalar &gt;::Real &amp;other, const RealScalar &amp;prec) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isMuchSmallerThan</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3c4db0c6dd974fa88bbb58b2cf3d5664</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa56d6b4477cd3c92a9cf42f4b96e47c2</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af36014ec300f53a65083057ed4e89822</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b63c104782bb686a849332a12e93b53</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1b854cd1ec28fd551d694e8a08a98c69</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a30354cabc5eb2383b037984171680386</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a73b7c2a596f060f6dd2306faa4221939</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6f3710cb36d81cd490b3a2ff3556471b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a784e23ccbb39e7c57b70af386f94f8b5</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afe70186a582e114a590afe9570dcc926</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a21ac6c0419a72ad7a88ea0bc189017d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7f5dc08c0bb17bfd9485bd7070dd07d8</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8cec49e16c19b3a426db10066b468179</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae22e661d1b3b9747c85b0246c3e78b84</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a548cc72cefdbd8b9020a87f678f038d0</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad659f849b33c3a652a64b0a6ba65d5c7</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2986cb4d0cfd787cc29a139f41a56e9e</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab963fb858672cea77e0b00f52f80422f</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af25a1a40ec5c03602ea13216f3a40746</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaeb695853e9a28ba1dd54861d0cd9d8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5731b75a9120bf45202b5d863faa9ee4</anchor>
      <arglist>(IndexType *row, IndexType *col) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a950a030154fa3c525a213dfda8267a85</anchor>
      <arglist>(IndexType *index) const</arglist>
    </member>
    <member kind="function">
      <type>const NestByValue&lt; Derived &gt;</type>
      <name>nestByValue</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3e2761e2b6da74dba1d17b40cc918bf7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7183cf5d426883fb8ca5ef6f8a2c49c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndexedView_or_Block</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0b44220621cd59a75cd0f48cc499518f</anchor>
      <arglist>(const RowIndices &amp;rowIndices, const ColIndices &amp;colIndices)</arglist>
    </member>
    <member kind="function">
      <type>IndexedView_or_VectorBlock</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5f92b10bd3d7d3bc67fbb5e21e2dede2</anchor>
      <arglist>(const Indices &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a89b50f4d195d2a689597d10995667354</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0e575eb0ba6cc6bc5f347872abd8509d</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
      <docanchor file="classEigen_1_1DenseBase">MatrixBaseCommaInitRef</docanchor>
    </member>
    <member kind="function">
      <type>CommaInitializer&lt; Derived &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0f0e34696162b34762b2bf4bd948f90c</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab66155169d20c035e80d521a8b918e97</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5281dadff89f46eef719b38e5d073a8f</anchor>
      <arglist>(const DenseBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a58915510693d64164e567bd762e1032f</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4cded241a08ab74be620599bb033864d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af119d9a4efe5a15cd83c1ccdf01b3a4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af58aabc32dc2318ef2ea52b69f86c03f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2d2f8ceb292936ab16ba31078f3148c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a63ce1e4fab36bff43bbadcdd06a67724</anchor>
      <arglist>(const Func &amp;func) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, RowFactor, ColFactor &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a60dadfe80b813d808e91e4521c722a8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; Derived, Dynamic, Dynamic &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afae2d5e36f1158d1b1681dac3cdbd58e</anchor>
      <arglist>(Index rowFactor, Index colFactor) const</arglist>
    </member>
    <member kind="function">
      <type>Reshaped&lt; Derived,... &gt;</type>
      <name>reshaped</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2990e991b8983991e217f1eafdfdf018</anchor>
      <arglist>(NRowsType nRows, NColsType nCols)</arglist>
    </member>
    <member kind="function">
      <type>const Reshaped&lt; const Derived,... &gt;</type>
      <name>reshaped</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa100b32b9ee3c5f042c4e79272f84304</anchor>
      <arglist>(NRowsType nRows, NColsType nCols) const</arglist>
    </member>
    <member kind="function">
      <type>Reshaped&lt; Derived,... &gt;</type>
      <name>reshaped</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2e8b45e13167aa63feef4d8d419c32ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Reshaped&lt; const Derived,... &gt;</type>
      <name>reshaped</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab0be3803839cb0f584dc68c0d93de345</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2ec5bac4e1ab95808808ef50ccf4cb39</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a25e2b4887b47b1f2346857d1931efa0f</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a38ea394036d8b096abf322469c80198f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e2f3ac4019184abf95ca0e1a8d82866</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adb8045155ea45f7961fc2a5170e1d921</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4db2b12e581dce4d0648572bd6fdd81f</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad672e5fe5afa0d26c416d923005147c5</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8e17ddf77a2648f7077fb5419e06d55f</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4ea69690c92653c0a1b544ffaa260c70</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a09bc4a61cdf4ad219db0e70de12c2ae2</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a624618f6fe2271dbd70699c00c2501f5</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>ConstRowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa1cabd3404528fe8cec4bab43d74bffc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RowwiseReturnType</type>
      <name>rowwise</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6daa3a3156ca0e0722bf78638e1c7f28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4770efd5351448032cc52f7801b5c4c6</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a20ef8e393349a1ef1c5b4a1b482fbc15</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adc7bb37ed8d1d38af1d858017f4ec79a</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1966e96819ba555062ddeef5d5d541d3</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a65e78cfcbc9852e6923bebff4323ddca</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, ThenDerived, typename ThenDerived::ConstantReturnType &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a57ef09a843004095f84c198dd145641b</anchor>
      <arglist>(const DenseBase&lt; ThenDerived &gt; &amp;thenMatrix, const typename ThenDerived::Scalar &amp;elseScalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Select&lt; Derived, typename ElseDerived::ConstantReturnType, ElseDerived &gt;</type>
      <name>select</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9e8e78c75887d4539071a0b7a61ca103</anchor>
      <arglist>(const typename ElseDerived::Scalar &amp;thenScalar, const DenseBase&lt; ElseDerived &gt; &amp;elseMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac2f1e50d1f567da38da1d2f07c5ab559</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5d1ce9e801fa502e02b9b8cd9141ad0a</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setLinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aeb023532476d3f14c457367e0eb5f3f1</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a250ef1b827e748f3f898fb2e55cb96e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac476e5852129ba32beaa1a8a3d7ee0db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af230a143de50695d2d1fae93db7e4dcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5e8d95013a39f42c49d3524d62f42f92</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>abd21cbdf1b6b8db228b34f761a71c13f</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8919498926595402adc287cafc536a5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>addd7080d5c202795820e361768d0140c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af9e7e4305fdb7781f2b2f05fa801f21e</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a44e25adc6da9cd1d79f4c5bd7c1819cb</anchor>
      <arglist>(PlainObjectBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a839abc855bc9ce8939cbd482050dac8d</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7911299c845bef690cb30fba24327c00</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adf5a1e422ac928c1fc476ce798016b47</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a0e6c9f0397a80591bbf1c201fb92e3d3</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa2cd02c27a36a926700e14ba71d91dfc</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a535747d59e9de6ef4183d3a9d6e4329c</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5b8664897a39a39fbb8e98d70b94f16d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a522797cacdcf302f3b61c28adb7356e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a34f32fe127ed8e2522806c733faa6570</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>adce933f12d5ff50ac09c11e46a4f6351</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a6b5201d0c49a0db8aad74f03edc0ba0e</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac5f14ab51e85aeedf3c94fa9e2e24014</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a122a73bc1c75c6055450a26e03576299</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad08fcbbf7f9e418e024b27c5badb02d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a169529aa33a07465cb46ff5792a666b7</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af2bf22188e8bd3679e335a3a126602d4</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>afa9bb380ecc165aba4f98d241b682834</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7804db18737bdde064f3d14335d7fe0b</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4db19cec73b4ac656dc06b848dfd6a30</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>acd0ac6fe60877277856382993620be8b</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac8952c19644a4ac7e41bea45c19b909c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a38c0b074cf93fc194bf91141287cee3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeInPlace</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac501bd942994af7a95d95bee7a16ad2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Derived &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af49806260cbfdd0be63e865367e48482</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Derived &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af2a51172b52c94300b82e95973542092</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>value</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8515f719046aa4851e385661f45595b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>visit</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a4225b90fcc74f18dd479b401124b3841</anchor>
      <arglist>(Visitor &amp;func) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a68a7ece6c5629d1e9447a321fcb14ccd</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a1fdd3189ae3a41d250593334d82210cf</anchor>
      <arglist>(Index size, const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Constant</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aed89b5cc6e3b7d9d5bd63aed245ccd6d</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>af0dd2c2ee796c50a63126e1e87b55985</anchor>
      <arglist>(Sequential_t, Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aaef589c1dbd7fad93f97bd3fa1b1e768</anchor>
      <arglist>(Index size, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const SequentialLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a111ba763100d5c287ab25d1c81342501</anchor>
      <arglist>(Sequential_t, const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomAccessLinSpacedReturnType</type>
      <name>LinSpaced</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ad8098aa5971139a5585e623dddbea860</anchor>
      <arglist>(const Scalar &amp;low, const Scalar &amp;high)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3340c9b997f5b53a0131cf927f93b54c</anchor>
      <arglist>(Index rows, Index cols, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a9752ee59976a4b4aad860ad1a9093e7f</anchor>
      <arglist>(Index size, const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const CwiseNullaryOp&lt; CustomNullaryOp, PlainObject &gt;</type>
      <name>NullaryExpr</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a5dc65501accd02c30f7c1840c2a30a41</anchor>
      <arglist>(const CustomNullaryOp &amp;func)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a8b2a51018a73a766f5b91aef3487f013</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ab710a58e4a80fbcb2594242372c8fe56</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Ones</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a2755cb4023f7376880523626a8e05101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae97f8d9d08f969c733c8144be6225756</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a7eb5f974a8f0b67eac7080db1da0e308</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const RandomReturnType</type>
      <name>Random</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae814abb451b48ed872819192dc188c19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ae41a9b5050ed27d9e93c82c9c8622cd3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>ac22f79b812fa564061042407f2ba8f5b</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ConstantReturnType</type>
      <name>Zero</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a422ddeef58bedc7bddb1d4357688d761</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseBase</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>aa284042d0e1b0ad9b6a00db7fd2d9f7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>classEigen_1_1DenseBase.html</anchorfile>
      <anchor>a3806d3f42de165878dace160e6aba40a</anchor>
      <arglist>(std::ostream &amp;s, const DenseBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a58c9b86a018984ecd713489477408dca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a05c7ba6bde770355051c199beee4496b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a592ea1695e6b50edaf4ff4446117dc78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>a2e042a88b4ef502317af4ef16f4c5190</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>colStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ab6af285d1c2135599fc10505f8bc4473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a754e7a58a4407a8319b5beeb652d4282</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a6a2cce504be7470acae3af19c0618c36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rowStride</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>a19dc60c1e6bced467651f2b440b2655d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01DirectWriteAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af51b00cc45490ad698239ab6a8b94393</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aa7231d519967c37b4f98002d80756bda</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab3dbba4a15d0fe90185d2900e5ef0fd1</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>af9fadc22d12e48c82745dad534a1671a</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a496672306836589fa04a6ab33cb0cf2a</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a926f52a94f038db63c6b9103f98dcf0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a189c80109e76752b598d60dfcdab329e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0c6d6904a37805ce47a3238fbd735963</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a7c60c97282d4a0f8bca16ef75e231ddb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>adc8286576b31e11f056057be666a0ec8</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ae66b7d18b2a85f3139b703126974c900</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ae6ba07bad9e3026afe54806fdefe32bb</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a0171eee1d9e582d1ac7ec0f18f5f615a</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator[]</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>aa2040f14e60fed1a4a68ca7f042e1bbf</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>w</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af683e04b3926aaf4091581ca24ca09ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af163a982f5a7ad7e5c3336990b3d7000</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>afeaa80359bf0c1311f91cdd74a2042a8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1DenseCoeffsBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a858151a06b8c0ff407232d84e695dd73</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Diagonal</name>
    <filename>classEigen_1_1Diagonal.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>_DiagIndex</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalMatrix</name>
    <filename>classEigen_1_1DiagonalMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a71b770614009e5af4b63d5f8005af2a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a49c751bd59187979e1406b18e3b16049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a07deda6348ef81a6a07577c40e5a8687</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ab069e106761d66fe1c2c494e7daf2244</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a8d674e5eaa4c378d5a3f96a9007ca349</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a09d6cb930dff5e147ce22e08f2bb74b5</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a41b3d77b1ce65062a9ab53073083bac8</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a09701a17fa9ead2145174b4f4db6ab67</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a5d362adc0550baabcff2095c92c5045d</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>af04e2fd5733eda42f0d82bb6b7405b42</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a58fabb4849fa44233c21f088ac33aa06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a0b2d7eb480c889693fb31fbdb02d9c09</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>ad4d81f0bf2bdb022d1910a89a6f8c819</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1DiagonalMatrix.html</anchorfile>
      <anchor>a293457cb23a0a2c95c44a1c6101ef218</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalPreconditioner</name>
    <filename>classEigen_1_1DiagonalPreconditioner.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::DiagonalWrapper</name>
    <filename>classEigen_1_1DiagonalWrapper.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const DiagonalVectorType &amp;</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>afd4146738d335e1ce99cffde198f1f31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalWrapper</name>
      <anchorfile>classEigen_1_1DiagonalWrapper.html</anchorfile>
      <anchor>af71ac89792969bdd7f2661fa6d4159a0</anchor>
      <arglist>(DiagonalVectorType &amp;a_diagonal)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EigenBase</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BandMatrix&lt; _Scalar, Rows, Cols, Supers, Subs, Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; BandMatrixWrapper&lt; _CoefficientsType, _Rows, _Cols, _Supers, _Subs, _Options &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BandMatrixWrapper&lt; _CoefficientsType, _Rows, _Cols, _Supers, _Subs, _Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BandMatrixWrapper&lt; _CoefficientsType, _Rows, _Cols, _Supers, _Subs, _Options &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Block&lt; XprType, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block&lt; XprType, BlockRows, BlockCols, true &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Inverse&lt; PermutationType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Inverse&lt; PermutationType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; PermutationType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseQRMatrixQReturnType&lt; SparseQRType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseQRMatrixQReturnType&lt; SparseQRType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseQRMatrixQReturnType&lt; SparseQRType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseSymmetricPermutationProduct&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; SparseView&lt; MatrixType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseView&lt; MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; Transpose&lt; MatrixType &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transpose&lt; MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Transpose&lt; MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EigenBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</name>
    <filename>structEigen_1_1EigenBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a554f30542cc2316add4b1ea0a492ff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a16145eb95335754c2ff8b2a58731bc53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangularView&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const TriangularView&lt; MatrixType, Mode &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>ab75c2d8a783d055db397319c5a330eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>structEigen_1_1EigenBase.html</anchorfile>
      <anchor>adb0d244a512a784ded5319bd1a848440</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::EigenSolver</name>
    <filename>classEigen_1_1EigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4d0b2a773357d0a6ec98e026f04002ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>adc446bcb60572758fa64515f2825db62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa140354e2f7d5ce34c6488c39e19f2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a5bff6a6bc0efac67d52c60c2c3deb9ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a83acd180404ddaac8a678fa65a6b632b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a017d49fe0d59874b70a2fcf35e5aa373</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a38d032b75b3e75640e3db42e7ab20c24</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a3af22d721a6401365881b2ef252d26aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa4edf56ecc178b277b75c13a2ca1089f</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EigenSolver</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a7e8ab3d89ea525af5f27f1a8e805fae1</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>const EigenvalueType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a114189009e42f5e03372a7a3dfa33b97</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenvectorsType</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a66288022802172e3ee059283b26201d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>aa7668af4bcb47cd92cfe10640589d88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>ac4af54fadc33abcdd1778c87bfbf005b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>pseudoEigenvalueMatrix</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4979eafe0aeef06b19ada7fa5e19db17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>pseudoEigenvectors</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a4e796226f06e1f7347cf03a38755a155</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1EigenSolver.html</anchorfile>
      <anchor>a6cff220aadfd8d8c1366b915ddefd164</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ForceAlignedAccess</name>
    <filename>classEigen_1_1ForceAlignedAccess.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivHouseholderQR</name>
    <filename>classEigen_1_1FullPivHouseholderQR.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a1029e1ccc70bb8669043c5775e7f3b75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>abeda6d91e196c13d4dd8b7542fef3e17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR&lt; MatrixType &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a3745d70b826c12d33b8d34f26a5c96e7</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a3b5fe5edc66acc01c45b16e728470aa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aeb14b4c1eef33128207b40a00bd0bd08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>abf722e1dc7241a5d6f76460ef0c87821</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aeeace3abca6b215025e94c3e098b0a97</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivHouseholderQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ac9bdb4f7fa77c1aa16f238592c248e70</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a874fcd822871010f7961d9e94f1767e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; FullPivHouseholderQR &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a352ce66397af06da214ddde343cec6f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a6776788011026b0f63192485a59deaed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aeb1d779ec22ec68a5a28d4235db02ec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aa3593db4708ce9079b0bdf219b99f57e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aafde38918912c9b562f44b0fc3b22589</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixQReturnType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>ad26dd2d3c002939771d2375e4e051c28</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a9c16411e5d8f1fc634a5797018d5aa3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a7887506237a3bf912aebc9aaa8edacec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>af1e4d04824084a964c1a6e51db68376f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aeae555220f46477818ccc94aca2de770</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IntDiagSizeVectorType &amp;</type>
      <name>rowsTranspositions</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>abebbfc0ca6e3dd285a0ad0c907abb093</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a92277e572bf98245891015d12dd2b602</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivHouseholderQR &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>aaea4bf3dd145e0cddb16e364cca9d887</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; FullPivHouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>a6f1b0a116c78e642e3d2a100a29d1a4a</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivHouseholderQR.html</anchorfile>
      <anchor>af7f6ac15ca19c2b9e45dc3eaae58c201</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::FullPivLU</name>
    <filename>classEigen_1_1FullPivLU.html</filename>
    <templarg>_MatrixType</templarg>
    <base>SolverBase&lt; FullPivLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a0a3c3b1bbafa31a03567a4573ebabc79</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; MatrixType &gt;::Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a71654e5c60a26407ecccfaa5b34bb0aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dimensionOfKernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a64e191225834e91161ea53ad4b78167b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>af225528d1c6e623a2b1dce091907d13e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ae83ebd2a24088f04e3ac835b0dc001e1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a31a6a984478a9f721f367667fe4c5ab1</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FullPivLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a3e903b9f401e3fc5d1ca7c6951c76185</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const internal::image_retval&lt; FullPivLU &gt;</type>
      <name>image</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a0893985d2dab367baa6e57c6fd0c4956</anchor>
      <arglist>(const MatrixType &amp;originalMatrix) const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; FullPivLU &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ae6f4bb55f859f6353f99cf15ecff4b25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ab13992c852aa593461d9b81790b56667</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInvertible</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>afdf2579c93473650f2ef2a47a376c4a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSurjective</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a1f6222875fc3a181ee1544b9b36dfda5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::kernel_retval&lt; FullPivLU &gt;</type>
      <name>kernel</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a70f52eeb2cd07dfbf790fce106fb4015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>afea0b8fc707a9097d46fe358cb18bbff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>maxPivot</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>abced9f280f5fc49c2e62605c782b237b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroPivots</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>aa71132a751ad3c78178e33d6b2987400</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationPType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ad8f1d7266a434c524d3e0dbcc7a0f588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationQType &amp;</type>
      <name>permutationQ</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a8d18190c7618de271cba7293f0493a36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a67a870aa69e699e058d04802ba0bdad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a0bc63f910960dc3e35acecc8442025b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a191a4f598b0c192a83ab48984e87ee51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a414592d82de98f5bd075965caf56d681</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>a1b5e30add3dfb6625da1213d68418f44</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; FullPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>af563471f6f3283fd10779ef02dd0b748</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1FullPivLU.html</anchorfile>
      <anchor>ad77539203694f2d85ff7d11616e5a0a5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedEigenSolver</name>
    <filename>classEigen_1_1GeneralizedEigenSolver.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; RealScalar &gt;</type>
      <name>ComplexScalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>abdec07af91db1345bb4c74066e3d0ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>ComplexVectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>acfd144329aca76882069da2fc5d53ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; ComplexScalar, Scalar &gt;, ComplexVectorType, VectorType &gt;</type>
      <name>EigenvalueType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ad59af178acc401f1bc4e330ef80f286d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</type>
      <name>EigenvectorsType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>afffec018dbb2d87b4c09b6acecbb79cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a46a0ff3841059479ec314e56a5645302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a56f4b9823bb9a267de3aaf48428cd247</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>afb318d0b097ff8dd5a7410d31317ca47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a5aa3d1390c2b0d455c1c9b8b3101b119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ComplexVectorType</type>
      <name>alphas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a82b1bc41267f46e5c5899d5b084a73bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>betas</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>abeaa6f56cee367b83fd09d428462ca0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a275910b47dfe5f40211dcb59cfd68f3c</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>EigenvalueType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a62f01cd78271efd5e39bcb24e0fe1a58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>ae745f39da43f9df192cc2875d82b4cf1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>aab6423ded30275cd4cdd31758c278694</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a2a3528cbf75f66d3a60af9dc7b12ff65</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeEigenvectors=true)</arglist>
    </member>
    <member kind="function">
      <type>GeneralizedEigenSolver &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1GeneralizedEigenSolver.html</anchorfile>
      <anchor>a2a6f96bd042068cfc0eafba839b424bd</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::GeneralizedSelfAdjointEigenSolver</name>
    <filename>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</filename>
    <templarg></templarg>
    <base>Eigen::SelfAdjointEigenSolver</base>
    <member kind="function">
      <type>GeneralizedSelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a724764fe196612b752042692156ed023</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>a501effdbf722c0609ea05ff3fd4cc721</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>aac849f01a8c6148c645acd10bd3a9b0e</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedSelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1GeneralizedSelfAdjointEigenSolver.html</anchorfile>
      <anchor>addc0409c9cb1a5ac9cbbd00efe68908e</anchor>
      <arglist>(const MatrixType &amp;matA, const MatrixType &amp;matB, int options=ComputeEigenvectors|Ax_lBx)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HessenbergDecomposition</name>
    <filename>classEigen_1_1HessenbergDecomposition.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</type>
      <name>CoeffVectorType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a567f99f3770365777b67bf9832b6fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a7c1188cd5d8f550c8941df75a50a7d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e287ac222f53e2c8ce82faa43e95ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a93a611350a7db9d1da18f2c828ecea9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a9420c36226cae7d92da8308a3f97ac2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HessenbergDecomposition &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a239a6fd42c57aab3c0b048c47fde3004</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aee1724cb6418ede1a8b9045036a5a319</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>acd22602a3e3e5a02f79990ba1e445dc9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const CoeffVectorType &amp;</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a65fa81ce79d956baa59a30a6d82f8a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixHReturnType</type>
      <name>matrixH</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e781d2e22a2304647bcf0ae913cc8ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a346441e4902a58d43d698ac3da6ff791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a1f72b7612fd4edc5a6f31005e433e1dd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HessenbergDecomposition&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1HessenbergDecomposition.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</type>
      <name>CoeffVectorType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a567f99f3770365777b67bf9832b6fac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a7c1188cd5d8f550c8941df75a50a7d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e287ac222f53e2c8ce82faa43e95ac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a93a611350a7db9d1da18f2c828ecea9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a9420c36226cae7d92da8308a3f97ac2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>HessenbergDecomposition &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a239a6fd42c57aab3c0b048c47fde3004</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>aee1724cb6418ede1a8b9045036a5a319</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HessenbergDecomposition</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>acd22602a3e3e5a02f79990ba1e445dc9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const CoeffVectorType &amp;</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a65fa81ce79d956baa59a30a6d82f8a84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixHReturnType</type>
      <name>matrixH</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a8e781d2e22a2304647bcf0ae913cc8ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a346441e4902a58d43d698ac3da6ff791</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1HessenbergDecomposition.html</anchorfile>
      <anchor>a1f72b7612fd4edc5a6f31005e433e1dd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Homogeneous</name>
    <filename>classEigen_1_1Homogeneous.html</filename>
    <templarg></templarg>
    <templarg>_Direction</templarg>
    <base>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderQR</name>
    <filename>classEigen_1_1HouseholderQR.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>aaf4ef26c0b7affc91431ec59c92d64c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HCoeffsType &amp;</type>
      <name>hCoeffs</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ae931aa44cde62317b57a9ae661d184be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>householderQ</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>affd506c10ef2d25f56e7b1f9f25ff885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a974adb10a0e066057aeb3b360df68380</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a1087457610c53e1574de521a51de0cd3</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>afa7cfb4faa89195c4dc8d196924c8230</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a95a53f8479ee147d7b0ccab71c13e45d</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::RealScalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>af61b6dbef34fc51c825182b16dc43ca1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQR</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>ae837f2fb30099212c53b3042c7d699c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; HouseholderQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a3e8e56769bbaaed0616ad98c4ff99c7b</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>computeInPlace</name>
      <anchorfile>classEigen_1_1HouseholderQR.html</anchorfile>
      <anchor>a3a16530338a734971fc45efb0ef9ac94</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::HouseholderSequence</name>
    <filename>classEigen_1_1HouseholderSequence.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Side</templarg>
    <base>EigenBase&lt; HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &gt;</base>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>af3967dc6ea7a3671224a4b4a9776a329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>adcdcdd92a77810ce4bdd2b1282fe6a75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ac71fa85a4f177b0aeb1026752aea5590</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EssentialVectorType</type>
      <name>essentialVector</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ac91cf37b0cbea9e504c89e021fd289ba</anchor>
      <arglist>(Index k) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>af6aeede87ed8dac452f4fa8b4f45c3f2</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HouseholderSequence</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>aa4b1b93fff4d5c79342974d9d2a9eec8</anchor>
      <arglist>(const HouseholderSequence &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a02014cb7359500d5bd51b6f8ee4d34fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>length</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ac62fad812f3893f237378fe70e55bf66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::matrix_type_times_scalar_type&lt; Scalar, OtherDerived &gt;::Type</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a8d1636f2dfa948d640256c3331d21357</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a6eaafe2460930d1f4aa67d6e577b71f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setLength</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a30cc06d5b2ca4b7dcf5fcd53313d25fc</anchor>
      <arglist>(Index length)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a2d8d996ce1085fd977850988735739f0</anchor>
      <arglist>(Index shift)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>shift</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>a34482bfad5563fd8a8a4264db76ac917</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1HouseholderSequence.html</anchorfile>
      <anchor>ae0959abb2cfa16c9df2e5782e721811c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Hyperplane</name>
    <filename>classEigen_1_1Hyperplane.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_AmbientDim</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a58d2307d16128a0026021374e9e10465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>absDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a28eabcf0c7607a5091743abac91a8fc8</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Hyperplane, Hyperplane&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>acfeb7c6af0d9cedb04a4a4268948f015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a4a051414928ebb5803036b69aad597ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ab484a0fbbb43e22812b6211d878cddd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a23de6500e87586f5ca9904fe5315b51d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>aa19ee87ada63fa6576bf61517424b1b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a75aebf8b553ea33a193ea94583a7f830</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a0f9ca82a2cf12753da3a007e128631f8</anchor>
      <arglist>(const VectorType &amp;n, const VectorType &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a76a1ed93c5f7e3a9aba4f029809d6ebc</anchor>
      <arglist>(const VectorType &amp;n, const Scalar &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ad05d941675fd03b46dd1029f2f0c95ea</anchor>
      <arglist>(const ParametrizedLine&lt; Scalar, AmbientDimAtCompileTime &gt; &amp;parametrized)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hyperplane</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae03c337cae9fd43396f92b9e97e600b1</anchor>
      <arglist>(const Hyperplane&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a308d9231ca5a0ebffde94fb13fd9916a</anchor>
      <arglist>(const Hyperplane &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ad5f22e31d700adf1144eecda45075494</anchor>
      <arglist>(const Hyperplane&lt; Scalar, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>ConstNormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>abe6786725d6aae2e6ef6981395aeac46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalReturnType</type>
      <name>normal</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a567f2d13d5c9835f2884c329185e4c63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae090309b1a932e07a983ff7dd84a3120</anchor>
      <arglist>(void)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a7451d5993c7b87e2ff358e0aa3a06175</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>offset</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a4a9fae414234e9513194b69a878a4225</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a855dec52efed47121fc5cd47fdf808f7</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signedDistance</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>abe362349d10c5852b007958c5e1152eb</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae89b4a512bfb4acbf6192b37c89d1552</anchor>
      <arglist>(const MatrixBase&lt; XprType &gt; &amp;mat, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function">
      <type>Hyperplane &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>ae07794d268e45fd513a17c49b9a6ec81</anchor>
      <arglist>(const Transform&lt; Scalar, AmbientDimAtCompileTime, Affine, TrOptions &gt; &amp;t, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a7ae0bb22aa49175b46ed58010b8d5221</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Hyperplane</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1Hyperplane.html</anchorfile>
      <anchor>a23f225bb36b10ce116ca97d2ca7aa345</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1, const VectorType &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IdentityPreconditioner</name>
    <filename>classEigen_1_1IdentityPreconditioner.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::IncompleteCholesky</name>
    <filename>classEigen_1_1IncompleteCholesky.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; IncompleteCholesky&lt; Scalar, _UpLo, _OrderingType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a702560ecdddef77dc51d20ab22bd974e</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a0d66a1c8e340617e7ff404e63186fedb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a7966bedeebbeaa7a8fe4dd1da3797a0b</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>ac39c75ff7ca5d2db9a9f03b937e12601</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncompleteCholesky</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>adaaa3975b8cf53f910d6a3344af92379</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IncompleteCholesky</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a757499fc814988a5b112b1f34d0295e1</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>ada0e68cb22601849464506f5986a88c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FactorType &amp;</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a7d1f1878505fd1862e6f2286d27ff09a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a0d52cec5e17f485a362766363ba90b02</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a4780a83266c871782595081021268b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorRx &amp;</type>
      <name>scalingS</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a30d66dd77147a84ec3302e7d5fe5d924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInitialShift</name>
      <anchorfile>classEigen_1_1IncompleteCholesky.html</anchorfile>
      <anchor>a409c9586e7d29566dda2c8f5e38a1228</anchor>
      <arglist>(RealScalar shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IncompleteLUT</name>
    <filename>classEigen_1_1IncompleteLUT.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; IncompleteLUT&lt; _Scalar, _StorageIndex &gt; &gt;</base>
    <class kind="struct">Eigen::IncompleteLUT::keep_diag</class>
    <member kind="function">
      <type>IncompleteLUT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a488e37ab51d8ed37a297eeca521f1817</anchor>
      <arglist>(const MatrixType &amp;amat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a941c7d34f15d7bc287e780636be0ee2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDroptol</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a9628c5a595e9e984c72d1f8e671a6925</anchor>
      <arglist>(const RealScalar &amp;droptol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFillfactor</name>
      <anchorfile>classEigen_1_1IncompleteLUT.html</anchorfile>
      <anchor>a327767d12b55ff8a023f12a030051e17</anchor>
      <arglist>(int fillfactor)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IndexedView</name>
    <filename>classEigen_1_1IndexedView.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const ColIndices &amp;</type>
      <name>colIndices</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>ae4abc26fe04506a02d49e704e112f5bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>a6d5f355dd721df6d39482a04e5ffd44d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::remove_all&lt; XprType &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>a2b2aa602ef1947b4752115605d106534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_reference&lt; XprType &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>ae6ada15bd2ae4302c097409fc91592b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RowIndices &amp;</type>
      <name>rowIndices</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>af038f6d19de286c0b959f3c1b8daa20d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1IndexedView.html</anchorfile>
      <anchor>ae0d840059e7753d58f3de53da7d04ce0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::InnerStride</name>
    <filename>classEigen_1_1InnerStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; 0, Value &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::Inverse</name>
    <filename>classEigen_1_1Inverse.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::IOFormat</name>
    <filename>structEigen_1_1IOFormat.html</filename>
    <member kind="function">
      <type></type>
      <name>IOFormat</name>
      <anchorfile>structEigen_1_1IOFormat.html</anchorfile>
      <anchor>a840cac6401adc4de421260d63dc3d861</anchor>
      <arglist>(int _precision=StreamPrecision, int _flags=0, const std::string &amp;_coeffSeparator=&quot; &quot;, const std::string &amp;_rowSeparator=&quot;\n&quot;, const std::string &amp;_rowPrefix=&quot;&quot;, const std::string &amp;_rowSuffix=&quot;&quot;, const std::string &amp;_matPrefix=&quot;&quot;, const std::string &amp;_matSuffix=&quot;&quot;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::IterativeSolverBase</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3f684fb41019ca04d97ddc08a0d8be2e</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7dfa55c55e82d697bde227696a630914</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a117c241af3fb1141ad0916a3cf3157ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a1374b141721629983cd8276b4b87fc58</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0d6b459433a316b4f12d48e5c80d61fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae778dd098bd5e6655625b20b1e9f15da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0922f2be45082690d7734aa6732fc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3c68fe3cd929ea1ff8a0d4cbcd65ebad</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a168a74c8dceb6233b220031fdd756ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5e88f2a323a2900205cf807af94f8051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a709a056e17c49b5272e4971bc376cbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>af83de7a7d31d9d4bd1fef6222b07335b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ac160a444af8998f93da9aa30e858470d</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const SolveWithGuess&lt; Derived, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>adcc18d1ab283786dcbb5a3f63f4b4bd8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acb442c19b5858d6b9be813dd7d36cc62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeSolverBase&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <base>SparseSolverBase&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3f684fb41019ca04d97ddc08a0d8be2e</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7dfa55c55e82d697bde227696a630914</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a117c241af3fb1141ad0916a3cf3157ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a1374b141721629983cd8276b4b87fc58</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0d6b459433a316b4f12d48e5c80d61fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae778dd098bd5e6655625b20b1e9f15da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0922f2be45082690d7734aa6732fc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3c68fe3cd929ea1ff8a0d4cbcd65ebad</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a168a74c8dceb6233b220031fdd756ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5e88f2a323a2900205cf807af94f8051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a709a056e17c49b5272e4971bc376cbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>af83de7a7d31d9d4bd1fef6222b07335b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="function">
      <type>BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ac160a444af8998f93da9aa30e858470d</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const SolveWithGuess&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt;, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>adcc18d1ab283786dcbb5a3f63f4b4bd8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acb442c19b5858d6b9be813dd7d36cc62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeSolverBase&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <base>SparseSolverBase&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3f684fb41019ca04d97ddc08a0d8be2e</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7dfa55c55e82d697bde227696a630914</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a117c241af3fb1141ad0916a3cf3157ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a1374b141721629983cd8276b4b87fc58</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0d6b459433a316b4f12d48e5c80d61fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae778dd098bd5e6655625b20b1e9f15da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0922f2be45082690d7734aa6732fc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3c68fe3cd929ea1ff8a0d4cbcd65ebad</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a168a74c8dceb6233b220031fdd756ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5e88f2a323a2900205cf807af94f8051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a709a056e17c49b5272e4971bc376cbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>af83de7a7d31d9d4bd1fef6222b07335b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="function">
      <type>ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ac160a444af8998f93da9aa30e858470d</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const SolveWithGuess&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt;, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>adcc18d1ab283786dcbb5a3f63f4b4bd8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acb442c19b5858d6b9be813dd7d36cc62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeSolverBase&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1IterativeSolverBase.html</filename>
    <base>SparseSolverBase&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type>LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3f684fb41019ca04d97ddc08a0d8be2e</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a7dfa55c55e82d697bde227696a630914</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>error</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a117c241af3fb1141ad0916a3cf3157ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a1374b141721629983cd8276b4b87fc58</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0d6b459433a316b4f12d48e5c80d61fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ae778dd098bd5e6655625b20b1e9f15da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a0922f2be45082690d7734aa6732fc493</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolverBase</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a3c68fe3cd929ea1ff8a0d4cbcd65ebad</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>maxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a168a74c8dceb6233b220031fdd756ba0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a5e88f2a323a2900205cf807af94f8051</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Preconditioner &amp;</type>
      <name>preconditioner</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>a709a056e17c49b5272e4971bc376cbe4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>af83de7a7d31d9d4bd1fef6222b07335b</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="function">
      <type>LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &amp;</type>
      <name>setTolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>ac160a444af8998f93da9aa30e858470d</anchor>
      <arglist>(const RealScalar &amp;tolerance)</arglist>
    </member>
    <member kind="function">
      <type>const SolveWithGuess&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt;, Rhs, Guess &gt;</type>
      <name>solveWithGuess</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>adcc18d1ab283786dcbb5a3f63f4b4bd8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b, const Guess &amp;x0) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>tolerance</name>
      <anchorfile>classEigen_1_1IterativeSolverBase.html</anchorfile>
      <anchor>acb442c19b5858d6b9be813dd7d36cc62</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiRotation</name>
    <filename>classEigen_1_1JacobiRotation.html</filename>
    <templarg>Scalar</templarg>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a89c8ea615f8fa77ddd5810a1e5fde4da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a38fec2c4da529ef3d05ff37b848b4227</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiRotation</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a3e8b5dc0a56f7a2d0f788b1ccb1547cb</anchor>
      <arglist>(const Scalar &amp;c, const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeGivens</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>adb5bcb0d28a95e39ca31c2c17e866092</anchor>
      <arglist>(const Scalar &amp;p, const Scalar &amp;q, Scalar *r=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a69076401f22e883dc76b6ff9074ac669</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;, Index p, Index q)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>makeJacobi</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a6572f272cac38e070a99b466dd1fbc74</anchor>
      <arglist>(const RealScalar &amp;x, const Scalar &amp;y, const RealScalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>a3a9d07201435273f6e001592fc547dcb</anchor>
      <arglist>(const JacobiRotation &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>JacobiRotation</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1JacobiRotation.html</anchorfile>
      <anchor>ab40e9cdc4582593511e57ee896e055a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::JacobiSVD</name>
    <filename>classEigen_1_1JacobiSVD.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>QRPreconditioner</templarg>
    <base>SVDBase&lt; JacobiSVD&lt; _MatrixType, QRPreconditioner &gt; &gt;</base>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a5dab376cc86cf0d36674bcdad4af3f5a</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions)</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>acc7b9a4068cf7b69ae3227d217ed7efd</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a55315ab9cd060019a5ad07be798ff3b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a5d9ea7c8f361337727260efd77ee03ac</anchor>
      <arglist>(Index rows, Index cols, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>JacobiSVD</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>abfd1dd454a6e3edec7feecd97c818a78</anchor>
      <arglist>(const MatrixType &amp;matrix, unsigned int computationOptions=0)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1JacobiSVD.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::IncompleteLUT::keep_diag</name>
    <filename>structEigen_1_1IncompleteLUT_1_1keep__diag.html</filename>
  </compound>
  <compound kind="struct">
    <name>Eigen::SimplicialCholeskyBase::keep_diag</name>
    <filename>structEigen_1_1SimplicialCholeskyBase_1_1keep__diag.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::LDLT</name>
    <filename>classEigen_1_1LDLT.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ad9c57eb2fb3bbccd51b9d2e111bea355</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LDLT &amp;</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ac656a209860fa0c6a8faa8bb9f9a06ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LDLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a1777488d0bde83d5f23a622bf8431ef2</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a6bd6008501a537d2e16ea672a853bf3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNegative</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aabd3e7aebe844034caca4c62dbe9c1eb</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPositive</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a5e1c6b7ba8d7b82575d6ffdc3bf35bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a2e06dedd2651649c5b251fbf9ba4e7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a154aa41bd2460199d48861eaf5e4f597</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ad0e8d2131ea1a626a08d98e9effb1cc5</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>adf853d6cbbc49f3535a44439bca344d9</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>af0e6a0df5679873b42cf82a372dd8ddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLDLT</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aa5e0fd09dcd5251a8521fa248b95db0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a54838a2e31e53bbe4dcb78b5e80c8484</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LDLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a858dc77b65dd48248299bb6a6a758abf</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;w, const typename LDLT&lt; MatrixType, _UpLo &gt;::RealScalar &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ae646403fdde3a4b18e278a32c61a0953</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>ae3693372ca29f50d87d324dfadaae148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a776d0ab6c980847297d25b03b5d2216a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; LDLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>aa257dd7a8acf8b347d5a22a13d6ca3e1</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const TranspositionType &amp;</type>
      <name>transpositionsP</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>a47257d3500f9f7c9a4478158d0e34941</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Diagonal&lt; const MatrixType &gt;</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1LDLT.html</anchorfile>
      <anchor>af60b2f826a38a00070e0efccf0572066</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LeastSquareDiagonalPreconditioner</name>
    <filename>classEigen_1_1LeastSquareDiagonalPreconditioner.html</filename>
    <templarg></templarg>
    <base>Eigen::DiagonalPreconditioner</base>
  </compound>
  <compound kind="class">
    <name>Eigen::LeastSquaresConjugateGradient</name>
    <filename>classEigen_1_1LeastSquaresConjugateGradient.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IterativeSolverBase&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConjugateGradient</name>
      <anchorfile>classEigen_1_1LeastSquaresConjugateGradient.html</anchorfile>
      <anchor>ace69f423fcc1f8960d0e2de0667447c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeastSquaresConjugateGradient</name>
      <anchorfile>classEigen_1_1LeastSquaresConjugateGradient.html</anchorfile>
      <anchor>a91c4f2edc20f93cee9b721165937fb99</anchor>
      <arglist>(const EigenBase&lt; MatrixDerived &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::LLT</name>
    <filename>classEigen_1_1LLT.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ac7a64274814fa76e8b1e9e945546037f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LLT &amp;</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a559aba3a7c41f7fc87ec84327bb72ccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LLT&lt; MatrixType, _UpLo &gt; &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>aecb45daf711328e0804f272131142b57</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>adb1295e7d2b1fd825a041345ae08be54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a16d1ec9ea6497ba1febb242c2e8a7a96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>ab3656cfbdf38e03c57d5cf79bf8131b6</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a1848a00addade9a0f7f70493c52ecc9d</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a7f4a3eedbf82e7ce2d6bf0dcd84cdfa3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLLT</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>af62881fc95c7e54a93b63c20f2c62b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a18a390f085567e650e8345cc7e7c0df8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LLT&lt; _MatrixType, _UpLo &gt; &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a8ce93e407a2ba75489bcb6e89ea4c153</anchor>
      <arglist>(const VectorType &amp;v, const RealScalar &amp;sigma)</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a59338fa78db171d02fd5a2c9e4f3a30c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a8b6ba1bc41811c50e65cac8db597d802</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; LLT, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1LLT.html</anchorfile>
      <anchor>a3738bb3ce6f9b837a2beb432b937499f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map</name>
    <filename>classEigen_1_1Map.html</filename>
    <templarg>PlainObjectType</templarg>
    <templarg>MapOptions</templarg>
    <templarg>StrideType</templarg>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01const_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a62785b607c1f24dfc042e28dedc791f8</anchor>
      <arglist>(const Scalar *coeffs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</name>
    <filename>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01Quaternion_3_01__Scalar_01_4_00_01__Options_01_4.html</anchorfile>
      <anchor>a225f365e99258e028ef1ffa0031fab9b</anchor>
      <arglist>(Scalar *coeffs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Map&lt; SparseMatrix&lt; _Scalar, _Flags, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1Map.html</filename>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a43b3e84aba2ff1a241dbc3d177fb2e22</anchor>
      <arglist>(PointerArgType dataPtr, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a52069afac76e3f609a6865106dc10254</anchor>
      <arglist>(PointerArgType dataPtr, Index size, const StrideType &amp;stride=StrideType())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map.html</anchorfile>
      <anchor>a3f621386d55a373f53082ac62579897e</anchor>
      <arglist>(PointerArgType dataPtr, Index rows, Index cols, const StrideType &amp;stride=StrideType())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Map&lt; SparseMatrixType &gt;</name>
    <filename>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>aeecd1e0e97eeae254ad97cdf5bde9ec2</anchor>
      <arglist>(Index rows, Index cols, Index nnz, StorageIndex *outerIndexPtr, StorageIndex *innerIndexPtr, Scalar *valuePtr, StorageIndex *innerNonZerosPtr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>a3afd7ca5fb61494e9195a1e318078028</anchor>
      <arglist>(Index rows, Index cols, Index nnz, const StorageIndex *outerIndexPtr, const StorageIndex *innerIndexPtr, const Scalar *valuePtr, const StorageIndex *innerNonZerosPtr=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Map</name>
      <anchorfile>classEigen_1_1Map_3_01SparseMatrixType_01_4.html</anchorfile>
      <anchor>aefb5ce85ff8508d6a035b1b72158ca83</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a6d8ebb28996655c441d5d744ac227c8d</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aea142bb9ac9aa1b8c6b44f413daa4b88</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>acaf91005e3230bbffe1c69a4199a0506</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a474a755c6699eeeb9fd4fc70c502cdec</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ac309779622f2d4970f8cd2e95570ccf3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1bee30414766e9116a7abed067ca8007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1MapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a1ed41c4f721b9c87e8b071324532922d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MapBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1MapBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::MappedSparseMatrix</name>
    <filename>classEigen_1_1MappedSparseMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Flags</templarg>
    <templarg>_StorageIndex</templarg>
    <base>Map&lt; SparseMatrix&lt; _Scalar, _Flags, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>~MappedSparseMatrix</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a0c36a53853f1659ea59447bcb9a20799</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MappedSparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1MappedSparseMatrix.html</filename>
    <base>Eigen::Map</base>
    <member kind="function">
      <type></type>
      <name>~MappedSparseMatrix</name>
      <anchorfile>classEigen_1_1MappedSparseMatrix.html</anchorfile>
      <anchor>a0c36a53853f1659ea59447bcb9a20799</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Matrix</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Rows</templarg>
    <templarg>_Cols</templarg>
    <templarg>_Options</templarg>
    <templarg>_MaxRows</templarg>
    <templarg>_MaxCols</templarg>
    <base>PlainObjectBase&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <docanchor file="classEigen_1_1Matrix">dense</docanchor>
    <docanchor file="classEigen_1_1Matrix">fixedsize</docanchor>
    <docanchor file="classEigen_1_1Matrix">maxrows</docanchor>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;(~RowMajor), MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; ComplexScalar, RowsAtCompileTime, ColsAtCompileTime, Options, MaxRowsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; ComplexScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; int, 1, MatrixType::ColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; int, MatrixType::RowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; int, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; RealScalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; RealScalar, Dynamic, Dynamic, ColMajor &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; RealScalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, 1, Size, Options|RowMajor, 1, MaxSize &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, 3, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, AmbientDimAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, AmbientDimAtCompileTime, 1, Options &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, ColsAtCompileTime, 1, Options &amp;~RowMajor, MaxColsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, ColsAtCompileTime, ColsAtCompileTime, MatrixOptions, MaxColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, DiagSizeAtCompileTime, DiagSizeAtCompileTime, MatrixOptions, MaxDiagSizeAtCompileTime, MaxDiagSizeAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Dim, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Index(AmbientDimAtCompileTime)==Dynamic ? Dynamic :Index(AmbientDimAtCompileTime)+1, 1, Options &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, RowsAtCompileTime, 1, 0, MaxRowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, RowsAtCompileTime, RowsAtCompileTime, MatrixOptions, MaxRowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, Size, Size, ColMajor, MaxColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; Scalar, SizeMinusOne, 1, Options &amp;~RowMajor, MaxSizeMinusOne, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, 1, EIGEN_SIZE_MIN_PREFER_DYNAMIC(ColsAtCompileTime, RowsAtCompileTime), RowMajor, 1, EIGEN_SIZE_MIN_PREFER_FIXED(MaxColsAtCompileTime, MaxRowsAtCompileTime)&gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, Dynamic, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; StorageIndex, MatrixType::RowsAtCompileTime, 1 &gt;</name>
    <filename>classEigen_1_1Matrix.html</filename>
    <base>Eigen::PlainObjectBase</base>
    <member kind="typedef">
      <type>PlainObjectBase&lt; Matrix &gt;</type>
      <name>Base</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a9f405923954599ec7a71ee6bad2c53f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a8f7eef9d36f1057338309afb339c1661</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac59ab3932980f113533eaed7fc651756</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1c8627a7a051df98bdf6daab12852e02</anchor>
      <arglist>(Index dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a94173a014c2bdc8add568f43ddfd85af</anchor>
      <arglist>(const Scalar &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>adca6b686dcbf607bd53a8cbe4dfed85c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a285010dc9f5dd33b030dd115ff6f6307</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3166762a368fd1dec9bfa57e4e76bb50</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a1b56bac44d4b7d0d652f03daf6d99dca</anchor>
      <arglist>(const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z, const Scalar &amp;w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3615e7b050e4432e19189d5cf6671869</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>ac1a504f785d221680d41d25224a64ce3</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2f6bdcb76b48999cb9135b828bba4e7d</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; StorageIndex, _Rows, _Cols, _Storage, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a3fe9da2ac8949d30da03ac35801d34dd</anchor>
      <arglist>(const RotationBase&lt; OtherDerived, ColsAtCompileTime &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a0b287f226563b8410312bd474b2a1ccc</anchor>
      <arglist>(const Matrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Matrix.html</anchorfile>
      <anchor>a2477f75c24da9f1a1522a632b5934dd8</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixBase</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Derived &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const Derived &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1063a3752d30b568e52c89ce4e567489</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae04b39cbc74f2e12e3609df7117b0394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa0147ae59510af37efc4b8f79358324b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8cc51452067ce6730d1f68e524958638</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a709120e3c6fd81be98e3735856564f30</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a44b11744885ab2680da4093ba0b6cbf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4b143895b204800f62743554c297c740</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac78c95906920a6dcb53f8bd04e4adf85</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a964630f64e1c91a3c5c7418467e89ab5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa5c3a077f1e50b351ca567219c17769c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adeb982322a8a68b3ee9eb9d4e7bae468</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Derived ::Scalar, OtherDerived ::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a28d9b053ae69eb1073030dc1a39a4c2f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8a45ed73a51bbffec202e504f842299</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a315e35a856733d37bc85d9c102aa4e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a49e9a834666aa86e80f55b39926e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab5768147536273eb2dbdfa389cfd26a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebdeedcf67e46d969c556c6c7d9780ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; Derived &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; Derived &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad2fdb842d9a715f8778d0b33c29cfe49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afdaf810ac1708ca6d6ecdcfac1e06699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Derived &gt;, Derived &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; Derived &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Derived, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Derived, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a77992010f41a97b8865afc065fc469b3</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abb3ea15fbce5b5e90fbde6974936549d</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a54c1f5ec6050248bd3434b4024ee23e6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3636e277679555391a67857b7ef6c59c</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aaa2fc32463392a7488686e6f3007f278</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acc4d02dad6db83c4235dafbaaebe140f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed6b17344c30a260af7c570e3367fd71</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2d1864d9378be2cc8ab7b47bf9f8bb4f</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Derived, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6f44fface70a468cf9df2a4b33448298</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; Derived &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7cf3e0e69550d36de8778b09a645afd</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90bed3b6468a17a9054b07cde7a751a6</anchor>
      <arglist>(Index newSize, Index i)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Derived &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; Derived &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Derived &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1063a3752d30b568e52c89ce4e567489</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae04b39cbc74f2e12e3609df7117b0394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa0147ae59510af37efc4b8f79358324b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8cc51452067ce6730d1f68e524958638</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a709120e3c6fd81be98e3735856564f30</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a44b11744885ab2680da4093ba0b6cbf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4b143895b204800f62743554c297c740</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac78c95906920a6dcb53f8bd04e4adf85</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a964630f64e1c91a3c5c7418467e89ab5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa5c3a077f1e50b351ca567219c17769c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adeb982322a8a68b3ee9eb9d4e7bae468</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Homogeneous&lt; MatrixType, _Direction &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a28d9b053ae69eb1073030dc1a39a4c2f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8a45ed73a51bbffec202e504f842299</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a315e35a856733d37bc85d9c102aa4e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a49e9a834666aa86e80f55b39926e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab5768147536273eb2dbdfa389cfd26a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebdeedcf67e46d969c556c6c7d9780ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad2fdb842d9a715f8778d0b33c29cfe49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afdaf810ac1708ca6d6ecdcfac1e06699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;, Homogeneous&lt; MatrixType, _Direction &gt; &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;, Homogeneous&lt; MatrixType, _Direction &gt; &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Homogeneous&lt; MatrixType, _Direction &gt;, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Homogeneous&lt; MatrixType, _Direction &gt;, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a77992010f41a97b8865afc065fc469b3</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Homogeneous&lt; MatrixType, _Direction &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abb3ea15fbce5b5e90fbde6974936549d</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Homogeneous&lt; MatrixType, _Direction &gt;, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a54c1f5ec6050248bd3434b4024ee23e6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Homogeneous&lt; MatrixType, _Direction &gt;, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3636e277679555391a67857b7ef6c59c</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aaa2fc32463392a7488686e6f3007f278</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acc4d02dad6db83c4235dafbaaebe140f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed6b17344c30a260af7c570e3367fd71</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Homogeneous&lt; MatrixType, _Direction &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2d1864d9378be2cc8ab7b47bf9f8bb4f</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Homogeneous&lt; MatrixType, _Direction &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6f44fface70a468cf9df2a4b33448298</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7cf3e0e69550d36de8778b09a645afd</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>Homogeneous&lt; MatrixType, _Direction &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90bed3b6468a17a9054b07cde7a751a6</anchor>
      <arglist>(Index newSize, Index i)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Homogeneous&lt; MatrixType, _Direction &gt; &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Homogeneous&lt; MatrixType, _Direction &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1063a3752d30b568e52c89ce4e567489</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae04b39cbc74f2e12e3609df7117b0394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa0147ae59510af37efc4b8f79358324b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8cc51452067ce6730d1f68e524958638</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a709120e3c6fd81be98e3735856564f30</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a44b11744885ab2680da4093ba0b6cbf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4b143895b204800f62743554c297c740</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac78c95906920a6dcb53f8bd04e4adf85</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a964630f64e1c91a3c5c7418467e89ab5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa5c3a077f1e50b351ca567219c17769c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adeb982322a8a68b3ee9eb9d4e7bae468</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; MatrixWrapper&lt; ExpressionType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a28d9b053ae69eb1073030dc1a39a4c2f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8a45ed73a51bbffec202e504f842299</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a315e35a856733d37bc85d9c102aa4e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a49e9a834666aa86e80f55b39926e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab5768147536273eb2dbdfa389cfd26a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebdeedcf67e46d969c556c6c7d9780ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad2fdb842d9a715f8778d0b33c29cfe49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afdaf810ac1708ca6d6ecdcfac1e06699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;, MatrixWrapper&lt; ExpressionType &gt; &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;, MatrixWrapper&lt; ExpressionType &gt; &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixWrapper&lt; ExpressionType &gt;, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; MatrixWrapper&lt; ExpressionType &gt;, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a77992010f41a97b8865afc065fc469b3</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, MatrixWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abb3ea15fbce5b5e90fbde6974936549d</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixWrapper&lt; ExpressionType &gt;, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a54c1f5ec6050248bd3434b4024ee23e6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixWrapper&lt; ExpressionType &gt;, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3636e277679555391a67857b7ef6c59c</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aaa2fc32463392a7488686e6f3007f278</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acc4d02dad6db83c4235dafbaaebe140f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed6b17344c30a260af7c570e3367fd71</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, MatrixWrapper&lt; ExpressionType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2d1864d9378be2cc8ab7b47bf9f8bb4f</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const MatrixWrapper&lt; ExpressionType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6f44fface70a468cf9df2a4b33448298</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7cf3e0e69550d36de8778b09a645afd</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>MatrixWrapper&lt; ExpressionType &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90bed3b6468a17a9054b07cde7a751a6</anchor>
      <arglist>(Index newSize, Index i)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, MatrixWrapper&lt; ExpressionType &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</name>
    <filename>classEigen_1_1MatrixBase.html</filename>
    <base>Eigen::DenseBase</base>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afacca1f88da57e5cd87dd07c8ff926bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adjointInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a51c5982c1f64e45a939515b701fa6f4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8f2c8059ef3f04cfa0c73b4c012db855</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyHouseholderOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab3e52262b41fa40e194dda245e0f9675</anchor>
      <arglist>(const EssentialPart &amp;essential, const Scalar &amp;tau, Scalar *workspace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3a08ad41e81d8ad4a37b5d5c7490e765</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheLeft</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae669131f6e18f7e8f06fae271754f435</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a45d91752925d2757fc8058a293b15462</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
    <member kind="function">
      <type>ArrayWrapper&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a354c33eec32ceb4193d002f4d41c0497</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ArrayWrapper&lt; const Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>array</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72f287fe7b2a7e7a66d16cc88166d47f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>asDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a14235b62c90f93fe910070b4743782d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; PlainObject &gt;</type>
      <name>bdcSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae171b74b5d530846ee0836135ffcf837</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1063a3752d30b568e52c89ce4e567489</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3f3faa00163c16824ff03e58a210c74c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ColPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>colPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adee8c19c833245bbb00a591dce68e8a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CompleteOrthogonalDecomposition&lt; PlainObject &gt;</type>
      <name>completeOrthogonalDecomposition</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae90b6846f05bd30b8d52b66e427e3e09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseAndDetWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7baaf2fdec0191a2166cf9fd84a2dcb2</anchor>
      <arglist>(ResultType &amp;inverse, typename ResultType::Scalar &amp;determinant, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeInverseWithCheck</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a116f3b50d2af7dbdf7473e517a5b8b0f</anchor>
      <arglist>(ResultType &amp;inverse, bool &amp;invertible, const RealScalar &amp;absDeterminantThreshold=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>cos</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a34d626eb756bbeb4069d1eb0e6494c65</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>cosh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a627e6f11bf5854ade9a5abfc344c0367</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae04b39cbc74f2e12e3609df7117b0394</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa0147ae59510af37efc4b8f79358324b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8cc51452067ce6730d1f68e524958638</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a709120e3c6fd81be98e3735856564f30</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a44b11744885ab2680da4093ba0b6cbf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4b143895b204800f62743554c297c740</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac78c95906920a6dcb53f8bd04e4adf85</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a964630f64e1c91a3c5c7418467e89ab5</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa5c3a077f1e50b351ca567219c17769c</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adeb982322a8a68b3ee9eb9d4e7bae468</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Solve&lt; Decomposition, RhsType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a28d9b053ae69eb1073030dc1a39a4c2f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8a45ed73a51bbffec202e504f842299</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a315e35a856733d37bc85d9c102aa4e01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a49e9a834666aa86e80f55b39926e04</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ad8f77004bb956b603bb43fd2e3c061</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab5768147536273eb2dbdfa389cfd26a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebdeedcf67e46d969c556c6c7d9780ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a13d4b8efbd7797ee8efd3dd988a7f7</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>ConstDiagonalDynamicIndexReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed11a711c0a3d5dbf8bc094008e29846</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>diagonalSize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab79e511b9322b8b801858e253fb257eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarBinaryOpTraits&lt; typename internal::traits&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::Scalar, typename internal::traits&lt; OtherDerived &gt;::Scalar &gt;::ReturnType</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>adfd32bf5fcf6ee603c924dde9bf7bc39</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a30430fa3d5b4e74d312fd4f502ac984d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixExponentialReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>exp</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a70901e189e876f64d7f3fee1dbe942cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad2fdb842d9a715f8778d0b33c29cfe49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>forceAlignedAccess</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afdaf810ac1708ca6d6ecdcfac1e06699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::add_const_on_value_type&lt; typename internal::conditional&lt; Enable, ForceAlignedAccess&lt; Solve&lt; Decomposition, RhsType &gt; &gt;, Solve&lt; Decomposition, RhsType &gt; &amp; &gt;::type &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af42d92f115d4b8fa3d5aa731ed496ed1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Enable, ForceAlignedAccess&lt; Solve&lt; Decomposition, RhsType &gt; &gt;, Solve&lt; Decomposition, RhsType &gt; &amp; &gt;::type</type>
      <name>forceAlignedAccessIf</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae35213d1dd4dd13ebe9a7a762d6bb847</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FullPivHouseholderQR&lt; PlainObject &gt;</type>
      <name>fullPivHouseholderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a863bc0e06b641a089508eabec6835ab2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; PlainObject &gt;</type>
      <name>fullPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a25da97d31acab0ee5d9d13bdbb0569da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HouseholderQR&lt; PlainObject &gt;</type>
      <name>householderQr</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9a9377aab1cea26db5f25bab7e682f8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a32222d3b6677e6cdf0b801463f329b72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7712eb69e8ea3c8f7b8da1c44dbdeebf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDiagonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97027ea54c8cd1ddb1c578fee5cedc67</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4ccbd8dfa06e9d47b9bf84711f8b9d40</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLowerTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1e96c42d79a56f0a6ade30ce031e17eb</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOrthogonal</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aefdc8e4e4c156fdd79a21479e75dcd8a</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnitary</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a7ee34ce202cac3eeea9cf20c9e4833</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUpperTriangular</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aae3ec1660bb4ac584220481c54ab4a64</anchor>
      <arglist>(const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; PlainObject &gt;</type>
      <name>jacobiSvd</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5745dca9c54390633b434e54a1d1eedd</anchor>
      <arglist>(unsigned int computationOptions=0) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, OtherDerived, LazyProduct &gt;</type>
      <name>lazyProduct</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ae0c280b1066c14ed577021f38876527f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ecf058a0727a4cab8b42d79e95072e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90c45f7a30265df792d5aeaddead2635</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixLogarithmReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>log</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a4dc57b319fc1cf8c9035016e56602a7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a72586ab059e889e7d2894ff227747e35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>lu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>afb312afbfe960cbda67811552d876fae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholder</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a13291e900f7e81ddc6e5b8802f82092b</anchor>
      <arglist>(EssentialPart &amp;essential, Scalar &amp;tau, RealScalar &amp;beta) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeHouseholderInPlace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aebf4bac7dffe2685ab93734fb776e817</anchor>
      <arglist>(Scalar &amp;tau, RealScalar &amp;beta)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>matrixFunction</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1a6cc9f734eb175e785a1118305245fc</anchor>
      <arglist>(StemFunction f) const</arglist>
    </member>
    <member kind="function">
      <type>NoAlias&lt; Solve&lt; Decomposition, RhsType &gt;, Eigen::MatrixBase &gt;</type>
      <name>noalias</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2c1085de7645f23f240876388457da0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a196c4ec3c8ffdf5bda45d0f617154975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad16303c47ba36f7a41ea264cb26bceb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a5cf2fd4c57e59604fd4116158fd34308</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a77992010f41a97b8865afc065fc469b3</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Solve&lt; Decomposition, RhsType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>abb3ea15fbce5b5e90fbde6974936549d</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a54c1f5ec6050248bd3434b4024ee23e6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Solve&lt; Decomposition, RhsType &gt;, DiagonalDerived, LazyProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a3636e277679555391a67857b7ef6c59c</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;diagonal) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aaa2fc32463392a7488686e6f3007f278</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a028c7ac8094d610042fd0f9feca68f63</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acc4d02dad6db83c4235dafbaaebe140f</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a983cc3be0bbe11b3d041a415b76ce010</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aed6b17344c30a260af7c570e3367fd71</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a1042124b0ddee66e78ac7b0a9ac4cc9c</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Solve&lt; Decomposition, RhsType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a2d1864d9378be2cc8ab7b47bf9f8bb4f</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a373bf62ad398162df5a71963ed7cbeff</anchor>
      <arglist>(const MatrixBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a80e3e1e83fdf43f9f7fb6ff51836b24d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0ff9bc0b9bea2d0822a2bf3192783102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Solve&lt; Decomposition, RhsType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6f44fface70a468cf9df2a4b33448298</anchor>
      <arglist>(const Eigen::MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; PlainObject &gt;</type>
      <name>partialPivLu</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a6199d8aaf26c1b8ac3097fdfa7733a1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixPowerReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a7ae6c25e6a94a60e147741e76203a73b</anchor>
      <arglist>(const RealScalar &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixComplexPowerReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>pow</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a91dcacf224bd8b18346914bdf7eefc31</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template ConstSelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a67eb836f331d9b567e7f36ec0782fa07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template SelfAdjointViewReturnType&lt; UpLo &gt;::Type</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad446541377593656c1399862fe6a0f94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a18e969adfdf2db4ac44c47fbdc854683</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a97dec020729928e328fe8ae9aad1e99e</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7cf3e0e69550d36de8778b09a645afd</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>Solve&lt; Decomposition, RhsType &gt; &amp;</type>
      <name>setUnit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a90bed3b6468a17a9054b07cde7a751a6</anchor>
      <arglist>(Index newSize, Index i)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sin</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a02f4ff0fcbbae2f3ccaa5981e8ad5e34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixFunctionReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sinh</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9c37eab2dc7baf83809269254c9129e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixSquareRootReturnValue&lt; Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>sqrt</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad873dca860bd47baeeede8663e161b83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac8da566526419f9742a6c471bbd87e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ab84d3e64f855813b1eea4202c0697dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stableNormalize</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a0b1443fa322615379557ade3399a3c3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const PlainObject</type>
      <name>stableNormalized</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a399dca938633b9f8df5ec4beefeccec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>trace</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a544b609f65eb2bd3e368b3fc2d79479e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template TriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a56665aa894f49f2765291fee0eaeb9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MatrixBase&lt; Solve&lt; Decomposition, RhsType &gt; &gt;::template ConstTriangularViewReturnType&lt; Mode &gt;::Type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aa044521145e74117ad1df42460d7b520</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a98bb9a0f705c6dfde85b0bfff31bf88f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IdentityReturnType</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>acf33ce20ef03ead47cb3dbcd5f416ede</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ac7a03a61014f37ddd2fe61ebac0c9539</anchor>
      <arglist>(Index size, Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>Unit</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a9daf6d22d10ed8ae00432b0f641455df</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitW</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>af56ba94e5b0330827003eadd26cfadc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitX</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a8a555b7cf626cced54670b98668c4e6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitY</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>a00850083489e20249b1d05b394fc5efc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const BasisReturnType</type>
      <name>UnitZ</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>aabdcdeff1c822a5465fcbe1f78e5afe0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Solve&lt; Decomposition, RhsType &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1MatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::MatrixWrapper</name>
    <filename>classEigen_1_1MatrixWrapper.html</filename>
    <templarg></templarg>
    <base>MatrixBase&lt; MatrixWrapper&lt; ExpressionType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>a780b21d85415ae4849a914f522d531c4</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1MatrixWrapper.html</anchorfile>
      <anchor>a9579312bf37b956c95a56a47f1a0f5a0</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::MatrixXpr</name>
    <filename>structEigen_1_1MatrixXpr.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::MetisOrdering</name>
    <filename>classEigen_1_1MetisOrdering.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NaturalOrdering</name>
    <filename>classEigen_1_1NaturalOrdering.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1NaturalOrdering.html</anchorfile>
      <anchor>aa39e772105ed66da9e909f2a9385be37</anchor>
      <arglist>(const MatrixType &amp;, PermutationType &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::NestByValue</name>
    <filename>classEigen_1_1NestByValue.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NoAlias</name>
    <filename>classEigen_1_1NoAlias.html</filename>
    <templarg>ExpressionType</templarg>
    <templarg>StorageBase</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::NumTraits</name>
    <filename>structEigen_1_1NumTraits.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>NumTraits&lt; Scalar &gt;</name>
    <filename>structEigen_1_1NumTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>NumTraits&lt; typename MatrixType::Scalar &gt;</name>
    <filename>structEigen_1_1NumTraits.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::OuterStride</name>
    <filename>classEigen_1_1OuterStride.html</filename>
    <templarg>Value</templarg>
    <base>Stride&lt; Value, 0 &gt;</base>
  </compound>
  <compound kind="class">
    <name>Eigen::ParametrizedLine</name>
    <filename>classEigen_1_1ParametrizedLine.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_AmbientDim</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a3c9f84dd8608940282b16652a296c764</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; ParametrizedLine, ParametrizedLine&lt; NewScalarType, AmbientDimAtCompileTime, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>acd906e5340b05a41e098496aa861e5a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>dim</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a68d562318c269edaa8ecb7aca98706d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>distance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a25c3e5822420b850e92023cec644c0a0</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>_Scalar</type>
      <name>intersection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a980dc8dc59ea6de2fb496055181a1d08</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>_Scalar</type>
      <name>intersectionParameter</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>af1d5100ee79a651e97ef716ad1af2ebe</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>intersectionPoint</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a0ebbede4dd8f60da43128af9aabf0ead</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>adb58b8eb1d9a81a4b02b7bbbebd84413</anchor>
      <arglist>(const ParametrizedLine &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a43e71a77728409e15220495dc9724f04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a5261e771f71d975eaa9ebf8bc598129b</anchor>
      <arglist>(Index _dim)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a9ae3a16ee1d2a6cf09f45007451fa148</anchor>
      <arglist>(const VectorType &amp;origin, const VectorType &amp;direction)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a3f26a2ac6fe39d39ba72e148f0f877ad</anchor>
      <arglist>(const Hyperplane&lt; _Scalar, _AmbientDim, OtherOptions &gt; &amp;hyperplane)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParametrizedLine</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>abf4318b4e0c2469e83ab049c9c177b80</anchor>
      <arglist>(const ParametrizedLine&lt; OtherScalarType, AmbientDimAtCompileTime, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>pointAt</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a925fd2bd7ce6927de196859f2f5bec41</anchor>
      <arglist>(const Scalar &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>VectorType</type>
      <name>projection</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a37c3fe8af9a90adce20b1f6ee62c04ea</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>squaredDistance</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a5cb6544a7fff4c3571c0a5eb82eec8bb</anchor>
      <arglist>(const VectorType &amp;p) const</arglist>
    </member>
    <member kind="function">
      <type>ParametrizedLine &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a1c2a0ceacef80e76b71f56992a721e6a</anchor>
      <arglist>(const MatrixBase&lt; XprType &gt; &amp;mat, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function">
      <type>ParametrizedLine &amp;</type>
      <name>transform</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a09d711ff37c2f421c65f398b9c7120b1</anchor>
      <arglist>(const Transform&lt; Scalar, AmbientDimAtCompileTime, Affine, TrOptions &gt; &amp;t, TransformTraits traits=Affine)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ParametrizedLine</type>
      <name>Through</name>
      <anchorfile>classEigen_1_1ParametrizedLine.html</anchorfile>
      <anchor>a9e6c2b409eae9da4f66439fff8d4ffcc</anchor>
      <arglist>(const VectorType &amp;p0, const VectorType &amp;p1)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLDLT</name>
    <filename>classEigen_1_1PardisoLDLT.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLLT</name>
    <filename>classEigen_1_1PardisoLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::PardisoLU</name>
    <filename>classEigen_1_1PardisoLU.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoLU.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PardisoLU.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialPivLU</name>
    <filename>classEigen_1_1PartialPivLU.html</filename>
    <templarg>_MatrixType</templarg>
    <base>SolverBase&lt; PartialPivLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a54c3d39c9b46ff485a8d2140b9b23193</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Inverse&lt; PartialPivLU &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>aef983470f92aba829e861e32e68681b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>abea0d7e51c5591a6db152eade0892d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a5c04818d354f94a98786d8a44cb709c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>acf892c12d8a229b32bddc3149e32e63a</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>acf37214aebb54d0e186ae39ac6c41bdf</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PartialPivLU</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a4efc917d31d0e9d76781a97509309061</anchor>
      <arglist>(EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a1c637530b3215787668a75ebb2e7b882</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>rcond</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a472b46d5d9ff7c328e1dccc13805f690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>reconstructedMatrix</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>aba7f1ee83537b0d240ebf206503a4920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PartialPivLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1PartialPivLU.html</anchorfile>
      <anchor>a49247bd2f742a46bca1f9c2bf1b19ad8</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PartialReduxExpr</name>
    <filename>classEigen_1_1PartialReduxExpr.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Direction</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLDLT</name>
    <filename>classEigen_1_1PastixLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a01947862303ca404b9ce5033751a221b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>abf3135c2dc17d9df26fef80e6456a691</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLDLT.html</anchorfile>
      <anchor>a182b0ee676a131413363cc73bc309ef7</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLLT</name>
    <filename>classEigen_1_1PastixLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a671e8444ae2f04db3565e35caa958667</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a54fcdef53903851e2d8113a6ed330b5c</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLLT.html</anchorfile>
      <anchor>a63dac317804b18a4704a519d7bdfaaff</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PastixLU</name>
    <filename>classEigen_1_1PastixLU.html</filename>
    <templarg></templarg>
    <templarg>IsStrSym</templarg>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>abae3ca7f1254106d9e2d5e0f273189fa</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>adc28ee2550086c7bdfe991d624bde2ee</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1PastixLU.html</anchorfile>
      <anchor>ac178a87b499a2210a402787fbfd98f26</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationBase</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6081ae9241382cc27c32da6bb1786367</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a98b48bb723276fefd8ca7d7b14255ed4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0fb5d478cbe66c99d1b9bb6d88093aed</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6081ae9241382cc27c32da6bb1786367</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a98b48bb723276fefd8ca7d7b14255ed4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt;, _PacketAccess &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0fb5d478cbe66c99d1b9bb6d88093aed</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6081ae9241382cc27c32da6bb1786367</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a98b48bb723276fefd8ca7d7b14255ed4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0fb5d478cbe66c99d1b9bb6d88093aed</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</name>
    <filename>classEigen_1_1PermutationBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheLeft</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a4e3455bf12b56123e38a8220c6b508dc</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>applyTranspositionOnTheRight</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a5f98da0712570d0c4b12f61839ae4193</anchor>
      <arglist>(Index i, Index j)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a26961ef6cfef586d412054ee5a20d430</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a1fc7a5823544700c2e0795e87f9c6d09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adec727546b6882ecaa57e76d084951c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a16fa3afafdf703399d62c80f950802f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>adb9af427f317202366c2832876064eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6081ae9241382cc27c32da6bb1786367</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a98b48bb723276fefd8ca7d7b14255ed4</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a8e15540549c5a4e2d5b3b426fef8fbcf</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationWrapper&lt; _IndicesType &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acaa7cce9ea62c811cec12e86dbb2f0de</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0e0fda6e84d69e02432e4770359bb532</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>acd7ed28ee514287f933de8467768925b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a6805bb75fd7966ea71895c24ff196444</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a830a80511a61634ef437795916f7f8da</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a2216f9ce7b453ac39c46ff0323daeac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixType</type>
      <name>toDenseMatrix</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>addfa91a2c2c69c76159f1091368a505f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InverseReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a05805e9f4182eec3f6632e1c765b5ffe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend PlainPermutationType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1PermutationBase.html</anchorfile>
      <anchor>a0fb5d478cbe66c99d1b9bb6d88093aed</anchor>
      <arglist>(const InverseImpl&lt; Other, PermutationStorage &gt; &amp;other, const PermutationBase &amp;perm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationMatrix</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg>_StorageIndex</templarg>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; ColsAtCompileTime, MaxColsAtCompileTime &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>Eigen::PermutationBase</base>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PermutationMatrix&lt; RowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1PermutationMatrix.html</filename>
    <base>PermutationBase&lt; PermutationMatrix&lt; SizeAtCompileTime, MaxSizeAtCompileTime, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a2f1ab379207fcd1ceb33941e25cf50c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>ac089ead468a58d75f276ad2b253578c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aeced50f1c3a43b3e4b3de76d57e9c46a</anchor>
      <arglist>(const PermutationBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>PermutationMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a75cdc77886972636637f22c41216feb9</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>aea29eab1fd6a6562971db7b9c04c11aa</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a7ae7016a606b08573013115dcf2e56f2</anchor>
      <arglist>(const PermutationBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a204b8bbba3c4d33c1a24bb60ad72b202</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PermutationMatrix</name>
      <anchorfile>classEigen_1_1PermutationMatrix.html</anchorfile>
      <anchor>a0b9a4e51bea9c778a38f6e89db484af4</anchor>
      <arglist>(const TranspositionsBase&lt; Other &gt; &amp;tr)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::PermutationStorage</name>
    <filename>structEigen_1_1PermutationStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::PermutationWrapper</name>
    <filename>classEigen_1_1PermutationWrapper.html</filename>
    <templarg></templarg>
    <base>PermutationBase&lt; PermutationWrapper&lt; _IndicesType &gt; &gt;</base>
    <member kind="function">
      <type>const internal::remove_all&lt; typename IndicesType::Nested &gt;::type &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1PermutationWrapper.html</anchorfile>
      <anchor>a88ae93cc14c136b2eec4a286b4c10c34</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::PlainObjectBase</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Derived &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Array&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PlainObjectBase&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</name>
    <filename>classEigen_1_1PlainObjectBase.html</filename>
    <base>Eigen::doxygen::dense_xpr_base_dispatcher&lt; Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &gt;</base>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a954cd075bcd7babb429e3e4b9a418651</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac99d445913f04acc50280ae99dffd9c3</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a992d58b5453e441dcfc80f21c2bfd1d7</anchor>
      <arglist>(Index rowId, Index colId)</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a72e84dc1bb573ad8ecc9109fbbc1b63b</anchor>
      <arglist>(Index index)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a038a419ccb6e2c55593b27f17626fd62</anchor>
      <arglist>(Index rowId, Index colId) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a541526a4f452554785e78bc41287b348</anchor>
      <arglist>(Index index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a712c25be1652e5a64a00f28c8ed11462</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8c9b27a1df4d180b9fb5755bebea2dbd</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afc474a09ec9704629b795d7907fb6c37</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a78a42a7c0be768374781f67f40c9ab0d</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a4ece7540eda6a1ae7d3730397ce72bec</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ac54123f62de4c46a9107ff53890b6116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad12a492bcadea9b65ccd9bc8404c01f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>lazyAssign</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a70fc6030f9ee72fbe0b3adade2a4a2bd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>afbf3af8d6195c9b1b2103c2dd1231247</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad90648194e9fa6a0e1296ba1e4db8787</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a9fd0703bd7bfe89d6dc80e2ce87c312a</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8bee1e51417bfa386dd54b37f6d9e2fe</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a0dd078df3ff8b3833723ce84ce519651</anchor>
      <arglist>(NoChange_t, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ae4bbe4c06c1feb1035573eee7f5c3623</anchor>
      <arglist>(Index rows, NoChange_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resizeLike</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aabf64c98e5415ad39828a83cc5bdac40</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;_other)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>aac6bc5261783ec3008a51c2654de73e8</anchor>
      <arglist>(Index size, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>af9996d6a98f45e84a908dc9851c8332e</anchor>
      <arglist>(Index rows, Index cols, const Scalar &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8700dc6d8e05436c0b34ae15ca9274a5</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>ad06b9d8ddac261a871c9ff550a925975</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a5f0f6cc8039ed5ac026cd32ed5bbe6ea</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setRandom</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8921e8a7f9a5ea167231d29f8feb8700</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>acc39eaf7ba22b725c86f1b9b8bb57c3c</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73ab57abb640bf35e0dbf9dba225a1db</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Matrix&lt; _Scalar, _Rows, _Cols, _Options, _MaxRows, _MaxCols &gt; &amp;</type>
      <name>_set</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a09c4b519ee4c635144581e9fe03b6174</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a520234520136dffad88301a507da4fa5</anchor>
      <arglist>(const PlainObjectBase &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a73dca0493df0fe4f8e518e379a80cbdd</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a8fa7e42fd02b266ac54d57cdc735e83d</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PlainObjectBase</name>
      <anchorfile>classEigen_1_1PlainObjectBase.html</anchorfile>
      <anchor>a281044f167c388339c2d704e5d292fa5</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Product</name>
    <filename>classEigen_1_1Product.html</filename>
    <templarg>_Lhs</templarg>
    <templarg>_Rhs</templarg>
    <templarg>Option</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Quaternion</name>
    <filename>classEigen_1_1Quaternion.html</filename>
    <templarg></templarg>
    <templarg>_Options</templarg>
    <base>QuaternionBase&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;</base>
    <member kind="function">
      <type>Quaternion&lt; Scalar, Options &gt;</type>
      <name>FromTwoVectors</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>acdb1eb44eb733b24749bc7892badde64</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>abf659c4044ea281b399ca2e3420d710a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>ad30f4da9a2c0c8dd95520ee8a6d14ef6</anchor>
      <arglist>(const Scalar &amp;w, const Scalar &amp;x, const Scalar &amp;y, const Scalar &amp;z)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>af8c298da20d235d1c8029b73acbef6f9</anchor>
      <arglist>(const Scalar *data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a1e8d6929381eca05005fa77e0bf92400</anchor>
      <arglist>(const QuaternionBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a8a827dc86c80446a77eebba0e8a9e3e4</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>aba694e0bbafcf5554b77cfe8ce69c14a</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Quaternion</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a966673475496b60ea5ccdd0ed07249da</anchor>
      <arglist>(const Quaternion&lt; OtherScalar, OtherOptions &gt; &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion</type>
      <name>UnitRandom</name>
      <anchorfile>classEigen_1_1Quaternion.html</anchorfile>
      <anchor>a7da87cda5567ff1e860782d638643868</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::QuaternionBase</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <templarg>Derived</templarg>
    <base>RotationBase&lt; Derived, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aed266c63b10a4028304901d9c8614199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac3972e6cb0f56cccbe9e3946a7e494f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a974c0529d55983b0b3a6d99a8466f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aabef1f6fc62535f6f85d590108915ee8</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a74f13d7c853484996494c26c633ae02a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Derived, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a951d627764be63ca1e8c2c4c7315e43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a193e79f616335a0067e3e784c7cf85fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Derived &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae61294790c0cc308d3f69690a657672c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e63b775d0a93161ce6137ec0a17f6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2d22c5b321c9539dd625ca415422236</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab12ee41b3b06adc3062217a795a6a9f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a64bc41c96a9e99567e0f8409f8f0f680</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad4b1faef1eabdc7fdd4d305e9881149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7a487a8a129b46be562f42044102c1f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ade799f18b7ec19c02ddae3a4921fa8a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa92a939409ccc2ccc65ec423ef828f7e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8692cdad24f5047c214d3dd52267d670</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7c114c6e62a37d4fc53b6e82ed78eac</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20a6702c9da3fc2950178d920d0aaf84</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7ae84bfbcc9f3f19f10294496a836bee</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4695b0f6eebfb217ae2fbd579ceda24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Derived &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac840bde67d22f2deca330561c65d144e</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a09730db4ef0b546f5cf29f6b180b3c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8cf07ab9875baba2eecdd62ff93bfc3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ada8bdb403471df23511bdc0f227962ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a91f93bde88f52796cfcd92c3594f39e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab5eae91bedac0afaab0074cec5e535bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad884cf20a0b0b92bb63ab3fe9d6d6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>afdd8e260d5de861a6136cb9e6ceaa4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8b05bac2a1c099b341396f725e85f3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad37efca5d9fde3f4cb03a208f38d74f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6005245a72520df258d30af6b5448595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8389b65a61aa3fc76d3ba4bd4a63e529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a9afed6a7fa4fcdfbe599d7b5b207fc1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6f31a6f98016f186515b3277f4757962</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuaternionBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <base>RotationBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aed266c63b10a4028304901d9c8614199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac3972e6cb0f56cccbe9e3946a7e494f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a974c0529d55983b0b3a6d99a8466f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aabef1f6fc62535f6f85d590108915ee8</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a74f13d7c853484996494c26c633ae02a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a951d627764be63ca1e8c2c4c7315e43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a193e79f616335a0067e3e784c7cf85fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae61294790c0cc308d3f69690a657672c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e63b775d0a93161ce6137ec0a17f6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2d22c5b321c9539dd625ca415422236</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab12ee41b3b06adc3062217a795a6a9f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a64bc41c96a9e99567e0f8409f8f0f680</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad4b1faef1eabdc7fdd4d305e9881149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7a487a8a129b46be562f42044102c1f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ade799f18b7ec19c02ddae3a4921fa8a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa92a939409ccc2ccc65ec423ef828f7e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8692cdad24f5047c214d3dd52267d670</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7c114c6e62a37d4fc53b6e82ed78eac</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20a6702c9da3fc2950178d920d0aaf84</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7ae84bfbcc9f3f19f10294496a836bee</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4695b0f6eebfb217ae2fbd579ceda24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac840bde67d22f2deca330561c65d144e</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a09730db4ef0b546f5cf29f6b180b3c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8cf07ab9875baba2eecdd62ff93bfc3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ada8bdb403471df23511bdc0f227962ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a91f93bde88f52796cfcd92c3594f39e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab5eae91bedac0afaab0074cec5e535bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad884cf20a0b0b92bb63ab3fe9d6d6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>afdd8e260d5de861a6136cb9e6ceaa4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8b05bac2a1c099b341396f725e85f3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad37efca5d9fde3f4cb03a208f38d74f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6005245a72520df258d30af6b5448595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8389b65a61aa3fc76d3ba4bd4a63e529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a9afed6a7fa4fcdfbe599d7b5b207fc1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6f31a6f98016f186515b3277f4757962</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuaternionBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <base>RotationBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aed266c63b10a4028304901d9c8614199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac3972e6cb0f56cccbe9e3946a7e494f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a974c0529d55983b0b3a6d99a8466f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aabef1f6fc62535f6f85d590108915ee8</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a74f13d7c853484996494c26c633ae02a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a951d627764be63ca1e8c2c4c7315e43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a193e79f616335a0067e3e784c7cf85fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae61294790c0cc308d3f69690a657672c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e63b775d0a93161ce6137ec0a17f6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2d22c5b321c9539dd625ca415422236</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab12ee41b3b06adc3062217a795a6a9f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a64bc41c96a9e99567e0f8409f8f0f680</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad4b1faef1eabdc7fdd4d305e9881149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7a487a8a129b46be562f42044102c1f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ade799f18b7ec19c02ddae3a4921fa8a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa92a939409ccc2ccc65ec423ef828f7e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8692cdad24f5047c214d3dd52267d670</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7c114c6e62a37d4fc53b6e82ed78eac</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20a6702c9da3fc2950178d920d0aaf84</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7ae84bfbcc9f3f19f10294496a836bee</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4695b0f6eebfb217ae2fbd579ceda24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac840bde67d22f2deca330561c65d144e</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a09730db4ef0b546f5cf29f6b180b3c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8cf07ab9875baba2eecdd62ff93bfc3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ada8bdb403471df23511bdc0f227962ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a91f93bde88f52796cfcd92c3594f39e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab5eae91bedac0afaab0074cec5e535bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad884cf20a0b0b92bb63ab3fe9d6d6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>afdd8e260d5de861a6136cb9e6ceaa4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8b05bac2a1c099b341396f725e85f3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad37efca5d9fde3f4cb03a208f38d74f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6005245a72520df258d30af6b5448595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8389b65a61aa3fc76d3ba4bd4a63e529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a9afed6a7fa4fcdfbe599d7b5b207fc1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6f31a6f98016f186515b3277f4757962</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>QuaternionBase&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;</name>
    <filename>classEigen_1_1QuaternionBase.html</filename>
    <base>RotationBase&lt; Quaternion&lt; _Scalar, _Options &gt;, 3 &gt;</base>
    <member kind="typedef">
      <type>AngleAxis&lt; Scalar &gt;</type>
      <name>AngleAxisType</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aed266c63b10a4028304901d9c8614199</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 3 &gt;</type>
      <name>Matrix3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac3972e6cb0f56cccbe9e3946a7e494f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>Vector3</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a974c0529d55983b0b3a6d99a8466f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Vector3</type>
      <name>_transformVector</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aabef1f6fc62535f6f85d590108915ee8</anchor>
      <arglist>(const Vector3 &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Scalar</type>
      <name>angularDistance</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a74f13d7c853484996494c26c633ae02a</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Quaternion&lt; _Scalar, _Options &gt;, Quaternion&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a951d627764be63ca1e8c2c4c7315e43f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a193e79f616335a0067e3e784c7cf85fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Coefficients &amp;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ae61294790c0cc308d3f69690a657672c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a5e63b775d0a93161ce6137ec0a17f6b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>dot</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa2d22c5b321c9539dd625ca415422236</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab12ee41b3b06adc3062217a795a6a9f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a64bc41c96a9e99567e0f8409f8f0f680</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other, const RealScalar &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad4b1faef1eabdc7fdd4d305e9881149</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7a487a8a129b46be562f42044102c1f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; Scalar &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ade799f18b7ec19c02ddae3a4921fa8a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Scalar &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa92a939409ccc2ccc65ec423ef828f7e</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt; &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8692cdad24f5047c214d3dd52267d670</anchor>
      <arglist>(const QuaternionBase&lt; OtherDerived &gt; &amp;q)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aa7c114c6e62a37d4fc53b6e82ed78eac</anchor>
      <arglist>(const AngleAxisType &amp;aa)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a20a6702c9da3fc2950178d920d0aaf84</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt; &amp;</type>
      <name>setFromTwoVectors</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a7ae84bfbcc9f3f19f10294496a836bee</anchor>
      <arglist>(const MatrixBase&lt; Derived1 &gt; &amp;a, const MatrixBase&lt; Derived2 &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>QuaternionBase &amp;</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a4695b0f6eebfb217ae2fbd579ceda24a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; typename internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Scalar &gt;</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ac840bde67d22f2deca330561c65d144e</anchor>
      <arglist>(const Scalar &amp;t, const QuaternionBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a09730db4ef0b546f5cf29f6b180b3c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix3</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8cf07ab9875baba2eecdd62ff93bfc3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VectorBlock&lt; const Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ada8bdb403471df23511bdc0f227962ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VectorBlock&lt; Coefficients, 3 &gt;</type>
      <name>vec</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a91f93bde88f52796cfcd92c3594f39e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ab5eae91bedac0afaab0074cec5e535bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>w</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>ad884cf20a0b0b92bb63ab3fe9d6d6b7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>afdd8e260d5de861a6136cb9e6ceaa4b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>x</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8b05bac2a1c099b341396f725e85f3b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>aad37efca5d9fde3f4cb03a208f38d74f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>y</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6005245a72520df258d30af6b5448595</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a8389b65a61aa3fc76d3ba4bd4a63e529</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstCoeffReturnType</type>
      <name>z</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a9afed6a7fa4fcdfbe599d7b5b207fc1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Quaternion&lt; Scalar &gt;</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1QuaternionBase.html</anchorfile>
      <anchor>a6f31a6f98016f186515b3277f4757962</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealQZ</name>
    <filename>classEigen_1_1RealQZ.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a6201e534e901b5f4e66f72c176b534a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a2b6847964d9f1903193cc3e67c196849</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a36bd77afed89f3f5c110a715e69e4c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>afbecc6d0ab1de42be9db79428da48ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a212bc2f69ea4eff830fde70e209e40fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixS</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad24d7bf534afb55adaef00f00846adaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a8dc963d8ea2a17df9d8d718e9e34d06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a19a116383f11423179b4d8f316da6f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad8fb9235870a8361a2fdd8dcc2e80d01</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ac6e41c839f8dae31c9a3906ea7540119</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a30ae65666b1757e4a2b6a28eaec12226</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealQZ&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1RealQZ.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a6201e534e901b5f4e66f72c176b534a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a2b6847964d9f1903193cc3e67c196849</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a36bd77afed89f3f5c110a715e69e4c64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>iterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>afbecc6d0ab1de42be9db79428da48ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a212bc2f69ea4eff830fde70e209e40fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixS</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad24d7bf534afb55adaef00f00846adaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a8dc963d8ea2a17df9d8d718e9e34d06f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a19a116383f11423179b4d8f316da6f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ad8fb9235870a8361a2fdd8dcc2e80d01</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealQZ</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>ac6e41c839f8dae31c9a3906ea7540119</anchor>
      <arglist>(const MatrixType &amp;A, const MatrixType &amp;B, bool computeQZ=true)</arglist>
    </member>
    <member kind="function">
      <type>RealQZ &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealQZ.html</anchorfile>
      <anchor>a30ae65666b1757e4a2b6a28eaec12226</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RealSchur</name>
    <filename>classEigen_1_1RealSchur.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a8bd4653e2d9569a44ecc95e746422d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a60caf9ffad11d728ea458c4dd36d0a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ac4acc917dcaddefae5f35acd2c536d65</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a99453076a9617a6af353b5b1f3220c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a386fd2b1a3a8401eca7183ac074deec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>abb78996b43b8642a5f507415730445cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a85622ccbecff99c8933d21f0a22b22bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a826c83e2f1d4c8332606a14ea121ff5f</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>afef4d3dc5a493aca2760c20b34337016</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ad189e8776ee20a12046694f98b354322</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a5cf45fb60964a3e7ea3a6718a8d7acdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RealSchur&lt; MatrixType &gt;</name>
    <filename>classEigen_1_1RealSchur.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a8bd4653e2d9569a44ecc95e746422d3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a60caf9ffad11d728ea458c4dd36d0a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>computeFromHessenberg</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ac4acc917dcaddefae5f35acd2c536d65</anchor>
      <arglist>(const HessMatrixType &amp;matrixH, const OrthMatrixType &amp;matrixQ, bool computeU)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>getMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a99453076a9617a6af353b5b1f3220c25</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a386fd2b1a3a8401eca7183ac074deec8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>abb78996b43b8642a5f507415730445cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a85622ccbecff99c8933d21f0a22b22bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a826c83e2f1d4c8332606a14ea121ff5f</anchor>
      <arglist>(Index size=RowsAtCompileTime==Dynamic ? 1 :RowsAtCompileTime)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealSchur</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>afef4d3dc5a493aca2760c20b34337016</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, bool computeU=true)</arglist>
    </member>
    <member kind="function">
      <type>RealSchur &amp;</type>
      <name>setMaxIterations</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>ad189e8776ee20a12046694f98b354322</anchor>
      <arglist>(Index maxIters)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterationsPerRow</name>
      <anchorfile>classEigen_1_1RealSchur.html</anchorfile>
      <anchor>a5cf45fb60964a3e7ea3a6718a8d7acdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref</name>
    <filename>classEigen_1_1Ref.html</filename>
    <templarg>PlainObjectType</templarg>
    <templarg>Options</templarg>
    <templarg>StrideType</templarg>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref.html</anchorfile>
      <anchor>a037addaa81f13e5765e30a92d2c4f2b1</anchor>
      <arglist>(DenseBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ref&lt; const KLUMatrixType, StandardCompressedFormat &gt;</name>
    <filename>classEigen_1_1Ref.html</filename>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref.html</anchorfile>
      <anchor>a037addaa81f13e5765e30a92d2c4f2b1</anchor>
      <arglist>(DenseBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Ref&lt; const UmfpackMatrixType, StandardCompressedFormat &gt;</name>
    <filename>classEigen_1_1Ref.html</filename>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref.html</anchorfile>
      <anchor>a037addaa81f13e5765e30a92d2c4f2b1</anchor>
      <arglist>(DenseBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref&lt; SparseMatrixType, Options &gt;</name>
    <filename>classEigen_1_1Ref_3_01SparseMatrixType_00_01Options_01_4.html</filename>
    <templarg></templarg>
    <templarg>Options</templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref_3_01SparseMatrixType_00_01Options_01_4.html</anchorfile>
      <anchor>a5a27af935f839a42d85421f5cce99a68</anchor>
      <arglist>(SparseCompressedBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Ref&lt; SparseVectorType &gt;</name>
    <filename>classEigen_1_1Ref_3_01SparseVectorType_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</base>
    <member kind="function">
      <type></type>
      <name>Ref</name>
      <anchorfile>classEigen_1_1Ref_3_01SparseVectorType_01_4.html</anchorfile>
      <anchor>a125c83639030247f78157fa606c03f56</anchor>
      <arglist>(SparseCompressedBase&lt; Derived &gt; &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Replicate</name>
    <filename>classEigen_1_1Replicate.html</filename>
    <templarg></templarg>
    <templarg>RowFactor</templarg>
    <templarg>ColFactor</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Reshaped</name>
    <filename>classEigen_1_1Reshaped.html</filename>
    <templarg></templarg>
    <templarg>Rows</templarg>
    <templarg>Cols</templarg>
    <templarg>Order</templarg>
    <member kind="function">
      <type></type>
      <name>Reshaped</name>
      <anchorfile>classEigen_1_1Reshaped.html</anchorfile>
      <anchor>a6de25b03b93cb3dc55ba7fcafae87984</anchor>
      <arglist>(XprType &amp;xpr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Reshaped</name>
      <anchorfile>classEigen_1_1Reshaped.html</anchorfile>
      <anchor>a26f25c9bc61d72ae9db5d62112d4a26a</anchor>
      <arglist>(XprType &amp;xpr, Index reshapeRows, Index reshapeCols)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Reverse</name>
    <filename>classEigen_1_1Reverse.html</filename>
    <templarg></templarg>
    <templarg>Direction</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::Rotation2D</name>
    <filename>classEigen_1_1Rotation2D.html</filename>
    <templarg></templarg>
    <base>RotationBase&lt; Rotation2D&lt; _Scalar &gt;, 2 &gt;</base>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ac20c665ece0f197a712a2a39ae72e4e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ab1296dc7fcb23fdcd2c8e648e87d5d6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>angle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ab3cde04b655d42682d1f79952f8ef2f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Rotation2D, Rotation2D&lt; NewScalarType &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a66445e2faf7f98d535fd5a8bf0a974e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D&lt; Scalar &gt; &amp;</type>
      <name>fromRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a3e00ee4d983879c32d615b2a7153a26d</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a5c01f57e3a382c7f677ac9ff3b95aea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a9c6889cb1a96ab8549effc94bfa06cd6</anchor>
      <arglist>(const Rotation2D &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a05cb9986707811f4580c022564cc697e</anchor>
      <arglist>(const Rotation2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Vector2</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ad1be70bfa24c38b278f277dfbe57056e</anchor>
      <arglist>(const Vector2 &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a73f733685b7a0da1f9bdf37e0ac1f64a</anchor>
      <arglist>(const Rotation2D &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a9d3da523c37f4ef0574f35fd7b3b9662</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>afac7b8ec55325568e7c374df672d1eb1</anchor>
      <arglist>(const Scalar &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a4628b82c613b7b85010afd45ea0477a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a566207478cb88f9335c912d35913a0cd</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Rotation2D</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a3cae6e108a999fa1a4b358b3f467aa35</anchor>
      <arglist>(const Rotation2D&lt; OtherScalarType &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Rotation2D</type>
      <name>slerp</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ab9ceb217d03c6a2a6438be37a3ccd855</anchor>
      <arglist>(const Scalar &amp;t, const Rotation2D &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>smallestAngle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>ac648b9217d9f7ba4ee7a1a91aec8e46f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>smallestPositiveAngle</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a09c5195aa9a154551b2edf6ed4f22ab6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix2</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1Rotation2D.html</anchorfile>
      <anchor>a961167d84c8b9a989f2ba8609a6afcaf</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::RotationBase</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <templarg>Derived</templarg>
    <templarg>_Dim</templarg>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; AngleAxis&lt; _Scalar &gt;, 3 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; AngleAxis&lt; _Scalar &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>AngleAxis&lt; _Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; AngleAxis&lt; _Scalar &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const AngleAxis&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const AngleAxis&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; Derived, 3 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Derived</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Derived, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Derived &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, 3 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, 3 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; Quaternion&lt; _Scalar, _Options &gt;, 3 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Quaternion&lt; _Scalar, _Options &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Quaternion&lt; _Scalar, _Options &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Quaternion&lt; _Scalar, _Options &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Quaternion&lt; _Scalar, _Options &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Quaternion&lt; _Scalar, _Options &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RotationBase&lt; Rotation2D&lt; _Scalar &gt;, 2 &gt;</name>
    <filename>classEigen_1_1RotationBase.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>RotationMatrixType</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a83602509674c9d635551998460342951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Rotation2D&lt; _Scalar &gt; &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>af9b43eac462d7aa70b018efd49c13ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Rotation2D&lt; _Scalar &gt;</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a8532fb716ea4267cf8bbdb99e5e54837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a91b5bdb1c7b90ec7b33107c6f7d3b171</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a806eb8a4a30c34bb66533f455e0f8757</anchor>
      <arglist>(const Translation&lt; Scalar, Dim &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>afacd5bc71b353addcbb2ae54dd906fa3</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>internal::rotation_base_generic_product_selector&lt; Rotation2D&lt; _Scalar &gt;, OtherDerived, OtherDerived::IsVectorAtCompileTime &gt;::ReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a138f4cea5b119f616f880afcfbe1f112</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a9298defb23fa3e75e4f28d5297adb52c</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>RotationMatrixType</type>
      <name>toRotationMatrix</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a94fe3683c867c39d34505932b07e956a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend RotationMatrixType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>a20305dad97504ceffeecad1e7d091c65</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;l, const Rotation2D&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
    <member kind="friend">
      <type>friend Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1RotationBase.html</anchorfile>
      <anchor>ab99cec6ac4545b810f25045a91b3bd59</anchor>
      <arglist>(const DiagonalMatrix&lt; Scalar, Dim &gt; &amp;l, const Rotation2D&lt; _Scalar &gt; &amp;r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::ScalarBinaryOpTraits</name>
    <filename>structEigen_1_1ScalarBinaryOpTraits.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Scaling</name>
    <filename>classScaling.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::Select</name>
    <filename>classEigen_1_1Select.html</filename>
    <templarg>ConditionMatrixType</templarg>
    <templarg>ThenMatrixType</templarg>
    <templarg>ElseMatrixType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointEigenSolver</name>
    <filename>classEigen_1_1SelfAdjointEigenSolver.html</filename>
    <templarg>_MatrixType</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a8a59ab7734b6eae2754fd78bc7c3a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a5dae5f422a3c71060e6bd31332bf64fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::plain_col_type&lt; MatrixType, RealScalar &gt;::type</type>
      <name>RealVectorType</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>acd090d5fdfc3cc017a13b6d8daa92287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a0bfcedf4245b6846007ca4f01e4feb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>adf397f6bce9f93c4b0139a47e261fc24</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeDirect</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>afe520161701f5f585bcc4cedb8657bd1</anchor>
      <arglist>(const MatrixType &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointEigenSolver &amp;</type>
      <name>computeFromTridiagonal</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a297893df7098c43278d385e4d4e23fe4</anchor>
      <arglist>(const RealVectorType &amp;diag, const SubDiagonalType &amp;subdiag, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="function">
      <type>const RealVectorType &amp;</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a3df8721abcc71132f7f02bf9dfe78e41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EigenvectorsType &amp;</type>
      <name>eigenvectors</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a229c4c26d87c5d2663cd3cc8a4c68266</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a31e8a509231e57e684c53799693607ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorInverseSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>ae4b13fe4ce22faf74e50d346fc51a66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType</type>
      <name>operatorSqrt</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>aeeedb2ae618f21a4eb59465746c1cee5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a8f3dde67faa971dd97e8141617762326</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a825919ee41153a19910c72d1bff31c8e</anchor>
      <arglist>(Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelfAdjointEigenSolver</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a7d8cba55cce60cb3931148208cc5bd0e</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix, int options=ComputeEigenvectors)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>m_maxIterations</name>
      <anchorfile>classEigen_1_1SelfAdjointEigenSolver.html</anchorfile>
      <anchor>a9ba10b83f095b18dbea345db7304acfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SelfAdjointView</name>
    <filename>classEigen_1_1SelfAdjointView.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>UpLo</templarg>
    <base>TriangularBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</base>
    <member kind="typedef">
      <type>Matrix&lt; RealScalar, internal::traits&lt; MatrixType &gt;::ColsAtCompileTime, 1 &gt;</type>
      <name>EigenvaluesReturnType</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a8ae92703d920130b38a383f8b165146c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NumTraits&lt; Scalar &gt;::Real</type>
      <name>RealScalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af9f0234ebeae4c4ca512bcd5fb5e8bb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SelfAdjointView &gt;::Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>af52acc0942ece2de9b6db4a99cc6656e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1297532e129be85c6a9ff0c8ef735301</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aa4e1f964b34c76697bcdd3b54b84d814</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ab5b030515fcee3d1d4f84c0d9d13bd67</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a6671a26f31ead5f6e14d1d7d1221d9ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType::ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a9fcc7108054ac4a3b0ef758c794c16a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EigenvaluesReturnType</type>
      <name>eigenvalues</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad4f34424b4ea12de9bbc5623cb938b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LDLT&lt; PlainObject, UpLo &gt;</type>
      <name>ldlt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a644155eef17b37c95d85b9f65bb49ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LLT&lt; PlainObject, UpLo &gt;</type>
      <name>llt</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a405e810491642a7f7b785f2ad6f93619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SelfAdjointView, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad8772d0add87414fdab9a9a5b2cec63f</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>operatorNorm</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a12a7da482e31ec9c517dca92dd7bae61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a1b5afab9f9df919cba99d8ed1a260567</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const MatrixBase&lt; DerivedV &gt; &amp;v, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>acc37b0437e0eee05f861bce511df9c77</anchor>
      <arglist>(const MatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ad779637ca3e3aeff2d35e1806e59f7d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>a33950671584ae306fbdc1c23f010be88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt;(TriMode &amp;(Upper|Lower))==(UpLo &amp;(Upper|Lower)), TriangularView&lt; MatrixType, TriMode &gt;, TriangularView&lt; typename MatrixType::AdjointReturnType, TriMode &gt; &gt;::type</type>
      <name>triangularView</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>aacba330c3a12d1cac75c2f9df8c0f347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend const Product&lt; OtherDerived, SelfAdjointView &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SelfAdjointView.html</anchorfile>
      <anchor>ac455467448d3f1fd1257baae3f17d1e4</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholesky</name>
    <filename>classEigen_1_1SimplicialCholesky.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_UpLo</templarg>
    <templarg>_Ordering</templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>a6af3f64b855a96a2635302f863b5fd91</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialCholesky &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>a7883b49a88b26162ba6d8b044e2ee75b</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialCholesky.html</anchorfile>
      <anchor>ab1b21d430cc2a8e332221313a4f2f2e3</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialCholeskyBase</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::SparseSolverBase</base>
    <class kind="struct">Eigen::SimplicialCholeskyBase::keep_diag</class>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a3ac877f73aaaff670e6ae7554eb02fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aff1480e595a21726beaec9a586a94d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0e23d1f4a88c211be7098faf1cb41674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a362352f755101faaac59c1ed9d5e3559</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a098baba1dbe07ca3a775c8df1f8a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a9a741744dda2261cae26cddf96a35bf0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplicialCholeskyBase&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <base>SparseSolverBase&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a3ac877f73aaaff670e6ae7554eb02fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aff1480e595a21726beaec9a586a94d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0e23d1f4a88c211be7098faf1cb41674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a362352f755101faaac59c1ed9d5e3559</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a098baba1dbe07ca3a775c8df1f8a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a9a741744dda2261cae26cddf96a35bf0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplicialCholeskyBase&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <base>SparseSolverBase&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a3ac877f73aaaff670e6ae7554eb02fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aff1480e595a21726beaec9a586a94d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0e23d1f4a88c211be7098faf1cb41674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a362352f755101faaac59c1ed9d5e3559</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a098baba1dbe07ca3a775c8df1f8a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a9a741744dda2261cae26cddf96a35bf0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SimplicialCholeskyBase&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SimplicialCholeskyBase.html</filename>
    <base>SparseSolverBase&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a3ac877f73aaaff670e6ae7554eb02fc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationP</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>aff1480e595a21726beaec9a586a94d5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;</type>
      <name>permutationPinv</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a0e23d1f4a88c211be7098faf1cb41674</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &amp;</type>
      <name>setShift</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a362352f755101faaac59c1ed9d5e3559</anchor>
      <arglist>(const RealScalar &amp;offset, const RealScalar &amp;scale=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialCholeskyBase</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a098baba1dbe07ca3a775c8df1f8a0e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialCholeskyBase.html</anchorfile>
      <anchor>a9a741744dda2261cae26cddf96a35bf0</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLDLT</name>
    <filename>classEigen_1_1SimplicialLDLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>aaf7c852056195d05de863362638517b7</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLDLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a55429e59dbdf16a5696ee28bbf14e44f</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>aa25042f3b49880f5e487d468ea20b1b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a8cf16bd92a712d36310397972bdef044</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>ae8f502eff0c95771115968510e4d9af5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>ae98ed1c7ce8f9165adf5fb08cbb36b70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a3f26ae6105ffa36af9b8710e01e5caed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLDLT</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>a07cb76aee396862f94c3eedc6d77d908</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const VectorType</type>
      <name>vectorD</name>
      <anchorfile>classEigen_1_1SimplicialLDLT.html</anchorfile>
      <anchor>abe54532ce80558a0474b11763702107b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SimplicialLLT</name>
    <filename>classEigen_1_1SimplicialLLT.html</filename>
    <templarg></templarg>
    <templarg>_UpLo</templarg>
    <templarg></templarg>
    <base>SimplicialCholeskyBase&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>ad6e49b1c0d2ec5c8e118538260f3002c</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>SimplicialLLT &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a24ffa253377a1cec7a44b856fae1f71a</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a956595848e6fac7a389d091b3fdc9567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a8a140b34b08df74c7426ee29b986b228</anchor>
      <arglist>(const MatrixType &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>const MatrixL</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>ae2b24f8f6d62a8444193904988374299</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixU</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a23522d6444c344ddb14e48dbfac128ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>ad25633e34d7c21b77fe05c873ffbe416</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SimplicialLLT</name>
      <anchorfile>classEigen_1_1SimplicialLLT.html</anchorfile>
      <anchor>a342735f17d0306aa5581e91010091427</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Solve</name>
    <filename>classEigen_1_1Solve.html</filename>
    <templarg>Decomposition</templarg>
    <templarg>RhsType</templarg>
  </compound>
  <compound kind="class">
    <name>Eigen::SolverBase</name>
    <filename>classEigen_1_1SolverBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a05a3686a89888681c8e0c2bcab6d1ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a7fd647d110487799205df6f99547879d</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolverBase</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a4d5e5baddfba3790ab1a5f247dcc4dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a732e75b5132bb4db3775916927b0e86c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SolverBase&lt; FullPivLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SolverBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a05a3686a89888681c8e0c2bcab6d1ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FullPivLU&lt; _MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FullPivLU&lt; _MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; FullPivLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a7fd647d110487799205df6f99547879d</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolverBase</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a4d5e5baddfba3790ab1a5f247dcc4dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a732e75b5132bb4db3775916927b0e86c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SolverBase&lt; PartialPivLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SolverBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="function">
      <type>AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a05a3686a89888681c8e0c2bcab6d1ce5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PartialPivLU&lt; _MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>afd4f3f1c57b7594b96a7e30f2974ea2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartialPivLU&lt; _MatrixType &gt; &amp;</type>
      <name>derived</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a1fbabe7f12bcbfba3b9a448b1f5e46fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PartialPivLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a7fd647d110487799205df6f99547879d</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SolverBase</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a4d5e5baddfba3790ab1a5f247dcc4dc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1SolverBase.html</anchorfile>
      <anchor>a732e75b5132bb4db3775916927b0e86c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::SolverStorage</name>
    <filename>structEigen_1_1SolverStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SolveWithGuess</name>
    <filename>classEigen_1_1SolveWithGuess.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Eigen::Sparse</name>
    <filename>structEigen_1_1Sparse.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseCompressedBase</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::SparseMatrixBase</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCompressedBase&lt; Transpose&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseCompressedBase.html</filename>
    <base>SparseMatrixBase&lt; Transpose&lt; MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>const Map&lt; const Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a101b155485ae59ea1261c4f6040f3dc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Map&lt; Array&lt; Scalar, Dynamic, 1 &gt; &gt;</type>
      <name>coeffs</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a7cf299e08d2a4f6d6869e631e51b12fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>aa64818e1aa43015dad01b114b2ab4687</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a197111c1289644f1ea38fe683ccdd82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>afc056a3895eae1a4c4767252ff04966a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a411e972b097e6aef225415a4c2d0a0b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a2624d4c2661c582de168246c56e8d71e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a53a82f962686e18c8dc07a4b9a85ed7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f44c739398794ea77f310b745cc5627</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>a0f12f72d14b6c277d09be9f5ce2eab95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SparseCompressedBase</name>
      <anchorfile>classEigen_1_1SparseCompressedBase.html</anchorfile>
      <anchor>af79f020db965367d97eb954fc68d8f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseLU</name>
    <filename>classEigen_1_1SparseLU.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; SparseLU&lt; _MatrixType, _OrderingType &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>absDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a06fa89424239fb169d408f08252426d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>aa907ff958c4f4855145091d2686f3a8a</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>ab7b0d15d0d9fd1faa164298f92ca59cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a96a8dcb02015ab9be5777d4ba9173266</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a02d63d242d27211b5c5827f5d4fd99ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a39858b0e72f2659d596364e252b34cbc</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>ab0d0c1744ffd5a1dff578a44bcef2a3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isSymmetric</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>afff3bd506cd78172e5219c707562729f</anchor>
      <arglist>(bool sym)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a5458c4e851d7d75c8ca92c4fd02d2adb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>logAbsDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a89e30a7df205596784a5a73f4768eaec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixLReturnType&lt; SCMatrix &gt;</type>
      <name>matrixL</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a634abe55e5a076f2e10db78871105a8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseLUMatrixUReturnType&lt; SCMatrix, MappedSparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt; &gt;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>aaf395a8fca527144215ff19cc7b8b637</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>rowsPermutation</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a691295e65c06df599876d78ac2c7fada</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a94c726c9ebb71a60b529fe47d942ad57</anchor>
      <arglist>(const RealScalar &amp;thresh)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>signDeterminant</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a6651143e3b18fa90cfb3808b6fd23c4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseLU, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseLU.html</anchorfile>
      <anchor>a0b10cb439f52ce1b85a371fca8c79b89</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</name>
    <filename>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseCompressedBase</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a195e66f79171f78cc22d91fff37e36e3</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0fc44f3781a869a3a410edd6691fd899</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab044564756f472877b2c1a5706e540e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a2b35a1d701d6c6ea36b2d9f19660a68c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a0df6dba8d71e0fb15b2995510853f83e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>aafab4afa7ab2ff89eff049d4c71e2ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a753e975b7b3643d821dc061141786870</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a24c55dd8de4aca30e7c90b69aa5dca6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3d6ede19db6d42074ae063bc876231b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a3cdd6cab0abd7ac01925a695fc315d34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>a574ea9371c22eabebdda21c0787312dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMapBase</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01ReadOnlyAccessors_01_4.html</anchorfile>
      <anchor>ab375aedf824909a7f1a6af24ee60d70f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</name>
    <filename>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</filename>
    <templarg></templarg>
    <base>Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</base>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>aa9c42d48b9dd6f947ce3c257fe4bf2ca</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af5cd1f13dde8578eb9891a4ac4a11977</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af877ea4e285a4497f80987fea66f7459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a3b74af754254837fc591cd9936688b95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>af91648a18729ae8ff29cb1d8751c5655</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMapBase</name>
      <anchorfile>classEigen_1_1SparseMapBase_3_01Derived_00_01WriteAccessors_01_4.html</anchorfile>
      <anchor>a4dfbcf3ac411885b1710ad04892c984d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrix</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Options</templarg>
    <templarg>_StorageIndex</templarg>
    <base>SparseCompressedBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>Eigen::SparseCompressedBase</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, ColMajor, int &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>Eigen::SparseCompressedBase</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, ColMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>Eigen::SparseCompressedBase</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrix&lt; Scalar, RowMajor, StorageIndex &gt;</name>
    <filename>classEigen_1_1SparseMatrix.html</filename>
    <base>Eigen::SparseCompressedBase</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a54adf6aa526045f37e67e352da8fd105</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a013197b3f598968ff37ed8c97087f1ef</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa391750e3c530227e4a5c3c52e959975</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9dc538b2c1fe9027ba58f31ee83b2ff1</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstDiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4423486f9fd64cbac7be06c748b37e0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af83005640c2771ebd69f98848720ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae7b804bd39745156d20ca1611a296b67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a8e9ef5d399d36fdd860ad05cb7a31455</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a218204b051a24f579c394454786eeda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>innerNonZeroPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a00efb5c30c29bbc826d156d97e60d870</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0f42824d4a06ee1d1f6afbc4551c5896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>insert</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aae45e3b5fec7f6a0cdd10eec7c6d3666</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a837934b33a80fe996ff20500373d3a61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeCompressed</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a5ff54ffc10296f9466dc81fa888733fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a03de8b3da2c142ce8698a76123b3e7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a75506964d86d6badb32d0b4917acf2e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>StorageIndex *</type>
      <name>outerIndexPtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9451af2795c1a5b97678272475e41422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e5f706cfae14d2eaec1ea1e234905f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a08af03b2fc6c371c8be4fcd62509288c</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0e5f8cc59ee57207f0cff6b142bcdd0d</anchor>
      <arglist>(const KeepFunc &amp;keep=KeepFunc())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1518e58ac49bed0e2385b722a034f7d3</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2b219eb36fbab0bfae535cfbfc74a76</anchor>
      <arglist>(const SizesType &amp;reserveSizes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af88551f30202341b7cc24cfadabdec5c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a62e61bb861eee306d5b069ce652b5aa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>acc35051d698e3973f1de5b9b78dbe345</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFromTriplets</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3eee2d3d2a9843cd095c0207f781e7e</anchor>
      <arglist>(const InputIterators &amp;begin, const InputIterators &amp;end, DupFunctor dup_func)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a89013d2aa58413672c90932607a0d6f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ad3c7416090f913e8685523cb3ab7c2f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a68087ee333c9614ea28850ec52069079</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a6abf1015a0243be97648e106a17b01ea</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a501a50f0d7d58dc4c1d990cd912f581f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>aa755e8ba4ec4a2e39ebdb658228364e5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; OtherDerived, UpLo &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>af0fa64cdba1f30353aac937a31db33f3</anchor>
      <arglist>(const SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a4e328e4686980219c2b4d2a932670ab0</anchor>
      <arglist>(const ReturnByValue&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a1c6fde42fd40e6f753b60f71e8fd88aa</anchor>
      <arglist>(const DiagonalBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a0700cd0b8658962d742fa51a5e594a2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ae9b9ad3524f87276511397d988b7a607</anchor>
      <arglist>(SparseMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>uncompress</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a7e560ebda035e992d2c99875cc7c3af3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a9d4354d3f4d121d764bbed33cac05329</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>valuePtr</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>ac2684952b14b5c9b0f68ae3bb8c517a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseMatrix</name>
      <anchorfile>classEigen_1_1SparseMatrix.html</anchorfile>
      <anchor>a36835ee4f8e5f273087910ec8063a4f6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseMatrixBase</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Derived &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Derived, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Derived, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Derived ::Scalar, OtherDerived ::Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Derived &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Derived, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Derived, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Derived, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Derived, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Derived, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Derived, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Derived &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Derived &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Derived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Block&lt; const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Block&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Block&lt; SparseMatrixType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Block&lt; XprType, BlockRows, BlockCols, InnerPanel &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Block&lt; XprType, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Block&lt; XprType, BlockRows, BlockCols, true &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Block&lt; XprType, BlockRows, BlockCols, true &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Block&lt; XprType, BlockRows, BlockCols, true &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Block&lt; XprType, BlockRows, BlockCols, true &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; ::Scalar, OtherDerived ::Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, CwiseBinaryOp&lt; BinaryOp, Lhs, Rhs &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; ::Scalar, OtherDerived ::Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; ::Scalar, OtherDerived ::Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; SparseView&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; SparseView&lt; MatrixType &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; SparseView&lt; MatrixType &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const SparseView&lt; MatrixType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const SparseView&lt; MatrixType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; SparseView&lt; MatrixType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; SparseView&lt; MatrixType &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, SparseView&lt; MatrixType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseView&lt; MatrixType &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, SparseView&lt; MatrixType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const SparseView&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; SparseView&lt; MatrixType &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; SparseView&lt; MatrixType &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const SparseView&lt; MatrixType &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const SparseView&lt; MatrixType &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, SparseView&lt; MatrixType &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; Transpose&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; Transpose&lt; MatrixType &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; Transpose&lt; MatrixType &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const Transpose&lt; MatrixType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const Transpose&lt; MatrixType &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Transpose&lt; MatrixType &gt; ::Scalar, OtherDerived ::Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; Transpose&lt; MatrixType &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, Transpose&lt; MatrixType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Transpose&lt; MatrixType &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, Transpose&lt; MatrixType &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const Transpose&lt; MatrixType &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; Transpose&lt; MatrixType &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; Transpose&lt; MatrixType &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const Transpose&lt; MatrixType &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const Transpose&lt; MatrixType &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, Transpose&lt; MatrixType &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseMatrixBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</name>
    <filename>classEigen_1_1SparseMatrixBase.html</filename>
    <base>EigenBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</base>
    <member kind="enumvalue">
      <name>ColsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a27ba349f075d026c1f51d1ec69aa5b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Flags</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2af043b36fe9e08df0107cf6de496165</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>IsVectorAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a14a3f566ed2a074beddb8aef0223bfdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumDimensions</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a2366131ffcc38bff48a1c7572eb86dd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowsAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205a456cda7b9d938e57194036a41d634604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4501a124ebd788039e89799d365205aa5022cfa2bb53129883e9b7b8abd3d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::traits&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;::StorageIndex</type>
      <name>StorageIndex</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0b540ba724726ebe953f8c0df06081ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Scalar</type>
      <name>value_type</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac254d3b61718ebc2136d27bac043dcb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; CustomBinaryOp, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>binaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aaa71e627acbc873db1885d0fb72189a6</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other, const CustomBinaryOp &amp;func=CustomBinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abe91789a4daf92db69e15c9f12df4c95</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c686b68dba8a31e61a5cbf93a42a649</anchor>
      <arglist>(Index startRow, Index startCol, NRowsType blockRows, NColsType blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a422f30777a88d280daeb9a1496f074</anchor>
      <arglist>(Index startRow, Index startCol)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad9808042bbbc011affa3636915db1533</anchor>
      <arglist>(Index startRow, Index startCol) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb1b6971a06d23d6e51057ce04192517</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; NRows, NCols &gt;::Type</type>
      <name>block</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a928c458f6cd7b169a80691bd01ad3d9a</anchor>
      <arglist>(Index startRow, Index startCol, Index blockRows, Index blockCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6996e4faf1be09f031bc6f9713459274</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a112b1b005b58768a7e07a4b70fbb9272</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afa42c135390593b8b32ab45b390b719a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ac9c9d3a40e1e8469c3e6b18fb9b202</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad619814d6d694e347d9cf5d7302057a9</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6269d34c9bb1277d1470d0c948361a81</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a0ea5470929dc9412471712320760f960</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7989db11340beaeff61f86d4868a4775</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a161556f95a4ae01e5fda7c79bb3e04f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a13637dee81a193bd9a631d0e0f5572b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1a544a89365beaa479e628ebda6d3a93</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>bottomRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a752c59896582b0c654d24362f3799b68</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad525e206608df05c49c24b8ce3e845f1</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ff1b4b82cc9558606e5465d1dc39e2c</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac0e2afd4e6a4939f488afbfe3b5cf8c0</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>bottomRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abb59ce4f9e75ea309f78630e5aaafc67</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>CastXpr&lt; NewType &gt;::Type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad2f1053a230f80f9e3ae8a9e1963e3c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad49129f2301063ce046ae071c82610d5</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstColXpr</type>
      <name>col</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d181161b91bc84f955f116c536e6334</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aca7ce296424ef6e478ab0fb19547a7ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5786b847d59be644984e6ec30d2e35c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbsReturnType</type>
      <name>cwiseAbs</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>afc11609ee20c2e103b42f2fda9b6fd7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseAbs2ReturnType</type>
      <name>cwiseAbs2</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae719d8a727660cb6469070b338499f08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::equal_to&lt; Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3eb20e383a14f049736de22c8b333695</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseScalarEqualReturnType</type>
      <name>cwiseEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abbf4659b7df3458fb7491ac3132f6cdb</anchor>
      <arglist>(const Scalar &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseInverseReturnType</type>
      <name>cwiseInverse</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a703fdd06c4802869bd1682f4b06eda2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d944efb685a27c2dfcf59a07f4d2fdd</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_max_op&lt; Scalar, Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMax</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a724916ecda447e958944991767ac1f97</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af28d8003e305b4877d795432484cc73a</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_min_op&lt; Scalar, Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const ConstantReturnType &gt;</type>
      <name>cwiseMin</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac6acc24a2f2388959407e0ec6ecc7551</anchor>
      <arglist>(const Scalar &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; std::not_equal_to&lt; Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseNotEqual</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9596ff9f731a708010da9e876ee6ad09</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; TriangularView&lt; MatrixType, Mode &gt; ::Scalar, OtherDerived ::Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseProduct</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f5654574942f40fc222297af1ebf62d</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>cwiseQuotient</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a914f7db22f9010c2288098be79b7e478</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSignReturnType</type>
      <name>cwiseSign</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae86f1aa7e8855072a1b5f6fdc6573567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseSqrtReturnType</type>
      <name>cwiseSqrt</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43f979e103dd39e8cac8505254d190c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const internal::eval&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;::type</type>
      <name>eval</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a761bd872a06b59632fcff7b7807a77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa5c16610c1867dd5121e9cb6c23dbbfb</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a629e3e5af279c5f73fbe4d3a9e71e994</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a77f5840458a6b52b293cfdd52c28063a</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>head</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aea9d0d4851aed8261f0bbefa67f4b35a</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const ImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad20e914fe0dd4b2490102f48b050f1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstImagReturnType</type>
      <name>imag</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab2948b3eeefeb4757f7d4039de074e89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a180fcba1ccf3cdf3252a263bc1de7a1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59f9cacdb4381b2ed983146b22e4c1d8</anchor>
      <arglist>(Index outer)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorReturnType</type>
      <name>innerVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3ca3d46e3307cc45e95080253c42193a</anchor>
      <arglist>(Index outer) const</arglist>
    </member>
    <member kind="function">
      <type>InnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9428052ea68914c3304311028f25f7ea</anchor>
      <arglist>(Index outerStart, Index outerSize)</arglist>
    </member>
    <member kind="function">
      <type>const ConstInnerVectorsReturnType</type>
      <name>innerVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a726e4a4ede31f2055c4f62ec7bfa40bb</anchor>
      <arglist>(Index outerStart, Index outerSize) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7eedffa867031f649fd0fb9cc23ce4be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ae77276a7c0631251e7e644095d1b3345</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66586d721300082e214417d399ce9225</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aebe9c9b17434027b0949e57951c9af05</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>leftCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3a26d7a108e2005432f1655071bbec98</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af82e9f378feb36c4a3835911fa19751a</anchor>
      <arglist>(Index startCol, NColsType numCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab6f8c8be505a1bc75285dce7a84bccde</anchor>
      <arglist>(Index startCol, NColsType numCols) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aec625252292e4626e263dd133ccac421</anchor>
      <arglist>(Index startCol, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>middleCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa1c6c2249d1602b9dabd86743816480d</anchor>
      <arglist>(Index startCol, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab4691656c9604a4a693dece12f9950f</anchor>
      <arglist>(Index startRow, NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aab17f0cb3c93d940755417941038fc93</anchor>
      <arglist>(Index startRow, NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4c4adbdd67164a3753df77a0c2d5eda8</anchor>
      <arglist>(Index startRow, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>middleRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a899e4e88a796facafc878a9238cfa9d9</anchor>
      <arglist>(Index startRow, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_and_op, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>operator &amp;&amp;</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8afecf1179c8f0d58e286ec0f50ac8dc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar, T &gt;, TriangularView&lt; MatrixType, Mode &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3d8112e6b64fceca71e14977ca8c2055</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; TriangularView&lt; MatrixType, Mode &gt;, OtherDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a71198810da2882cf0234ad5a08d4500f</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; sum&lt; Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a97874c8f3c0a69b0160f0d310b233468</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; difference&lt; Scalar &gt;, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a118b1aef19fa7231538d94646573b7bc</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const NegativeReturnType</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ab1fdce454e05bc7c40c0cec7e854fe70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar, T &gt;, TriangularView&lt; MatrixType, Mode &gt;, Constant&lt; T &gt; &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa30a0ce5a8b71a99bc969fe585e39713</anchor>
      <arglist>(const T &amp;scalar) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseBinaryOp&lt; internal::scalar_boolean_or_op, const TriangularView&lt; MatrixType, Mode &gt;, const OtherDerived &gt;</type>
      <name>operator||</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af81ea3dea5ea37304ea010d511f35088</anchor>
      <arglist>(const Eigen::SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerSize</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac86cc88a4cfef21db6b64ec0ab4c8f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SparseView&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</type>
      <name>pruned</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ac8d0414b56d9d620ce9a698c1b281e5d</anchor>
      <arglist>(const Scalar &amp;reference=Scalar(0), const RealScalar &amp;epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>RealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a34162b16f185e9f8a39da62087a23665</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NonConstRealReturnType</type>
      <name>real</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a3855bebf879e6c4a56f5ce1c25a9a3e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5f9a86dc9ca6f44563a7168c69210cee</anchor>
      <arglist>(NColsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNColsBlockXpr&lt;... &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af2350515b4b70e7a70b42b5b81cc7e63</anchor>
      <arglist>(NColsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a7945204acc8477627f6895140a7c51ef</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNColsBlockXpr&lt; N &gt;::Type</type>
      <name>rightCols</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af390fc1cca411fb5b624bafa7e028aa1</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>RowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a92c023d63826ff35698e8e8feac3b24a</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>ConstRowXpr</type>
      <name>row</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa9570fa736f7678600886a1fe1d6a17a</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1944e9fa9ce7937bfc3a87b2cb94371f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a59ca0ef0f3581e55cab8fe729c47b413</anchor>
      <arglist>(Index start, NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a1b2ffef89de27ede6222b79e1381706c</anchor>
      <arglist>(Index start, NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aced8757cdac6f6463eb65018b337f9e5</anchor>
      <arglist>(Index start, Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>segment</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a70310eb90843c2527036f4f63e8d39e7</anchor>
      <arglist>(Index start, Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>size</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a124bc57921775eb9aa2dfd9727e23472</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ColXpr, RowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a5bfb755642a03c6cad0fa645a688fc83</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>internal::conditional&lt; Direction==Vertical, ConstColXpr, ConstRowXpr &gt;::type</type>
      <name>subVector</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adf4cc073eca67163b5768cb40f9633f9</anchor>
      <arglist>(Index i) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subVectors</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a66e019b20a6e68089e48a528d98e738e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a129448188d30647e9a1837bbffbf05d6</anchor>
      <arglist>(NType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedSegmentReturnType&lt;... &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a19d135ea3731de1ec01862501babe62a</anchor>
      <arglist>(NType n) const</arglist>
    </member>
    <member kind="function">
      <type>FixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ada219a98a93845b4c09924d471322853</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstFixedSegmentReturnType&lt; N &gt;::Type</type>
      <name>tail</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>aa8b508da02ec65e7d404425ea47cae29</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>abd7b00a300d80a84da337476d2759c87</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a826248b325b9ca39824c9fadc26d9ca1</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af38ce1cb59059bebdf605b2091ea49b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a74140ddaec2e6442771066e7f5cd49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a8f09735a100f857c593741840184cefe</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topLeftCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a4d2a17b67327925dc9dab29694f48433</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a6530b7b0bb75d978095ce933e88222d8</anchor>
      <arglist>(NRowsType cRows, NColsType cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt;...,... &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a67c2e27fbfa60b551565e735ba7582fe</anchor>
      <arglist>(NRowsType cRows, NColsType cCols) const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a2b4ccb3c46e55e407bbe316fdebcb659</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a98de5e9fc2d3b8c513223db387fdec55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>adafa5d35b2d1bfc9f0cc19f14a0e2c56</anchor>
      <arglist>(Index cRows, Index cCols)</arglist>
    </member>
    <member kind="function">
      <type>const ConstFixedBlockXpr&lt; CRows, CCols &gt;::Type</type>
      <name>topRightCorner</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad48496ebbfcd6cb685f893246de1d934</anchor>
      <arglist>(Index cRows, Index cCols) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a9ec9c82816b79306e63a8cbd6048aaee</anchor>
      <arglist>(NRowsType n)</arglist>
    </member>
    <member kind="function">
      <type>const ConstNRowsBlockXpr&lt;... &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a643c93bc99ce699c5beb31e680f543cc</anchor>
      <arglist>(NRowsType n) const</arglist>
    </member>
    <member kind="function">
      <type>NRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a43a2b592894cb82fab9e930db8f95117</anchor>
      <arglist>(Index n=N)</arglist>
    </member>
    <member kind="function">
      <type>ConstNRowsBlockXpr&lt; N &gt;::Type</type>
      <name>topRows</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a958cda0ac21d50fd2fbc97861f97a0b7</anchor>
      <arglist>(Index n=N) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; TriangularView&lt; MatrixType, Mode &gt;, Upper|Lower &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a51d4898bd6a57cc3ba543a39b102423e</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryOp&lt; CustomUnaryOp, const TriangularView&lt; MatrixType, Mode &gt; &gt;</type>
      <name>unaryExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>af9bed5dea96bdaf17ffd1a76ab0aedb1</anchor>
      <arglist>(const CustomUnaryOp &amp;func=CustomUnaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const CwiseUnaryView&lt; CustomViewOp, const TriangularView&lt; MatrixType, Mode &gt; &gt;</type>
      <name>unaryViewExpr</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>a009918bb363546f107f5bdc1ea0610f3</anchor>
      <arglist>(const CustomViewOp &amp;func=CustomViewOp()) const</arglist>
    </member>
    <member kind="friend">
      <type>friend const CwiseBinaryOp&lt; internal::scalar_product_op&lt; T, Scalar &gt;, Constant&lt; T &gt;, TriangularView&lt; MatrixType, Mode &gt; &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseMatrixBase.html</anchorfile>
      <anchor>ad4c1f7cc599d4ed808f8b5652e4433f5</anchor>
      <arglist>(const T &amp;scalar, const StorageBaseType &amp;expr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseQR</name>
    <filename>classEigen_1_1SparseQR.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>SparseSolverBase&lt; SparseQR&lt; _MatrixType, _OrderingType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a4b425ddb1358c914d764cde48853a4f6</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a57bedc9b1351c0995bae8ad0088a6fce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PermutationType &amp;</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a140930ebbf89dfd57a173761716db38f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aedaf52b7543de4d55c58c8f830c2aeb7</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a55a34bacf05bd30a1dacbccad9f03c6d</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a234b0580aaf57237393f2e73a3d38690</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>lastErrorMessage</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a1222e59649d77125d91f1368cf293c63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SparseQRMatrixQReturnType&lt; SparseQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ae1cc0a836c177d4f42600f8639354be1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const QRMatrixType &amp;</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a564524ff13b2b6dd1e76127404f7b920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>a70ec2b9e5cb62a41dc1ee2adfb54e9b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ab9133b7ace1c19714df99f553666316d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>adb7bfa65f99e3ef91ed58ea663a850a1</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseQR, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>aea13a2c6823cd8408ba49afde9b3d4e4</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;B) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseQR</name>
      <anchorfile>classEigen_1_1SparseQR.html</anchorfile>
      <anchor>ac50f705d686d4bc687ce6acbc76447d2</anchor>
      <arglist>(const MatrixType &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseSelfAdjointView</name>
    <filename>classEigen_1_1SparseSelfAdjointView.html</filename>
    <templarg>MatrixType</templarg>
    <templarg>_Mode</templarg>
    <base>EigenBase&lt; SparseSelfAdjointView&lt; MatrixType, _Mode &gt; &gt;</base>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a7faf4a36a9275b9ed9bd0efe930f5523</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Product&lt; SparseSelfAdjointView, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>ab1fca90b37ab93a0d417d29e7490b238</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>SparseSelfAdjointView &amp;</type>
      <name>rankUpdate</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>abe66734215f8d8220be0985d67901021</anchor>
      <arglist>(const SparseMatrixBase&lt; DerivedU &gt; &amp;u, const Scalar &amp;alpha=Scalar(1))</arglist>
    </member>
    <member kind="function">
      <type>SparseSymmetricPermutationProduct&lt; _MatrixTypeNested, Mode &gt;</type>
      <name>twistedBy</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>acde15b45cf7b43520e1005ec65d55f3c</anchor>
      <arglist>(const PermutationMatrix&lt; Dynamic, Dynamic, StorageIndex &gt; &amp;perm) const</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a6bc1b528571ce9bbb4de2b6de5a589c7</anchor>
      <arglist>(const SparseMatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>friend Product&lt; OtherDerived, SparseSelfAdjointView &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1SparseSelfAdjointView.html</anchorfile>
      <anchor>a041db67de7ff1e833befe8af97c49f7d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const SparseSelfAdjointView &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseSolverBase</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; BiCGSTAB&lt; _MatrixType, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodDecomposition&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodDecomposition&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodDecomposition&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLDLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSimplicialLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; CholmodSupernodalLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; ConjugateGradient&lt; _MatrixType, _UpLo, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; IncompleteCholesky&lt; Scalar, _UpLo, _OrderingType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; IncompleteCholesky&lt; Scalar, _UpLo, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; IncompleteCholesky&lt; Scalar, _UpLo, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; IncompleteLUT&lt; _Scalar, _StorageIndex &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; IncompleteLUT&lt; _Scalar, _StorageIndex &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; IncompleteLUT&lt; _Scalar, _StorageIndex &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; KLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; KLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; KLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; LeastSquaresConjugateGradient&lt; _MatrixType, _Preconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PardisoLDLT&lt; MatrixType, Options &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PardisoLDLT&lt; MatrixType, Options &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PardisoLDLT&lt; MatrixType, Options &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PardisoLLT&lt; MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PardisoLLT&lt; MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PardisoLLT&lt; MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PardisoLU&lt; MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PardisoLU&lt; MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PardisoLU&lt; MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PastixLDLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PastixLDLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PastixLDLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PastixLLT&lt; _MatrixType, _UpLo &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PastixLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PastixLLT&lt; _MatrixType, _UpLo &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; PastixLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; PastixLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; PastixLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SimplicialCholesky&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SimplicialLDLT&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SimplicialLLT&lt; _MatrixType, _UpLo, _Ordering &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SparseLU&lt; _MatrixType, _OrderingType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SparseLU&lt; _MatrixType, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseLU&lt; _MatrixType, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SparseQR&lt; _MatrixType, _OrderingType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SparseQR&lt; _MatrixType, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SparseQR&lt; _MatrixType, _OrderingType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SPQR&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SPQR&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SPQR&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SuperILU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SuperILU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SuperILU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; SuperLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; SuperLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; SuperLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseSolverBase&lt; UmfPackLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SparseSolverBase.html</filename>
    <member kind="function">
      <type>const Solve&lt; UmfPackLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a4a66e9498b06e3ec4ec36f06b26d4e8f</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; UmfPackLU&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>a3a8d97173b6e2630f484589b3471cfc7</anchor>
      <arglist>(const SparseMatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseSolverBase</name>
      <anchorfile>classEigen_1_1SparseSolverBase.html</anchorfile>
      <anchor>aacd99fa17db475e74d3834767f392f33</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseVector</name>
    <filename>classEigen_1_1SparseVector.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Options</templarg>
    <templarg>_StorageIndex</templarg>
    <base>SparseCompressedBase&lt; SparseVector&lt; _Scalar, _Options, _StorageIndex &gt; &gt;</base>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a4b1845ada6ae59dd7afe361e30136ace</anchor>
      <arglist>(Index i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>conservativeResize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>ab8dbb1f73b6250c10c0860eb13ca5cca</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonZeros</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>aeaa74603bb1405f622726907795c9b5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prune</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>af094e30271da69f865b5d97f338f81d1</anchor>
      <arglist>(const Scalar &amp;reference, const RealScalar &amp;epsilon=NumTraits&lt; RealScalar &gt;::dummy_precision())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a594675dd305845e55edcab61c1b21d33</anchor>
      <arglist>(Index reserveSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a2dc842b3bb2ba3692e210565c48aff3c</anchor>
      <arglist>(Index rows, Index cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a1020011c75fb70b21257c8d04ee07514</anchor>
      <arglist>(Index newSize)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a05e8aff0ba5c4dd4ab69e173d80d1a68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>a977f1796d4b332a0827c5a1d7b1ed561</anchor>
      <arglist>(SparseVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseVector</name>
      <anchorfile>classEigen_1_1SparseVector.html</anchorfile>
      <anchor>ad519592c203aedf33c524feb1bdaad1b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SparseView</name>
    <filename>classEigen_1_1SparseView.html</filename>
    <templarg>MatrixType</templarg>
    <base>SparseMatrixBase&lt; SparseView&lt; MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1SparseView.html</anchorfile>
      <anchor>a50f53a9405017012077ae907959aca14</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SPQR</name>
    <filename>classEigen_1_1SPQR.html</filename>
    <templarg></templarg>
    <base>SparseSolverBase&lt; SPQR&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>cholmod_common *</type>
      <name>cholmodCommon</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a8c7d48d51a1fb08a3e27b8499e5c7f49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>aa006d40963b05c7525b5ca0b02364d84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PermutationType</type>
      <name>colsPermutation</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>ab1b7f54ba1cd8d77506ae676fea4fec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a3ab7bacba8d2be20adc10b4d5b6c071f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SPQRMatrixQReturnType&lt; SPQR &gt;</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a93dbf1b487e28948e1ca2a33a35b6a54</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType</type>
      <name>matrixR</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>ad51661be35674dd6a65e27699dbb3fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a539b394ddb4894089e6634c744ea2ddc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>a775e28a44fd466638114edbcd17ea50a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPivotThreshold</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>ab7b42b75f621b0d4b5b0e090e23e2ce6</anchor>
      <arglist>(const RealScalar &amp;tol)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSPQROrdering</name>
      <anchorfile>classEigen_1_1SPQR.html</anchorfile>
      <anchor>afa0db7888d808b453c23f62d62a4ad22</anchor>
      <arglist>(int ord)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Stride</name>
    <filename>classEigen_1_1Stride.html</filename>
    <templarg>_OuterStrideAtCompileTime</templarg>
    <templarg>_InnerStrideAtCompileTime</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; 0, Value &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; StrideType::OuterStrideAtCompileTime, StrideType::InnerStrideAtCompileTime &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Stride&lt; Value, 0 &gt;</name>
    <filename>classEigen_1_1Stride.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a96c2dfb0ce43fd8e19adcdf6094f5f63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>inner</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a963e7d87e40719bdd68a81b7e6624106</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outer</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae2bb3607b657e8fb404a19d4746341b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>ae3f37b08ff44d2afe971c0894c2f44a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>a81e299d9d2f8bbfc6d240705dabe5833</anchor>
      <arglist>(Index outerStride, Index innerStride)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stride</name>
      <anchorfile>classEigen_1_1Stride.html</anchorfile>
      <anchor>aa9bb1a33da8c785d9cc4ad5d799b9253</anchor>
      <arglist>(const Stride &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperILU</name>
    <filename>classEigen_1_1SuperILU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperILU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a52aa43effc247084c91a5e73720a50f6</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperILU.html</anchorfile>
      <anchor>a5669976899907fbe6bf1be620707e5f3</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLU</name>
    <filename>classEigen_1_1SuperLU.html</filename>
    <templarg></templarg>
    <base>SuperLUBase&lt; _MatrixType, SuperLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a493cdfada27415a6037b004ff974eace</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1SuperLU.html</anchorfile>
      <anchor>a0b5a5fbda1a1f368003c7c01021a4636</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SuperLUBase</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>Derived</templarg>
    <base>Eigen::SparseSolverBase</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SuperLUBase&lt; _MatrixType, SuperILU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <base>SparseSolverBase&lt; SuperILU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SuperLUBase&lt; _MatrixType, SuperLU&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SuperLUBase.html</filename>
    <base>SparseSolverBase&lt; SuperLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a2d3f48425328d9b3cbdca369889007f3</anchor>
      <arglist>(const MatrixType &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a28cb3ef7914ecb6fdae1935b53f6be40</anchor>
      <arglist>(const MatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>aa67da5c8c24110931c949c5896c5ec03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>superlu_options_t &amp;</type>
      <name>options</name>
      <anchorfile>classEigen_1_1SuperLUBase.html</anchorfile>
      <anchor>a42d9d79073379f1e75b0f2c49879ed5b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::SVDBase</name>
    <filename>classEigen_1_1SVDBase.html</filename>
    <templarg>Derived</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a6229a37997eca1072b52cca5ee7a2bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixUType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afc7fe1546b0f6e1801b86f22f5664cb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixVType &amp;</type>
      <name>matrixV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a245a453b5e7347f737295c23133238c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroSingularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afe8a555f38393a319a71ec0f0331c9ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a1c95d05398fc15e410a28560ef70a5a6</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>Derived &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a27586b69dbfb63f714d1d45fd6304f97</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const SingularValuesType &amp;</type>
      <name>singularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a4e7bac123570c348f7ed6be909e1e474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; Derived, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>ab28499936c0764fe5b56b9f4de701e26</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a98b2ee98690358951807353812a05c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SVDBase</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>abed06fc6f4b743e1f76a7b317539da87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SVDBase&lt; BDCSVD&lt; _MatrixType &gt; &gt;</name>
    <filename>classEigen_1_1SVDBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a6229a37997eca1072b52cca5ee7a2bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixUType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afc7fe1546b0f6e1801b86f22f5664cb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixVType &amp;</type>
      <name>matrixV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a245a453b5e7347f737295c23133238c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroSingularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afe8a555f38393a319a71ec0f0331c9ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; _MatrixType &gt; &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a1c95d05398fc15e410a28560ef70a5a6</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>BDCSVD&lt; _MatrixType &gt; &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a27586b69dbfb63f714d1d45fd6304f97</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const SingularValuesType &amp;</type>
      <name>singularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a4e7bac123570c348f7ed6be909e1e474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; BDCSVD&lt; _MatrixType &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>ab28499936c0764fe5b56b9f4de701e26</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a98b2ee98690358951807353812a05c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SVDBase</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>abed06fc6f4b743e1f76a7b317539da87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SVDBase&lt; JacobiSVD&lt; _MatrixType, QRPreconditioner &gt; &gt;</name>
    <filename>classEigen_1_1SVDBase.html</filename>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a6229a37997eca1072b52cca5ee7a2bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a705a7c2709e1624ccc19aa748a78d473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>computeV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a5f12efcb791eb007d4a4890ac5255ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixUType &amp;</type>
      <name>matrixU</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afc7fe1546b0f6e1801b86f22f5664cb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixVType &amp;</type>
      <name>matrixV</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a245a453b5e7347f737295c23133238c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>nonzeroSingularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>afe8a555f38393a319a71ec0f0331c9ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rank</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a30b89e24f42f1692079eea31b361d26a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; _MatrixType, QRPreconditioner &gt; &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a1c95d05398fc15e410a28560ef70a5a6</anchor>
      <arglist>(const RealScalar &amp;threshold)</arglist>
    </member>
    <member kind="function">
      <type>JacobiSVD&lt; _MatrixType, QRPreconditioner &gt; &amp;</type>
      <name>setThreshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a27586b69dbfb63f714d1d45fd6304f97</anchor>
      <arglist>(Default_t)</arglist>
    </member>
    <member kind="function">
      <type>const SingularValuesType &amp;</type>
      <name>singularValues</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a4e7bac123570c348f7ed6be909e1e474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Solve&lt; JacobiSVD&lt; _MatrixType, QRPreconditioner &gt;, Rhs &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>ab28499936c0764fe5b56b9f4de701e26</anchor>
      <arglist>(const MatrixBase&lt; Rhs &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>RealScalar</type>
      <name>threshold</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>a98b2ee98690358951807353812a05c69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>SVDBase</name>
      <anchorfile>classEigen_1_1SVDBase.html</anchorfile>
      <anchor>abed06fc6f4b743e1f76a7b317539da87</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::symbolic::SymbolExpr</name>
    <filename>classEigen_1_1symbolic_1_1SymbolExpr.html</filename>
    <templarg>tag</templarg>
    <base>BaseExpr&lt; SymbolExpr&lt; tag &gt; &gt;</base>
    <member kind="typedef">
      <type>tag</type>
      <name>Tag</name>
      <anchorfile>classEigen_1_1symbolic_1_1SymbolExpr.html</anchorfile>
      <anchor>af2c04ad1ee1251a2d540f0d804da4c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SymbolValue&lt; Tag &gt;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1symbolic_1_1SymbolExpr.html</anchorfile>
      <anchor>a0bd43167911dc398fba4e3f0f142a64d</anchor>
      <arglist>(Index val) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::symbolic::SymbolValue</name>
    <filename>classEigen_1_1symbolic_1_1SymbolValue.html</filename>
    <templarg>Tag</templarg>
    <member kind="function">
      <type></type>
      <name>SymbolValue</name>
      <anchorfile>classEigen_1_1symbolic_1_1SymbolValue.html</anchorfile>
      <anchor>a2db2a280f108f3253e4f21858a2d14ca</anchor>
      <arglist>(Index val)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>value</name>
      <anchorfile>classEigen_1_1symbolic_1_1SymbolValue.html</anchorfile>
      <anchor>a8f87badf23a7d5e32145c9ea08aaa300</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transform</name>
    <filename>classEigen_1_1Transform.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <templarg>_Mode</templarg>
    <templarg>_Options</templarg>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), MatrixType &amp;, Block&lt; MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>AffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8319bad977b0dabf2dfaf2e2dc30f13e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::conditional&lt; int(Mode)==int(AffineCompact), const MatrixType &amp;, const Block&lt; const MatrixType, Dim, HDim &gt; &gt;::type</type>
      <name>ConstAffinePart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>adfa0bf2d9504548cdc9b9051b2fa9673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Block&lt; ConstMatrixType, Dim, Dim, int(Mode)==(AffineCompact) &amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>ConstLinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac3327ee95457c915e422ff85002e02aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const MatrixType</type>
      <name>ConstMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aed436d14b16bd862bac5367990085795</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Block&lt; ConstMatrixType, Dim, 1,!(internal::traits&lt; MatrixType &gt;::Flags &amp;RowMajorBit)&gt;</type>
      <name>ConstTranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a3eab3259d3fac8106eb3139bc96ba852</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a49df3689ac2b736bcb564dec47d6486c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim, Options &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a48138c0370e55371b95946c90d69e25c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, Dim, int(Mode)==(AffineCompact) &amp;&amp;(Options &amp;RowMajor)==0 &gt;</type>
      <name>LinearPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1441ef7d89d1f4cebd061db33b993cf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>internal::make_proper_matrix_type&lt; Scalar, Rows, HDim, Options &gt;::type</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a30f72ba46abc2bb3c7fa919c1078fc9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a4e69ced9d651745b8ed4eda46f41795d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, TransformTimeDiagonalMode &gt;</type>
      <name>TransformTimeDiagonalReturnType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a51af5e8d8d9d9bfec091ff8aa5b7845a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Block&lt; MatrixType, Dim, 1,!(internal::traits&lt; MatrixType &gt;::Flags &amp;RowMajorBit)&gt;</type>
      <name>TranslationPart</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aabeaa2d375bf1b6b1d5cb5d1904fbd06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Translation&lt; Scalar, Dim &gt;</type>
      <name>TranslationType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a6b463d14d8be4c0eda2eed6e943b831f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aaeb4ae2f95c8edb0655fd84ab3f89e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ConstAffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a761a9c20fd5eefa58ca2f9babdf4c5d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AffinePart</type>
      <name>affine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9795374292c085bca4d123397d6b37d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Transform, Transform&lt; NewScalarType, Dim, Mode, Options &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a86a66867b2a9ee0c9c4e920baf2bdacd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeRotationScaling</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a7213fd78501c1185c4a1441e33c812d3</anchor>
      <arglist>(RotationMatrixType *rotation, ScalingMatrixType *scaling) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeScalingRotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a247b079c63f46bb652b3776484838216</anchor>
      <arglist>(ScalingMatrixType *scaling, RotationMatrixType *rotation) const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a432669c64a0d6925ee5ea54f76d24a32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar *</type>
      <name>data</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aefd183e4e0ca89c39b78d5ad7cf3e014</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EIGEN_MAKE_ALIGNED_OPERATOR_NEW_IF_VECTORIZABLE_FIXED_SIZE</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a30c94c2156e9345f4bdb6cc9661e275b</anchor>
      <arglist>(_Scalar, _Dim==Dynamic ? Dynamic :(_Dim+1) *(_Dim+1)) enum</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>fromPositionOrientationScale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>afac1e7bd782e5cc92cbf70128809d5d1</anchor>
      <arglist>(const MatrixBase&lt; PositionDerived &gt; &amp;position, const OrientationType &amp;orientation, const MatrixBase&lt; ScaleDerived &gt; &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>Transform</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ab8dbcd157bf194efca1a5413c0945211</anchor>
      <arglist>(TransformTraits traits=(TransformTraits) Mode) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>abd1696d9bb754e5c8734e691e03243f9</anchor>
      <arglist>(const Transform &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>ConstLinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>af8c38249632146453785add778dc1081</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LinearPart</type>
      <name>linear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ad36538ee2c2970722eff343ee1bbfc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>makeAffine</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>abef09a0e86261aeba4e10227fa3fa26b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0ac079dc1995058cbbded553b8d4485c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixType &amp;</type>
      <name>matrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a758fbaf6aa41a5493659aa0c9bfe0dcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::transform_right_product_impl&lt; Transform, OtherDerived &gt;::ResultType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0f55cc53fae60e6fd9f470ecd83063d1</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const TransformTimeDiagonalReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a91290c578be8fa60ec5d02702b1ce229</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>const Transform</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a43f5bb05c92ed3ba2ad6883f1eaa1546</anchor>
      <arglist>(const Transform &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>internal::transform_transform_product_impl&lt; Transform, Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &gt;::ResultType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a57ebc3b899d050141ca46de7f1b3dfef</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, OtherMode, OtherOptions &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a9672c84cb1477eee118be144e7e5d581</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>operator()</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a09fce82b9bdedb5deb2b223a3d716d3f</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a826047489741a19b81c6552f8257b1cf</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8ed8318285ccc7498197da7df1273bd5</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a54986164dcb1d0f7bfa216b8ef5272f6</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>prerotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ac5d65c2387e8d8b8f1526fc2c8443661</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a96c5e49e1d779299f4975dfef93e14b3</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>prescale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a0d87009c9449d1920c037eb58468e757</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>preshear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a17c40209cfd2d094cf654504aca95bf1</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>pretranslate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae9be55c2f6f4d56b0878c983c0ff9cc6</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>rotate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a992087c44abac402a90e48218632d435</anchor>
      <arglist>(const RotationType &amp;rotation)</arglist>
    </member>
    <member kind="function">
      <type>const LinearMatrixType</type>
      <name>rotation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a1654f52b3c00de832a1cf0581afb99ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a7757f5d9e708e625cbd936b19269b2c8</anchor>
      <arglist>(const Scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>scale</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8eea19fd9f6a6966a1a810acda22f93d</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIdentity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>accf8eb8ac609d20cf099c62124c0505a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transform &amp;</type>
      <name>shear</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae93a25d5e15af9446d7e5bc0e7a959d0</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>QMatrix</type>
      <name>toQMatrix</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>adaa35139dce9e7e8e144bbdecf97f63f</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type>QTransform</type>
      <name>toQTransform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ae954e369a06472f44b72b199beb83cd2</anchor>
      <arglist>(void) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a19d71151dfbbe89db15961c93726dd70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aec37de6bc74c0769dc4e47ba759bf9ec</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a83d61d4a1bd1c502c97ad67f87d55006</anchor>
      <arglist>(const QMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a63e9a5b9cf964921c24023dd680dee6d</anchor>
      <arglist>(const QTransform &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transform</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a2c3e732625ec300ef4e4cb1e17a82d35</anchor>
      <arglist>(const Transform&lt; OtherScalarType, Dim, Mode, Options &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;</type>
      <name>translate</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa28c8ebe8367243653e8fb151670b24b</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstTranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>adf4c6d97bd3f10edfa95bb04331ec8ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TranslationPart</type>
      <name>translation</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>aa3e4201cc8d1fd98136af66544148dc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Transform</type>
      <name>Identity</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a5897c4cba8d6d19ea8711496fe75836f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend const internal::transform_left_product_impl&lt; OtherDerived, Mode, Options, _Dim, _Dim+1 &gt;::ResultType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>a8aa2ae0749cbb17ee2cf67c1025af110</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend TransformTimeDiagonalReturnType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Transform.html</anchorfile>
      <anchor>ace1b561833decdceb18c9f88f713befa</anchor>
      <arglist>(const DiagonalBase&lt; DiagonalDerived &gt; &amp;a, const Transform &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Translation</name>
    <filename>classEigen_1_1Translation.html</filename>
    <templarg>_Scalar</templarg>
    <templarg>_Dim</templarg>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Affine &gt;</type>
      <name>AffineTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a25c762409320ba9490a0d12c6652bbad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; Scalar, Dim, Isometry &gt;</type>
      <name>IsometryTransformType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ad3ac890d85420ba78e16dab1983d1a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, Dim &gt;</type>
      <name>LinearMatrixType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ac5aca3bc67564e96ad550aba971de8b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_Scalar</type>
      <name>Scalar</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ad596bf21ced4b902cc242205df486e21</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; Scalar, Dim, 1 &gt;</type>
      <name>VectorType</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a339e17dfec5394ae563f62cca0df451f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>internal::cast_return_type&lt; Translation, Translation&lt; NewScalarType, Dim &gt; &gt;::type</type>
      <name>cast</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a6dda00ac348f3061cd501f2822d0e534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>inverse</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aa72ee6bccce7f26cbef57550308e6aaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isApprox</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a3dfc243795eef9c94bf65f0837f563c8</anchor>
      <arglist>(const Translation &amp;other, const typename NumTraits&lt; Scalar &gt;::Real &amp;prec=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
    <member kind="function">
      <type>Translation</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a6bfcbc9f38437b508c1236a5e1bde787</anchor>
      <arglist>(const Translation &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ab196fae8e4a2416f39c4af660be39a86</anchor>
      <arglist>(const UniformScaling&lt; Scalar &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a5d4b3716344d667d46ac499d14ed410b</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear) const</arglist>
    </member>
    <member kind="function">
      <type>IsometryTransformType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a05220c59ce0530bb61966244599b8438</anchor>
      <arglist>(const RotationBase&lt; Derived, Dim &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>Transform&lt; Scalar, Dim, Mode &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ac8090d6eddc415d0d788b569c4f327b6</anchor>
      <arglist>(const Transform&lt; Scalar, Dim, Mode, Options &gt; &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>internal::enable_if&lt; Derived::IsVectorAtCompileTime, VectorType &gt;::type</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a11f1bd7eb645d784d7c8f9cb6faa25a6</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a7e74484699e17444c6d660c17117bf7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aef1fd431ac3f2197a8e33ce6d4163061</anchor>
      <arglist>(const VectorType &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Translation</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a3048c4c2cf095548454aef051af5a036</anchor>
      <arglist>(const Translation&lt; OtherScalarType, Dim &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a8e30e156676c7be9664e9f09860071dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>x</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>afecb7411a94188136c5e08ee3ba6f951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>aa2302dd0093797e913a7f8d58fba8a79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>y</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>afebd7c1aec9a5547c50a0ff9a4cb1fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>ac6e9e75f12c67ccd2aa6741a0531af84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>z</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>a91d0b27ab6a76fc235524bf00f15266c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend AffineTransformType</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1Translation.html</anchorfile>
      <anchor>af8cb8a3b24fb8d735d4231975850fdab</anchor>
      <arglist>(const EigenBase&lt; OtherDerived &gt; &amp;linear, const Translation &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpose</name>
    <filename>classEigen_1_1Transpose.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>const internal::remove_all&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>a2c3b67044dd52dc3233494234899189f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>internal::remove_reference&lt; MatrixTypeNested &gt;::type &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1Transpose.html</anchorfile>
      <anchor>abf80ae3ec4c4fdee79ba5ef8fd0298d3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Transpositions</name>
    <filename>classEigen_1_1Transpositions.html</filename>
    <templarg>SizeAtCompileTime</templarg>
    <templarg>MaxSizeAtCompileTime</templarg>
    <templarg>_StorageIndex</templarg>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a786fd676c156124025aaf446d811d14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a678dfbd513871473bcd36bbc453eed8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transpositions &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a991cbd0dcd647b414bbfdbacb642dbbd</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>aae3eb58072f5b26f3851925eec5a006f</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a415e07d885093f3f256394f59d4986f4</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a6a02dae883f9bc072de3268e1696d0ba</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Transpositions&lt; RowsAtCompileTime, MaxRowsAtCompileTime &gt;</name>
    <filename>classEigen_1_1Transpositions.html</filename>
    <member kind="function">
      <type>const IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a786fd676c156124025aaf446d811d14f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IndicesType &amp;</type>
      <name>indices</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a678dfbd513871473bcd36bbc453eed8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Transpositions &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a991cbd0dcd647b414bbfdbacb642dbbd</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>aae3eb58072f5b26f3851925eec5a006f</anchor>
      <arglist>(const TranspositionsBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a415e07d885093f3f256394f59d4986f4</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Transpositions</name>
      <anchorfile>classEigen_1_1Transpositions.html</anchorfile>
      <anchor>a6a02dae883f9bc072de3268e1696d0ba</anchor>
      <arglist>(Index size)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Eigen::TranspositionsStorage</name>
    <filename>structEigen_1_1TranspositionsStorage.html</filename>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularBase</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <templarg>Derived</templarg>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af22d7108717fb76f39347bbdc6ada150a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af22d7108717fb76f39347bbdc6ada150a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularBase&lt; SelfAdjointView&lt; _MatrixType, UpLo &gt; &gt;</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af22d7108717fb76f39347bbdc6ada150a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TriangularBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</name>
    <filename>classEigen_1_1TriangularBase.html</filename>
    <base>Eigen::EigenBase</base>
    <member kind="enumvalue">
      <name>SizeAtCompileTime</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>af22d7108717fb76f39347bbdc6ada150a41d03efb5f764a9e647974c83581ca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCoeff</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a0abe130a9130ac6df16f3c8c55490b43</anchor>
      <arglist>(Index row, Index col, Other &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalTo</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>a604d4f76a376ced36f8b9c3374c76c3e</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularBase.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularView</name>
    <filename>classEigen_1_1TriangularView.html</filename>
    <templarg>_MatrixType</templarg>
    <templarg>_Mode</templarg>
    <member kind="function">
      <type>const AdjointReturnType</type>
      <name>adjoint</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aaa336e1b759eea3050139bcdd55f8349</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>cols</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>afe460d4d788a96183e738db66740fb31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConjugateReturnType</type>
      <name>conjugate</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a53c6a7764a6610f4955788f6134a8d78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Scalar</type>
      <name>determinant</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ab8cd6bfc705c0c05a6755ae7437376f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a02fdc4b367a9c83f7e2e706037558dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NestedExpression &amp;</type>
      <name>nestedExpression</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a5877fec0b1cd3727d08218f9938abf96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>rows</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a297c1437532f044e04c59db7ee3890f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a408d1e6601f83ae8b7cd5edc8ad313a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SelfAdjointView&lt; MatrixTypeNestedNonRef, Mode &gt;</type>
      <name>selfadjointView</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>a669d39567c1a2f805582c7538f2752b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>ac9efe6f446781eb1eb6e62d4a7707fd4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ConstTransposeReturnType</type>
      <name>transpose</name>
      <anchorfile>classEigen_1_1TriangularView.html</anchorfile>
      <anchor>aa45efa0f1d6f8c009b75a4f6fc00e063</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</name>
    <filename>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</filename>
    <templarg></templarg>
    <templarg>_Mode</templarg>
    <base>TriangularBase&lt; TriangularView&lt; _MatrixType, _Mode &gt; &gt;</base>
    <member kind="function">
      <type>Scalar</type>
      <name>coeff</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a51093bbf9d6c6bad6a8afee9c93d4b3f</anchor>
      <arglist>(Index row, Index col) const</arglist>
    </member>
    <member kind="function">
      <type>Scalar &amp;</type>
      <name>coeffRef</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>afb8cc8b16f27fa263757506e818f3e7f</anchor>
      <arglist>(Index row, Index col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evalToLazy</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ab8db3e55eee50cdc56650b3498e235eb</anchor>
      <arglist>(MatrixBase&lt; DenseDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ab1086025ddef904f5fae0282de474d24</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>innerStride</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ad3252106d7e004d3410238cab92e3258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; TriangularViewType, OtherDerived &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>ae51f00c8fd8f55cf0f9c5007617c5bac</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a60479e365866cdd68076e28bb89171a2</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a1d2edf8ab80733b8b2620d8c2a3100d3</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a79ff0326cd78da5bb2bdc4a88f5428c9</anchor>
      <arglist>(const DenseBase&lt; Other &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>af1b9165f5ab6b57a8305c0dc359adf7c</anchor>
      <arglist>(const typename internal::traits&lt; MatrixType &gt;::Scalar &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a556c7e90c64e86a3a8e722989dda1bc6</anchor>
      <arglist>(const TriangularBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a09db8ccbd4b2da7c7e8d520458166cc1</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>outerStride</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>afe47788156e483b9025ab320cc7f925e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setConstant</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a02574e5085e789ff9840d2b708e0126f</anchor>
      <arglist>(const Scalar &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setOnes</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a4e6b3b2af8d0d6d06d14ec3c7092cffc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>TriangularViewType &amp;</type>
      <name>setZero</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a7530e86074859407aaec5132549b40ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const internal::triangular_solve_retval&lt; Side, TriangularViewType, Other &gt;</type>
      <name>solve</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a911664ccf5522c778ffc5405247e8a59</anchor>
      <arglist>(const MatrixBase&lt; Other &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a43bae99c287250d6092c8f8d1ba90e91</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a4e16e0824796bfa218cc91da98fe05b1</anchor>
      <arglist>(TriangularBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a92162527b80522093c0dd182bc7d9a6b</anchor>
      <arglist>(MatrixBase&lt; OtherDerived &gt; const &amp;other)</arglist>
    </member>
    <member kind="friend">
      <type>friend const Product&lt; OtherDerived, TriangularViewType &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01__MatrixType_00_01__Mode_00_01Dense_01_4.html</anchorfile>
      <anchor>a4d37a22c9744c30486fb953a11569448</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;lhs, const TriangularViewImpl &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</name>
    <filename>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</filename>
    <templarg></templarg>
    <templarg>Mode</templarg>
    <base>SparseMatrixBase&lt; TriangularView&lt; MatrixType, Mode &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</anchorfile>
      <anchor>a3f3385e827fcc0bf27d1ec21c80740bc</anchor>
      <arglist>(MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solveInPlace</name>
      <anchorfile>classEigen_1_1TriangularViewImpl_3_01MatrixType_00_01Mode_00_01Sparse_01_4.html</anchorfile>
      <anchor>a70190d4105e1fd4f27abbf73365dfa0c</anchor>
      <arglist>(SparseMatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Tridiagonalization</name>
    <filename>classEigen_1_1Tridiagonalization.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>HouseholderSequence&lt; MatrixType, typename internal::remove_all&lt; typename CoeffVectorType::ConjugateReturnType &gt;::type &gt;</type>
      <name>HouseholderSequenceType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>af322315c8bea9990152c9d09bfa2a69f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a7bd1f9fccec1e93b77a2214b2d30aae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>_MatrixType</type>
      <name>MatrixType</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>add0f4b2216d0ea8ee0f7d8525deaf0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Tridiagonalization &amp;</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>acd288abb081d3b40b87e4b98cd8f6ee9</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalReturnType</type>
      <name>diagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a0b7ff4860aa6f7c0761b1059c012fd8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoeffVectorType</type>
      <name>householderCoefficients</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ac95b4e43dcf6c3c5074b8bea4fc67887</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequenceType</type>
      <name>matrixQ</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a000f7392eda930576ffd2af1fae54af2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MatrixTReturnType</type>
      <name>matrixT</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a6eb5ef94b8b9bb013c0e69b6df56d0df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MatrixType &amp;</type>
      <name>packedMatrix</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a47858b3895e64acafb1bb2e97f98a154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SubDiagonalReturnType</type>
      <name>subDiagonal</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>ac423dbb91157c159bdcb4b5a8371232e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a9ea2e6154bf35494ee68e037f0867cbd</anchor>
      <arglist>(Index size=Size==Dynamic ? 2 :Size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Tridiagonalization</name>
      <anchorfile>classEigen_1_1Tridiagonalization.html</anchorfile>
      <anchor>a05406b7df9a92fdcba72d31443f67a98</anchor>
      <arglist>(const EigenBase&lt; InputType &gt; &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::Triplet</name>
    <filename>classEigen_1_1Triplet.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>const StorageIndex &amp;</type>
      <name>col</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a3531e3e2098507a069a368d72d46471e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StorageIndex &amp;</type>
      <name>row</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>ae88b0ad6d31daa53e298b9cc4201fdee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Scalar &amp;</type>
      <name>value</name>
      <anchorfile>classEigen_1_1Triplet.html</anchorfile>
      <anchor>a003ea53c6559b106406f7916d6610547</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::UmfPackLU</name>
    <filename>classEigen_1_1UmfPackLU.html</filename>
    <templarg></templarg>
    <base>SparseSolverBase&lt; UmfPackLU&lt; _MatrixType &gt; &gt;</base>
    <member kind="function">
      <type>void</type>
      <name>analyzePattern</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>ac7ea28b2017d6b26b7b08497f294e5e6</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compute</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a05fb2b5717ebd67e46b83439721ceee7</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>factorize</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a1471bf890503e743c45d75cc02a5345d</anchor>
      <arglist>(const InputMatrixType &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>ComputationInfo</type>
      <name>info</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a68738a0d99c67316877706f98b033402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUmfpackControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a1e3543c0e6ae499e3d25f5a8a8f50623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUmfpackInfo</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a9b42dd0135fc9bcffec37f043022f135</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printUmfpackStatus</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>aea06a54a1e4e8fc1ec522103825cc7b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const UmfpackControl &amp;</type>
      <name>umfpackControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>ae83d178202f3d44c1789c1c93842bf2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>UmfpackControl &amp;</type>
      <name>umfpackControl</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a679bd267a0407d4ca985d97f0b864101</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>umfpackFactorizeReturncode</name>
      <anchorfile>classEigen_1_1UmfPackLU.html</anchorfile>
      <anchor>a822fa9d82754269c379dc4ce17920b0a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorBlock</name>
    <filename>classEigen_1_1VectorBlock.html</filename>
    <templarg>VectorType</templarg>
    <templarg>Size</templarg>
    <base>Block&lt; VectorType, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit ? 1 :Size, internal::traits&lt; VectorType &gt;::Flags &amp;RowMajorBit ? Size :1 &gt;</base>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>a11a5f0478de60b9cd8c15faf6dbc5baf</anchor>
      <arglist>(VectorType &amp;vector, Index start, Index size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorBlock</name>
      <anchorfile>classEigen_1_1VectorBlock.html</anchorfile>
      <anchor>a2364b6e64015c451ed93b68d39eaeffd</anchor>
      <arglist>(VectorType &amp;vector, Index start)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::VectorwiseOp</name>
    <filename>classEigen_1_1VectorwiseOp.html</filename>
    <templarg>ExpressionType</templarg>
    <templarg>Direction</templarg>
    <member kind="typedef">
      <type>Eigen::Index</type>
      <name>Index</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4907c654e5810edd98e4162093b19532</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const AllReturnType</type>
      <name>all</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9c2b4740bf190492bf231d8e244b25c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AnyReturnType</type>
      <name>any</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a96210c9f83bd375f8ce862bd62ab70e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a0cd91f462f8d3e4e5593a82351fb9a40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BlueNormReturnType</type>
      <name>blueNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a4d2fbc5296470a94379cbcb33bb9c24d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cbegin</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7b237a2b46479de5c905d2bcc54f34c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>cend</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a57859b88a32b8b393a427c4cab3581a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CountReturnType</type>
      <name>count</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a5c6b797457895f11a7682b3a16f263bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga2fe1a2a012ce0ab0e8da6af134073039</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ad44b6a7dc3168a171f6bb206889ecbdc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga1f220045efa302626c287088b63b6ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf99305a3d7432318236df7b80022df37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HypotNormReturnType</type>
      <name>hypotNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a00c44e033eec33586ae8093a6366da75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LpNormReturnType&lt; p &gt;::Type</type>
      <name>lpNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa9c2cad38085e7f5f9bc2598eff249f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MaxCoeffReturnType</type>
      <name>maxCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6646b584db116c1661b5bb56750bd6f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeanReturnType</type>
      <name>mean</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aaf7d867f9e6b74a1bc7f108d646cfa85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MinCoeffReturnType</type>
      <name>minCoeff</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7d7b8c03d180b126fde0ac212e2b0b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormReturnType</type>
      <name>norm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>af726d1dfd9a7a67b76e639db1a9f352e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>adb1084153780dc8d2c062fee97651a45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename OppositeExtendedType&lt; NormReturnType &gt;::Type &gt;</type>
      <name>normalized</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aca6ac44a9bf819d5d64c2cb54bf38095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_product_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator *</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a5c10e0b108397ebd213d00ac6a9a8f99</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator *=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a10abb2f82ebd200c08aaea319588437f</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_sum_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator+</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a713694459d81b76e4f2a78e4d169f8d6</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator+=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a23ce2522d11c3362ca22252b2876812b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_difference_op&lt; Scalar, typename OtherDerived::Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator-</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a5e60616620df132d665b301bb9a304c4</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator-=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a6bb3a7315617f86f0c28ac05816cf6e3</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CwiseBinaryOp&lt; internal::scalar_quotient_op&lt; Scalar &gt;, const ExpressionTypeNestedCleaned, const typename ExtendedType&lt; OtherDerived &gt;::Type &gt;</type>
      <name>operator/</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aa154a8407885a9ad51504180f6d7a163</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator/=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9efa0b81915c31535a929a46a79cab2b</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ExpressionType &amp;</type>
      <name>operator=</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7999eb8f50bb19ade54f3212d3c79680</anchor>
      <arglist>(const DenseBase&lt; OtherDerived &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ProdReturnType</type>
      <name>prod</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a01bcd17504f30b55b4910ddb75598f79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ReduxReturnType&lt; BinaryOp &gt;::Type</type>
      <name>redux</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ae92babb33ed5a91eb0c4de80a97eafca</anchor>
      <arglist>(const BinaryOp &amp;func=BinaryOp()) const</arglist>
    </member>
    <member kind="function">
      <type>const ReplicateReturnType</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a5f0c8dc9e9c4aeaa2057f15800f5c18c</anchor>
      <arglist>(Index factor) const</arglist>
    </member>
    <member kind="function">
      <type>const Replicate&lt; ExpressionType, isVertical *Factor+isHorizontal, isHorizontal *Factor+isVertical &gt;</type>
      <name>replicate</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a81bfb88fe6415c7bfd9bdf15ef608aaa</anchor>
      <arglist>(Index factor=Factor) const</arglist>
    </member>
    <member kind="function">
      <type>const ConstReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>aeb0428f561b5757e2c85e8d72022eec1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ReverseReturnType</type>
      <name>reverse</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ab8caf5367e2bd636536c8a0e0c89fe15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reverseInPlace</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>ab9dd7c273eb2ba8defaab2d55156936b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SquaredNormReturnType</type>
      <name>squaredNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a01474cf971473a73c919f6a99323d4f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const StableNormReturnType</type>
      <name>stableNorm</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>add48fd836be98ed280cac23518db0916</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const SumReturnType</type>
      <name>sum</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a7030fc687c24d687ed7cd70733ba611c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>random_access_iterator_type</type>
      <name>const_iterator</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a595c33d2a82427a1159568b0b8438554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>random_access_iterator_type</type>
      <name>iterator</name>
      <anchorfile>classEigen_1_1VectorwiseOp.html</anchorfile>
      <anchor>a9fb8aaf24528efcdac1782aacf99b8dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Eigen::WithFormat</name>
    <filename>classEigen_1_1WithFormat.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="namespace">
    <name>Eigen</name>
    <filename>namespaceEigen.html</filename>
    <namespace>Eigen::indexing</namespace>
    <namespace>Eigen::symbolic</namespace>
    <class kind="class">Eigen::aligned_allocator</class>
    <class kind="class">Eigen::AlignedBox</class>
    <class kind="class">Eigen::AMDOrdering</class>
    <class kind="class">Eigen::AngleAxis</class>
    <class kind="class">Eigen::ArithmeticSequence</class>
    <class kind="class">Eigen::Array</class>
    <class kind="class">Eigen::ArrayBase</class>
    <class kind="class">Eigen::ArrayWrapper</class>
    <class kind="struct">Eigen::ArrayXpr</class>
    <class kind="class">Eigen::BDCSVD</class>
    <class kind="class">Eigen::BiCGSTAB</class>
    <class kind="class">Eigen::Block</class>
    <class kind="class">Eigen::BlockImpl&lt; XprType, BlockRows, BlockCols, InnerPanel, Sparse &gt;</class>
    <class kind="class">Eigen::CholmodBase</class>
    <class kind="class">Eigen::CholmodDecomposition</class>
    <class kind="class">Eigen::CholmodSimplicialLDLT</class>
    <class kind="class">Eigen::CholmodSimplicialLLT</class>
    <class kind="class">Eigen::CholmodSupernodalLLT</class>
    <class kind="class">Eigen::COLAMDOrdering</class>
    <class kind="class">Eigen::ColPivHouseholderQR</class>
    <class kind="class">Eigen::CommaInitializer</class>
    <class kind="class">Eigen::CompleteOrthogonalDecomposition</class>
    <class kind="class">Eigen::ComplexEigenSolver</class>
    <class kind="class">Eigen::ComplexSchur</class>
    <class kind="class">Eigen::ConjugateGradient</class>
    <class kind="class">Eigen::CwiseBinaryOp</class>
    <class kind="class">Eigen::CwiseNullaryOp</class>
    <class kind="class">Eigen::CwiseTernaryOp</class>
    <class kind="class">Eigen::CwiseUnaryOp</class>
    <class kind="class">Eigen::CwiseUnaryView</class>
    <class kind="struct">Eigen::Dense</class>
    <class kind="class">Eigen::DenseBase</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Diagonal</class>
    <class kind="class">Eigen::DiagonalMatrix</class>
    <class kind="class">Eigen::DiagonalPreconditioner</class>
    <class kind="class">Eigen::DiagonalWrapper</class>
    <class kind="class">Eigen::EigenBase</class>
    <class kind="class">Eigen::EigenSolver</class>
    <class kind="class">Eigen::ForceAlignedAccess</class>
    <class kind="class">Eigen::FullPivHouseholderQR</class>
    <class kind="class">Eigen::FullPivLU</class>
    <class kind="class">Eigen::GeneralizedEigenSolver</class>
    <class kind="class">Eigen::GeneralizedSelfAdjointEigenSolver</class>
    <class kind="class">Eigen::HessenbergDecomposition</class>
    <class kind="class">Eigen::Homogeneous</class>
    <class kind="class">Eigen::HouseholderQR</class>
    <class kind="class">Eigen::HouseholderSequence</class>
    <class kind="class">Eigen::Hyperplane</class>
    <class kind="class">Eigen::IdentityPreconditioner</class>
    <class kind="class">Eigen::IncompleteCholesky</class>
    <class kind="class">Eigen::IncompleteLUT</class>
    <class kind="class">Eigen::IndexedView</class>
    <class kind="class">Eigen::InnerStride</class>
    <class kind="class">Eigen::Inverse</class>
    <class kind="class">Eigen::IOFormat</class>
    <class kind="class">Eigen::IterativeSolverBase</class>
    <class kind="class">Eigen::JacobiRotation</class>
    <class kind="class">Eigen::JacobiSVD</class>
    <class kind="class">Eigen::LDLT</class>
    <class kind="class">Eigen::LeastSquareDiagonalPreconditioner</class>
    <class kind="class">Eigen::LeastSquaresConjugateGradient</class>
    <class kind="class">Eigen::LLT</class>
    <class kind="class">Eigen::Map</class>
    <class kind="class">Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; SparseMatrixType &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::MappedSparseMatrix</class>
    <class kind="class">Eigen::Matrix</class>
    <class kind="class">Eigen::MatrixBase</class>
    <class kind="class">Eigen::MatrixWrapper</class>
    <class kind="struct">Eigen::MatrixXpr</class>
    <class kind="class">Eigen::MetisOrdering</class>
    <class kind="class">Eigen::NaturalOrdering</class>
    <class kind="class">Eigen::NestByValue</class>
    <class kind="class">Eigen::NoAlias</class>
    <class kind="class">Eigen::NumTraits</class>
    <class kind="class">Eigen::OuterStride</class>
    <class kind="class">Eigen::ParametrizedLine</class>
    <class kind="class">Eigen::PardisoLDLT</class>
    <class kind="class">Eigen::PardisoLLT</class>
    <class kind="class">Eigen::PardisoLU</class>
    <class kind="class">Eigen::PartialPivLU</class>
    <class kind="class">Eigen::PartialReduxExpr</class>
    <class kind="class">Eigen::PastixLDLT</class>
    <class kind="class">Eigen::PastixLLT</class>
    <class kind="class">Eigen::PastixLU</class>
    <class kind="class">Eigen::PermutationBase</class>
    <class kind="class">Eigen::PermutationMatrix</class>
    <class kind="struct">Eigen::PermutationStorage</class>
    <class kind="class">Eigen::PermutationWrapper</class>
    <class kind="class">Eigen::PlainObjectBase</class>
    <class kind="class">Eigen::Product</class>
    <class kind="class">Eigen::Quaternion</class>
    <class kind="class">Eigen::QuaternionBase</class>
    <class kind="class">Eigen::RealQZ</class>
    <class kind="class">Eigen::RealSchur</class>
    <class kind="class">Eigen::Ref</class>
    <class kind="class">Eigen::Ref&lt; SparseMatrixType, Options &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseVectorType &gt;</class>
    <class kind="class">Eigen::Replicate</class>
    <class kind="class">Eigen::Reshaped</class>
    <class kind="class">Eigen::Reverse</class>
    <class kind="class">Eigen::Rotation2D</class>
    <class kind="class">Eigen::RotationBase</class>
    <class kind="class">Eigen::ScalarBinaryOpTraits</class>
    <class kind="class">Eigen::Select</class>
    <class kind="class">Eigen::SelfAdjointEigenSolver</class>
    <class kind="class">Eigen::SelfAdjointView</class>
    <class kind="class">Eigen::SimplicialCholesky</class>
    <class kind="class">Eigen::SimplicialCholeskyBase</class>
    <class kind="class">Eigen::SimplicialLDLT</class>
    <class kind="class">Eigen::SimplicialLLT</class>
    <class kind="class">Eigen::Solve</class>
    <class kind="class">Eigen::SolverBase</class>
    <class kind="struct">Eigen::SolverStorage</class>
    <class kind="class">Eigen::SolveWithGuess</class>
    <class kind="struct">Eigen::Sparse</class>
    <class kind="class">Eigen::SparseCompressedBase</class>
    <class kind="class">Eigen::SparseLU</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::SparseMatrix</class>
    <class kind="class">Eigen::SparseMatrixBase</class>
    <class kind="class">Eigen::SparseQR</class>
    <class kind="class">Eigen::SparseSelfAdjointView</class>
    <class kind="class">Eigen::SparseSolverBase</class>
    <class kind="class">Eigen::SparseVector</class>
    <class kind="class">Eigen::SparseView</class>
    <class kind="class">Eigen::SPQR</class>
    <class kind="class">Eigen::Stride</class>
    <class kind="class">Eigen::SuperILU</class>
    <class kind="class">Eigen::SuperLU</class>
    <class kind="class">Eigen::SuperLUBase</class>
    <class kind="class">Eigen::SVDBase</class>
    <class kind="class">Eigen::Transform</class>
    <class kind="class">Eigen::Translation</class>
    <class kind="class">Eigen::Transpose</class>
    <class kind="class">Eigen::Transpositions</class>
    <class kind="struct">Eigen::TranspositionsStorage</class>
    <class kind="class">Eigen::TriangularBase</class>
    <class kind="class">Eigen::TriangularView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</class>
    <class kind="class">Eigen::Tridiagonalization</class>
    <class kind="class">Eigen::Triplet</class>
    <class kind="class">Eigen::UmfPackLU</class>
    <class kind="class">Eigen::VectorBlock</class>
    <class kind="class">Eigen::VectorwiseOp</class>
    <class kind="class">Eigen::WithFormat</class>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Affine &gt;</type>
      <name>Affine2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac1c9dbf666dc310b51253302a01136fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Affine &gt;</type>
      <name>Affine2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gae90bfea5b980efcaadf9168ae6481d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Affine &gt;</type>
      <name>Affine3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab0c57680a4d0de53bc749378b0320175</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Affine &gt;</type>
      <name>Affine3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga3902f2f19737ec9f16189e218919c505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, AffineCompact &gt;</type>
      <name>AffineCompact2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga635eb91d48c86041a21d7616fff7888e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, AffineCompact &gt;</type>
      <name>AffineCompact2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gae88f296fba2a506eb3397569d762da27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, AffineCompact &gt;</type>
      <name>AffineCompact3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabcf74c0e194ea4e487284e28a9817a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, AffineCompact &gt;</type>
      <name>AffineCompact3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga372437883db5fe0332141ae30d4f501a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 1 &gt;</type>
      <name>AlignedBox1d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga8f193812dd7f209bf0cad4c204467c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 1 &gt;</type>
      <name>AlignedBox1f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga6262856e3cd000754aac5cd8b5506abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 1 &gt;</type>
      <name>AlignedBox1i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gaa6152017f242b0c811edf11b0a74b2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 2 &gt;</type>
      <name>AlignedBox2d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga7b82b79645c51953a3f6f2c1841b38cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 2 &gt;</type>
      <name>AlignedBox2f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga5dfeb2a4a9162a4f27d6ff44373b1aa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 2 &gt;</type>
      <name>AlignedBox2i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gac69f837670aa6b0ad5dd79fa95b09878</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 3 &gt;</type>
      <name>AlignedBox3d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga857f74d00f22da880085f4512fbbd0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 3 &gt;</type>
      <name>AlignedBox3f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga9ca01b681ac1194d21c1915f894093fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 3 &gt;</type>
      <name>AlignedBox3i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga031551164f3e7e4c3706fbd35385da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 4 &gt;</type>
      <name>AlignedBox4d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gadea1e208f9105033b34ab1fc8a83c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 4 &gt;</type>
      <name>AlignedBox4f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga1b0642044b450ce5ba6a98f5c243196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 4 &gt;</type>
      <name>AlignedBox4i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga5d962468fe5a40846eda27494bbd2892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, Dynamic &gt;</type>
      <name>AlignedBoxXd</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga83a204d009da25fa06405ab344612916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, Dynamic &gt;</type>
      <name>AlignedBoxXf</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga4a5585f62619c15418cfd942768e900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, Dynamic &gt;</type>
      <name>AlignedBoxXi</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga9e7bd21661222f194acf20831a90b11a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 2 &gt;</type>
      <name>AlignedScaling2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf8975289b8134a5021e806029516e82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 2 &gt;</type>
      <name>AlignedScaling2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf2440178a1f5f6abef6ee0231bc49184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 3 &gt;</type>
      <name>AlignedScaling3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0aff001d5740f13797c9acd4e3276673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 3 &gt;</type>
      <name>AlignedScaling3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga45caf8b0e6da378885f4ae3f06c5cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; double &gt;</type>
      <name>AngleAxisd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaed936d6e9192d97f00a9608081fa9b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; float &gt;</type>
      <name>AngleAxisf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad823b9c674644b14d950fbfe165dfdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EIGEN_DEFAULT_DENSE_INDEX_TYPE</type>
      <name>Index</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a62e77e0933482dafde8fe197d9a2cfde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Isometry &gt;</type>
      <name>Isometry2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga517183233a93969160a02b10d0a898f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Isometry &gt;</type>
      <name>Isometry2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8262f9f26bd97dbb1688a10ca323e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Isometry &gt;</type>
      <name>Isometry3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5a91dba9c396daa1eb0a4d08566c4e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Isometry &gt;</type>
      <name>Isometry3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad3de6a5dfd9da64bf0970995f9cbc032</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 2 &gt;</type>
      <name>Matrix2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga202b9ee6eca6f9329f0ab85669cbff2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 2 &gt;</type>
      <name>Matrix2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga72a19eccc523e6a3be2d2f6d5eb3e8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 2 &gt;</type>
      <name>Matrix2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3b934095f8a2834e6cc27267427239d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 2 &gt;</type>
      <name>Matrix2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga36b8989b6aa63020139fc36bae6979e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 2 &gt;</type>
      <name>Matrix2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga757e178bb30b809f0aef66d97ced667a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab83cc34f0c5f22f4b5d1f251b41e3068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4890c18b6e495d05214e358163cf9a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, Dynamic &gt;</type>
      <name>Matrix2Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4337b95add7532543e2ce8a953076efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, Dynamic &gt;</type>
      <name>Matrix2Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad815a2f2444e6e80ed274156f1a8bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, Dynamic &gt;</type>
      <name>Matrix2Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga697370341f5c160df998ea3cc6b90a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 3 &gt;</type>
      <name>Matrix3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab92ee2a1f008a7fda01345b0f22e814e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 3 &gt;</type>
      <name>Matrix3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4b9c3ac3acf9aa95aabc184d015477ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 3 &gt;</type>
      <name>Matrix3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga84e9fd068879d808012bb6d5dbfecb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga276bae130c142e906ad8f47d24d11c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 3 &gt;</type>
      <name>Matrix3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf5dfa8fd62427c5f3c8035daf15ebfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7730c67f4db8a69633b2738f3394e4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga381cbe412d5b16b7194cf6024575c0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, Dynamic &gt;</type>
      <name>Matrix3Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c97aab588823ad481ba656e3e77f4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, Dynamic &gt;</type>
      <name>Matrix3Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8679d666af201be0bcd40f3e35a65d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, Dynamic &gt;</type>
      <name>Matrix3Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga050deb0b1fceba1f4ae6c113fa85983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 4 &gt;</type>
      <name>Matrix4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf2b40d33e069e1116ce298c91947dab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 4 &gt;</type>
      <name>Matrix4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac05645759f6bda0aafa5839eaa9b7e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 4 &gt;</type>
      <name>Matrix4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga31c5fac458c04196a36b36b5e51127ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 4 &gt;</type>
      <name>Matrix4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3a5de8dfef28d29aed525611e15a37e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 4 &gt;</type>
      <name>Matrix4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gace49b1dc3432f8a6639966a2cb7178be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7d5c04644430644d2df94149a9b4a830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0d1bc5571d4dc974b5884724b2fbc548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, Dynamic &gt;</type>
      <name>Matrix4Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga48026f4398fac445e40ef6dbef982202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, Dynamic &gt;</type>
      <name>Matrix4Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6a832fa39493771bd8a8db716ce7f05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, Dynamic &gt;</type>
      <name>Matrix4Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab3f7dcab7284ffec9367b4dd8af38c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6d1c2d28ca0068cd17cf6d2cf8c58a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c2ba6c656edea6168744a32fecc44fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 2 &gt;</type>
      <name>MatrixX2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac447f0605e611b96777be797b3b00aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 2 &gt;</type>
      <name>MatrixX2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaca57522dfcdf33fe23b1925dad42a529</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 2 &gt;</type>
      <name>MatrixX2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2d5bc3edbf7bc373d9aea75021a41733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9027279bf1b1442cc00fd366853de805</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7991a54e93d17e57b16f2c4d672ec2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 3 &gt;</type>
      <name>MatrixX3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0b3c70c1132399eef6137425c0c963e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 3 &gt;</type>
      <name>MatrixX3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gafab4934976aa4c2954363e167fcb5750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 3 &gt;</type>
      <name>MatrixX3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac23a801a13cca1f7b2731f633dc5ca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c6d62ca622265a1632550ce3c412f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0ac53bad0c095e5d423577c3b53a869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 4 &gt;</type>
      <name>MatrixX4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2a4086b6a21c25cc8484a5251079b71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 4 &gt;</type>
      <name>MatrixX4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8866ec0bb7508768dc612c3bbab824ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 4 &gt;</type>
      <name>MatrixX4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga72375f7b6a11e8ee10bc3f65c6e4501e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaadf0b25f5437fbddaf84324419418be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae40207c482eaada1403778d301236443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, Dynamic &gt;</type>
      <name>MatrixXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga99b41a69f0bf64eadb63a97f357ab412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, Dynamic &gt;</type>
      <name>MatrixXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga731599f782380312960376c43450eb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, Dynamic &gt;</type>
      <name>MatrixXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaceba5f63d4040c79c44109590d4fa606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Projective &gt;</type>
      <name>Projective2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad3b2e23c2704a22c957573bcaa362d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Projective &gt;</type>
      <name>Projective2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga20f7da72f3045561b8cf2dfaceed797f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Projective &gt;</type>
      <name>Projective3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga3d2c61fbea04b09e4925a2e321b8b67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Projective &gt;</type>
      <name>Projective3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0546746224f5fd54d47ac8390eaefdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quaterniond</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5daab8e66aa480465000308455578830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quaternionf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga66aa915a26d698c60ed206818c3e4c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga4289f38cc6ecf302e07d2365abc6a902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadaf7f3ee984d9828ca94d66355f0b226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, 0 &gt;</type>
      <name>QuaternionMapd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga89412d1dcf23537e5990dfb3089ace76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, 0 &gt;</type>
      <name>QuaternionMapf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga867ff508ac860bdf7cab3b8a8fc1048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; double &gt;</type>
      <name>Rotation2Dd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab7af1ccdfb6c865c27fe1fd6bd9e759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; float &gt;</type>
      <name>Rotation2Df</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga35e2cace3ada497794734edb8bc33b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 2 &gt;</type>
      <name>RowVector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab1f67794cc63abeaeac2303f8baaf6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 2 &gt;</type>
      <name>RowVector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac2b1f854d4fdaad31d3f41f02eec5bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 2 &gt;</type>
      <name>RowVector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga75fd569f64b8c47a2195585fabf21d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 2 &gt;</type>
      <name>RowVector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0057b99444743f618a942e846c1432d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 2 &gt;</type>
      <name>RowVector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9f54d6a47f5267f83c415ac54f5a89f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 3 &gt;</type>
      <name>RowVector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaece35a42352af994c0e6864e92eb46aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 3 &gt;</type>
      <name>RowVector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabaa2e91eec7f84fbfb5f910a573b9fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 3 &gt;</type>
      <name>RowVector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1c5edbdbd375cabcbe35f8ab6fccc836</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 3 &gt;</type>
      <name>RowVector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaea2a29181eaf9dd766d5394da2724db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 3 &gt;</type>
      <name>RowVector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6bc0fc46d6e2df231690cea03c97da33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 4 &gt;</type>
      <name>RowVector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gadf0fe3d8b49c8d2d0a6e67be0edc26bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 4 &gt;</type>
      <name>RowVector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabb8a0afce8775b057184dfb63da1f2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 4 &gt;</type>
      <name>RowVector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga686a79ab124a0e5ef838a46604cc4532</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 4 &gt;</type>
      <name>RowVector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga49cdd96ba38be2b15754cf49a244f47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 4 &gt;</type>
      <name>RowVector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8925ca20a1b04cafb29e08196b9d0dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5a0dc428a53c3770f93b62355ec5c85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabec6d6bbab3c6dcb47c72283c1beed80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, Dynamic &gt;</type>
      <name>RowVectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga531c6af4be9297dbe53127a46c246e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, Dynamic &gt;</type>
      <name>RowVectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8e714721c8c4e7eb948e18fbcbdc76de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, Dynamic &gt;</type>
      <name>RowVectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga75533fcdd7b769126a8a16cd8e342330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 1 &gt;</type>
      <name>Vector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad5f721f41a05074197ffffe829663c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 1 &gt;</type>
      <name>Vector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaae03b4c7ee97240927a7a3d917a5f069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6c206cbf6f8f3b74bc63ecd362fc2ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 1 &gt;</type>
      <name>Vector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4cbcafbd33875f185289e750e90d0188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 1 &gt;</type>
      <name>Vector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3243031169188c73ed241df41cc979b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 1 &gt;</type>
      <name>Vector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1f9f0b80ba445671559b20b18900f1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 1 &gt;</type>
      <name>Vector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3b15db6013a02e43f7c913a1d250eee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 1 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaabb0b4639dc0b48e691e02e95873b0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 1 &gt;</type>
      <name>Vector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5ec9ce2d8adbcd6888f3fbf2e1c095a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 1 &gt;</type>
      <name>Vector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga837c23269fa22059fbfdca6c653bcc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 1 &gt;</type>
      <name>Vector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0817c8be0e5a087ea3a8127fd508aedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 1 &gt;</type>
      <name>Vector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaad0b8878654cbb4276617a3e417a1622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 1 &gt;</type>
      <name>Vector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9b2fcb53776a2829871f8a49009bef0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 1 &gt;</type>
      <name>Vector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae6a8e578d2848cc75f573c15a73bd9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 1 &gt;</type>
      <name>Vector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga46c6c866ea747e6bbd5c435eeaf6c365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga495330872c3cd279e5fd0419747ada55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaded8ea004065d07b12a363fe1ed36b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 1 &gt;</type>
      <name>VectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8554c6170729f01c7572574837ecf618</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 1 &gt;</type>
      <name>VectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8028d921d43acd5605eabad41c254ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 1 &gt;</type>
      <name>VectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf20e523ca57ee8ef0a945cd4703d2bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StandardCompressedFormat</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae487cf6649fb1e51339905c6c852b9eeabd3632507a3697fb48c77eff79851a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccessorLevels</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga9f93eac38eb83deb0e8dbd42ddf11d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadOnlyAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5daa1f2b0e6a668b11f2958940965d2b572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dabcadf08230fb1a5ef7b3195745d3a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5da50108ad00095928de06228470ceab09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectWriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dacbe59d09ba2fdf8eac127bff1a1f0234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignmentType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga45fe06e29902b7a2773de05ba27b47a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unaligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a4e19dd09d5ff42295ba1d72d12a46686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned8</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a9d99d7a9ff1da5c949bec22733bfba14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned16</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ad0b140cd97bc74365b51843d28379655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned32</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a8a380b1cd0c3e5a6cceac06f8235157a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned64</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a2639cfa1e8faac751556bc0009fe95a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned128</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a60057da2408e499b5656244d0b26cc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ae12d0f8f869c40c76128260af2242bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComputationInfo</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga85fad7b87587764e5cf6b513a9e0ee5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Success</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea671a2aeb0f527802806a441d58a80fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumericalIssue</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea1c6e20706575a629b27a105f07f1883b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoConvergence</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea6a68dfb88a8336108a30588bdf356c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidInput</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea580b2a3cafe585691e789f768fb729bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaafc7e22c8efbfefd5997e2cd9ec223e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecompositionOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gae3e239fb70022eb8747994cf5d68b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9fa9302d510cee20c26311154937e23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9aa7fb4e98834788d0b1b0f2b8467d2527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a36581f7c662f7def31efd500c284f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a540036417bfecf2e791a70948c227f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EigenvaluesOnly</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9afd06633f270207c373875fd7ca03e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeEigenvectors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a7f7d17fba3c9bb92158e346d5979d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ax_lBx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a5eb11a88a4bd445f58f1b24598d3848f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9a7d9813cec527e299a36b749b0f7e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9870817d373c41ba0dc7f6b5ab0895b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DirectionType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gad49a7b3738e273eb00932271b36127f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vertical</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7ae2efac6e74ecab5e3b0b1561c5ddf83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Horizontal</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a961c62410157b64033839488f4d7f7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BothDirections</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a04fefd61992e941d509a57bc44c59794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QRPreconditioners</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga46eba0d5c621f590b8cf1b53af31d56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea2e95bc818f975b19def01e93d240dece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea9c660eb3336bf8c77ce9d081ca07cbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd2e2f4875c5b4b6e602a433d90c4e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd745dcaff7019c5f918c68809e5ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gac22de43beeac7a78b384f99bed5cee0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheLeft</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba21b30a61e9cb10c967aec17567804007</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheRight</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba329fc3a54ceb2b6e0e73b400998b8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaacded1a18ae58b0f554751f6cdf9eb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a0103672ae41005ab03b4176c765afd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a77c993a8d9f6efe5c1159fb2ab07dd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutoAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13ad0e7f67d40bcde3d41c12849b16ce6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a56908522e51443a0aa0567f879c2e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformTraits</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaee59a86102f150923b0cac6d4ff05107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Isometry</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a84413028615d2d718bafd2dfb93dafef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Affine</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0872f0a82453aaae40339c33acbb31fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AffineCompact</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a8192e8fdb2ec3ec46d92956cc83ef490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Projective</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0f7338b8672884554e8642bce9e44183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UpLoType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga39e3366ff5554d731e7dc8bb642f83cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdaf581029282d421eee5aae14238c6f749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdafca2ccebb604f171656deb53e8c083c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2ef430bff6cc12c2d1e0ef01b95f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdac4dc554a61510151ddd5bafaf6040223</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda8f40b928c10a71ba03e5f75ad2a72fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdadd28224d7ea92689930be73c1b50b0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2424988b6fca98be70b595632753ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda7b37877e0b9b0df28c9c2b669a633265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfAdjoint</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdacf9ccb2016f8b9c0f3268f05a1e75821</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdad5381b2d1c8973a08303c94e7da02333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_abs_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>abs</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae27242789e7e62a8c42579b79be59b1a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_abs2_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>abs2</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a54cc34b64b4935307efc06d56cd531df</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_acos_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>acos</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3fe3a136370fefae062591304c6a7ebd</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_arg_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>arg</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa539408a09481d35961e11ee78793db1</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_asin_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>asin</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6c5c246b877ac331495d21e7a5d51616</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_atan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>atan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a230744e17147d12e8ef3f2fc3796f64f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_ceil_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>ceil</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aa73e38be0689a463ae14141b9cf89c35</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_conjugate_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>conj</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ab84f39a06a18e1ebb23f8be80345b79d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cos_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cos</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad01d50a42869218f1d54af13f71517a6</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cosh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cosh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a34b99a26a2a1e7ff985a5ace16eedfcb</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_cube_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>cube</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae04fac7e3068f05c3f01982554a21d80</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_digamma_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>digamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af40db84b3db19fe25fe2f77c429420e5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_erf_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>erf</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac336e0eba2b12dca8b01da1a006566c3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_erfc_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>erfc</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a17bcfbd19ed883ecf581f06ac1eeeb8c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_exp_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>exp</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae491aecf7dab66ac7e11008c5766694d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_expm1_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>expm1</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae7cb2544e4e745bc0067fe793e3f2f81</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const auto</type>
      <name>fix</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>gac01f234bce100e39e6928fdc470e5194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const auto</type>
      <name>fix</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga3ce50da8ca83238949c06afce1a4f3c7</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_floor_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>floor</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>abf03d773a87830bc7fde51bcd94c89a0</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType &gt;</type>
      <name>householderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga5f2b3f80cdf7ae96609e4a8d2e55e371</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_imag_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>imag</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a04d60a3c8a266f63c08e03615c1985c9</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_inverse_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>inverse</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae9de9064c3b832ee804c0e0957e80334</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isfinite_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isfinite</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aba24ec81dec745a00b7f33adead89811</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isinf_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isinf</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a1f1103712e337c4c96a05f949637a4c8</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_isnan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>isnan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a99adfc5178f3fd5488304284388b2a10</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>klu_solve</name>
      <anchorfile>group__KLUSupport__Module.html</anchorfile>
      <anchor>ga0d1961df082372806b114ad390fb45d0</anchor>
      <arglist>(klu_symbolic *Symbolic, klu_numeric *Numeric, Index ldim, Index nrhs, double B [], klu_common *Common, double)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lastN</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>acc01e5c7293dd3af76e79ae68cc87f77</anchor>
      <arglist>(SizeType size, IncrType incr) -&gt; decltype(seqN(Eigen::last-(size-fix&lt; 1 &gt;()) *incr, size, incr))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lastN</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a5564b99b116c725ef571f1a2f859acb1</anchor>
      <arglist>(SizeType size) -&gt; decltype(seqN(Eigen::last+fix&lt; 1 &gt;() -size, size))</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_lgamma_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>lgamma</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac2e6331628bb1989b7be6d7e42827649</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae8bb75ba4f5f30a7571146dbfa653c6d</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log10_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log10</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a25256faeec3ffd0f3615a0e1e45dfb14</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_log1p_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>log1p</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac5c8a2cded6b59628f2de04f24d2fff4</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_logistic_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>logistic</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>adb0b668da3480346f2fc81f229b570a6</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseDerived, PermDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af8f4a7cf8c421eb45551585c2e307e5e</anchor>
      <arglist>(const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix, const PermutationBase&lt; PermDerived &gt; &amp;perm)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; PermDerived, SparseDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a92db62cc1ca60a7df0feefc9b5404ff0</anchor>
      <arglist>(const PermutationBase&lt; PermDerived &gt; &amp;perm, const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; SparseDerived, Inverse&lt; PermutationType &gt;, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af08544db4ada2615d07808d67768aeb5</anchor>
      <arglist>(const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix, const InverseImpl&lt; PermutationType, PermutationStorage &gt; &amp;tperm)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; Inverse&lt; PermutationType &gt;, SparseDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae3b001b607bd118a8992b4578643a834</anchor>
      <arglist>(const InverseImpl&lt; PermutationType, PermutationStorage &gt; &amp;tperm, const SparseMatrixBase&lt; SparseDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixDerived, TranspositionsDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a5b8197c35de4c8691d7942b8b6b5af82</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;matrix, const TranspositionsBase&lt; TranspositionsDerived &gt; &amp;transpositions)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; TranspositionsDerived, MatrixDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a2b69e203389d79baca8862ec2e1a2d6b</anchor>
      <arglist>(const TranspositionsBase&lt; TranspositionsDerived &gt; &amp;transpositions, const MatrixBase&lt; MatrixDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>internal::matrix_type_times_scalar_type&lt; typename VectorsType::Scalar, OtherDerived &gt;::Type</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ab598176cb07c30b7fd074f9b899a4eb7</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other, const HouseholderSequence&lt; VectorsType, CoeffsType, Side &gt; &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; MatrixDerived, PermutationDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a840f05d82bad30cc73f862d41d3c5448</anchor>
      <arglist>(const MatrixBase&lt; MatrixDerived &gt; &amp;matrix, const PermutationBase&lt; PermutationDerived &gt; &amp;permutation)</arglist>
    </member>
    <member kind="function">
      <type>const Product&lt; PermutationDerived, MatrixDerived, AliasFreeProduct &gt;</type>
      <name>operator *</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3a457d3ff3bdafaf0b6d9bb6e3753b3d</anchor>
      <arglist>(const PermutationBase&lt; PermutationDerived &gt; &amp;permutation, const MatrixBase&lt; MatrixDerived &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_real_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>real</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac74dc920119b1eba45e9218d9f402afc</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, OnTheRight &gt;</type>
      <name>rightHouseholderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga897ebce658762148f706f73a05525e89</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_round_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>round</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad9eaa98e8016ef17024a18a2f3e5bef3</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_rsqrt_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>rsqrt</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a6374a6a9e972e9358d7ab3fced32d7d5</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; float &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga02918175ff75e5df9fd291cf5fc3fd1b</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; double &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad2e71727718ca788680b3aa9eb485f98</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; std::complex&lt; RealScalar &gt; &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga76386154f2cdb77190759744830422d1</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 2 &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaafd4d881e7a6c2a68c1db03e261c767b</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 3 &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga162d759175d7c5214f33fefb30862815</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy, const Scalar &amp;sz)</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga109425bca2048c3df19249c04e73715c</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;coeffs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>seq</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a0c04400203ca9b414e13c9c721399969</anchor>
      <arglist>(FirstType f, LastType l, IncrType incr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>seq</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad87fbafd4a91f5c1ed6a768987a1b74d</anchor>
      <arglist>(FirstType f, LastType l)</arglist>
    </member>
    <member kind="function">
      <type>ArithmeticSequence&lt; typename internal::cleanup_index_type&lt; FirstType &gt;::type, typename internal::cleanup_index_type&lt; SizeType &gt;::type, typename internal::cleanup_seq_incr&lt; IncrType &gt;::type &gt;</type>
      <name>seqN</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3a3c346d2a61d1e8e86e6fb4cf57fbda</anchor>
      <arglist>(FirstType first, SizeType size, IncrType incr)</arglist>
    </member>
    <member kind="function">
      <type>ArithmeticSequence&lt; typename internal::cleanup_index_type&lt; FirstType &gt;::type, typename internal::cleanup_index_type&lt; SizeType &gt;::type &gt;</type>
      <name>seqN</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ade9f918902511b83512a8e6dde5cad7a</anchor>
      <arglist>(FirstType first, SizeType size)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sign_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sign</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a831e88e0403a42d0dfb328d8acd3e56f</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sin_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sin</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ae6e8ad270ff41c088d7651567594f796</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sinh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sinh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af284ce359b6efd4b594a9f8a1f5e5d96</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_sqrt_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>sqrt</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af4f536e8ea56702e63088efb3706d1f0</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_square_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>square</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>af28ef8cae3b37bcf1b47910cd6f20d4c</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_tan_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>tan</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3bc116a6243f38c22f851581aa7b521a</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const Eigen::CwiseUnaryOp&lt; Eigen::internal::scalar_tanh_op&lt; typename Derived::Scalar &gt;, const Derived &gt;</type>
      <name>tanh</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a0110c233d357169fd58fdf5656992a98</anchor>
      <arglist>(const Eigen::ArrayBase&lt; Derived &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>internal::umeyama_transform_matrix_type&lt; Derived, OtherDerived &gt;::type</type>
      <name>umeyama</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab3f5a82a24490b936f8694cf8fef8e60</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;src, const MatrixBase&lt; OtherDerived &gt; &amp;dst, bool with_scaling=true)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_sparse</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ac9fb9e40cfc9ddbdc7da84ee01bb7545</anchor>
      <arglist>(Ref&lt; SparseMatrix&lt; _Scalar, _Options, _StorageIndex &gt; &gt; mat)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_sparse</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>afacb818b18280e2e1ab73836ab74cab5</anchor>
      <arglist>(const SparseSelfAdjointView&lt; const SparseMatrix&lt; _Scalar, _Options, _Index &gt;, UpLo &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>cholmod_dense</type>
      <name>viewAsCholmod</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a92fe7b595099051fa1d1c443641a6de3</anchor>
      <arglist>(MatrixBase&lt; Derived &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>MappedSparseMatrix&lt; Scalar, Flags, StorageIndex &gt;</type>
      <name>viewAsEigen</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>aad43574b96b756041bd8037c4b61e0d9</anchor>
      <arglist>(cholmod_sparse &amp;cm)</arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ActualPacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga020f88dc24a123b9afbd756c4b220db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_DEPRECATED const unsigned int</type>
      <name>AlignedBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gac5795adacd266512a26890973503ed88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::internal::all_t</type>
      <name>all</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga790ab6c4226ef5f678b9eb532a3eab14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>CompressedAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaed0244284da47a2b8661261431173caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DirectAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gabf1e9d0516a933445a4c307ad8f14915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>Dynamic</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>ad81fa7195215a0ce30017dfac309f0b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>DynamicIndex</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a73c597189a4a99127175e8167c456fff</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_DEPRECATED const unsigned int</type>
      <name>EvalBeforeAssigningBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga0972b20dc004d13984e642b3bd12532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeNestingBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaa34e83bae46a8eeae4e69ebe3aaecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>HugeCost</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a3163430a1c13173faffde69016b48aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>Infinity</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a7951593b031e13d90223c83d022ce99e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const symbolic::SymbolExpr&lt; internal::symbolic_last_tag &gt;</type>
      <name>last</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga2dd8b20d08336af23947e054a17415ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>lastp1</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga662ffa801d746b972453080c648765f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LinearAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga4b983a15d57cd55806df618ac544d09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LvalueBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae2c323957f20dfdc6cb8f44428eaec1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>NoPreferredStorageOrderBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga3c186ad80ddcf5e2ed3d7ee31cca1860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>PacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga1a306a438e1ab074e8be59512e887b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>RowMajorBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4f56c2a60bbe4bd2e44c5b19cbe8762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>UndefinedIncr</name>
      <anchorfile>namespaceEigen.html</anchorfile>
      <anchor>a06808a853a9baa38b23a5368e7491abd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Eigen::indexing</name>
    <filename>namespaceEigen_1_1indexing.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Eigen::symbolic</name>
    <filename>namespaceEigen_1_1symbolic.html</filename>
    <class kind="class">Eigen::symbolic::BaseExpr</class>
    <class kind="class">Eigen::symbolic::SymbolExpr</class>
    <class kind="class">Eigen::symbolic::SymbolValue</class>
  </compound>
  <compound kind="group">
    <name>Cholesky_Module</name>
    <title>Cholesky module</title>
    <filename>group__Cholesky__Module.html</filename>
    <class kind="class">Eigen::LDLT</class>
    <class kind="class">Eigen::LLT</class>
  </compound>
  <compound kind="group">
    <name>CholmodSupport_Module</name>
    <title>CholmodSupport module</title>
    <filename>group__CholmodSupport__Module.html</filename>
    <class kind="class">Eigen::CholmodBase</class>
    <class kind="class">Eigen::CholmodDecomposition</class>
    <class kind="class">Eigen::CholmodSimplicialLDLT</class>
    <class kind="class">Eigen::CholmodSimplicialLLT</class>
    <class kind="class">Eigen::CholmodSupernodalLLT</class>
  </compound>
  <compound kind="group">
    <name>Core_Module</name>
    <title>Core module</title>
    <filename>group__Core__Module.html</filename>
    <subgroup>arraytypedefs</subgroup>
    <subgroup>matrixtypedefs</subgroup>
    <subgroup>flags</subgroup>
    <subgroup>enums</subgroup>
    <namespace>Eigen::indexing</namespace>
    <namespace>Eigen::symbolic</namespace>
    <class kind="class">Eigen::aligned_allocator</class>
    <class kind="class">Eigen::ArithmeticSequence</class>
    <class kind="class">Eigen::Array</class>
    <class kind="class">Eigen::ArrayBase</class>
    <class kind="class">Eigen::ArrayWrapper</class>
    <class kind="class">Eigen::symbolic::BaseExpr</class>
    <class kind="class">Eigen::Block</class>
    <class kind="class">Eigen::CommaInitializer</class>
    <class kind="class">Eigen::CwiseBinaryOp</class>
    <class kind="class">Eigen::CwiseNullaryOp</class>
    <class kind="class">Eigen::CwiseTernaryOp</class>
    <class kind="class">Eigen::CwiseUnaryOp</class>
    <class kind="class">Eigen::CwiseUnaryView</class>
    <class kind="class">Eigen::DenseBase</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, DirectWriteAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::DenseCoeffsBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Diagonal</class>
    <class kind="class">Eigen::DiagonalMatrix</class>
    <class kind="class">Eigen::DiagonalWrapper</class>
    <class kind="class">Eigen::EigenBase</class>
    <class kind="class">Eigen::ForceAlignedAccess</class>
    <class kind="class">Eigen::IndexedView</class>
    <class kind="class">Eigen::IOFormat</class>
    <class kind="class">Eigen::Map</class>
    <class kind="class">Eigen::MapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::MapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::Matrix</class>
    <class kind="class">Eigen::MatrixBase</class>
    <class kind="class">Eigen::MatrixWrapper</class>
    <class kind="class">Eigen::NestByValue</class>
    <class kind="class">Eigen::NoAlias</class>
    <class kind="class">Eigen::NumTraits</class>
    <class kind="class">Eigen::PartialReduxExpr</class>
    <class kind="class">Eigen::PermutationBase</class>
    <class kind="class">Eigen::PermutationMatrix</class>
    <class kind="class">Eigen::PermutationWrapper</class>
    <class kind="class">Eigen::PlainObjectBase</class>
    <class kind="class">Eigen::Product</class>
    <class kind="class">Eigen::Ref</class>
    <class kind="class">Eigen::Replicate</class>
    <class kind="class">Eigen::Reshaped</class>
    <class kind="class">Eigen::Reverse</class>
    <class kind="class">Eigen::ScalarBinaryOpTraits</class>
    <class kind="class">Eigen::Select</class>
    <class kind="class">Eigen::SelfAdjointView</class>
    <class kind="class">Eigen::Solve</class>
    <class kind="class">Eigen::Stride</class>
    <class kind="class">Eigen::Transpose</class>
    <class kind="class">Eigen::Transpositions</class>
    <class kind="class">Eigen::TriangularBase</class>
    <class kind="class">Eigen::TriangularView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; _MatrixType, _Mode, Dense &gt;</class>
    <class kind="class">Eigen::VectorBlock</class>
    <class kind="class">Eigen::VectorwiseOp</class>
    <class kind="class">Eigen::WithFormat</class>
    <member kind="function" static="yes">
      <type>static const auto</type>
      <name>fix</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>gac01f234bce100e39e6928fdc470e5194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const auto</type>
      <name>fix</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga3ce50da8ca83238949c06afce1a4f3c7</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Eigen::internal::all_t</type>
      <name>all</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga790ab6c4226ef5f678b9eb532a3eab14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const symbolic::SymbolExpr&lt; internal::symbolic_last_tag &gt;</type>
      <name>last</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga2dd8b20d08336af23947e054a17415ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>lastp1</name>
      <anchorfile>group__Core__Module.html</anchorfile>
      <anchor>ga662ffa801d746b972453080c648765f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Eigenvalues_Module</name>
    <title>Eigenvalues module</title>
    <filename>group__Eigenvalues__Module.html</filename>
    <class kind="class">Eigen::ComplexEigenSolver</class>
    <class kind="class">Eigen::ComplexSchur</class>
    <class kind="class">Eigen::EigenSolver</class>
    <class kind="class">Eigen::GeneralizedEigenSolver</class>
    <class kind="class">Eigen::GeneralizedSelfAdjointEigenSolver</class>
    <class kind="class">Eigen::HessenbergDecomposition</class>
    <class kind="class">Eigen::RealQZ</class>
    <class kind="class">Eigen::RealSchur</class>
    <class kind="class">Eigen::SelfAdjointEigenSolver</class>
    <class kind="class">Eigen::Tridiagonalization</class>
  </compound>
  <compound kind="group">
    <name>Geometry_Module</name>
    <title>Geometry module</title>
    <filename>group__Geometry__Module.html</filename>
    <subgroup>alignedboxtypedefs</subgroup>
    <class kind="class">Eigen::AlignedBox</class>
    <class kind="class">Eigen::AngleAxis</class>
    <class kind="class">Eigen::Homogeneous</class>
    <class kind="class">Eigen::Hyperplane</class>
    <class kind="class">Eigen::Map&lt; const Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::Map&lt; Quaternion&lt; _Scalar &gt;, _Options &gt;</class>
    <class kind="class">Eigen::ParametrizedLine</class>
    <class kind="class">Eigen::Quaternion</class>
    <class kind="class">Eigen::QuaternionBase</class>
    <class kind="class">Eigen::Rotation2D</class>
    <class kind="class">Scaling</class>
    <class kind="class">Eigen::Transform</class>
    <class kind="class">Eigen::Translation</class>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Affine &gt;</type>
      <name>Affine2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gac1c9dbf666dc310b51253302a01136fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Affine &gt;</type>
      <name>Affine2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gae90bfea5b980efcaadf9168ae6481d11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Affine &gt;</type>
      <name>Affine3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab0c57680a4d0de53bc749378b0320175</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Affine &gt;</type>
      <name>Affine3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga3902f2f19737ec9f16189e218919c505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, AffineCompact &gt;</type>
      <name>AffineCompact2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga635eb91d48c86041a21d7616fff7888e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, AffineCompact &gt;</type>
      <name>AffineCompact2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gae88f296fba2a506eb3397569d762da27</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, AffineCompact &gt;</type>
      <name>AffineCompact3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabcf74c0e194ea4e487284e28a9817a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, AffineCompact &gt;</type>
      <name>AffineCompact3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga372437883db5fe0332141ae30d4f501a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 2 &gt;</type>
      <name>AlignedScaling2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf8975289b8134a5021e806029516e82c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 2 &gt;</type>
      <name>AlignedScaling2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf2440178a1f5f6abef6ee0231bc49184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; double, 3 &gt;</type>
      <name>AlignedScaling3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0aff001d5740f13797c9acd4e3276673</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; float, 3 &gt;</type>
      <name>AlignedScaling3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga45caf8b0e6da378885f4ae3f06c5cde3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; double &gt;</type>
      <name>AngleAxisd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaed936d6e9192d97f00a9608081fa9b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AngleAxis&lt; float &gt;</type>
      <name>AngleAxisf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad823b9c674644b14d950fbfe165dfdbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Isometry &gt;</type>
      <name>Isometry2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga517183233a93969160a02b10d0a898f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Isometry &gt;</type>
      <name>Isometry2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga8262f9f26bd97dbb1688a10ca323e534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Isometry &gt;</type>
      <name>Isometry3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5a91dba9c396daa1eb0a4d08566c4e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Isometry &gt;</type>
      <name>Isometry3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad3de6a5dfd9da64bf0970995f9cbc032</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 2, Projective &gt;</type>
      <name>Projective2d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad3b2e23c2704a22c957573bcaa362d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 2, Projective &gt;</type>
      <name>Projective2f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga20f7da72f3045561b8cf2dfaceed797f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; double, 3, Projective &gt;</type>
      <name>Projective3d</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga3d2c61fbea04b09e4925a2e321b8b67c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transform&lt; float, 3, Projective &gt;</type>
      <name>Projective3f</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0546746224f5fd54d47ac8390eaefdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; double &gt;</type>
      <name>Quaterniond</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga5daab8e66aa480465000308455578830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Quaternion&lt; float &gt;</type>
      <name>Quaternionf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga66aa915a26d698c60ed206818c3e4c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga4289f38cc6ecf302e07d2365abc6a902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, Aligned &gt;</type>
      <name>QuaternionMapAlignedf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadaf7f3ee984d9828ca94d66355f0b226</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; double &gt;, 0 &gt;</type>
      <name>QuaternionMapd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga89412d1dcf23537e5990dfb3089ace76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map&lt; Quaternion&lt; float &gt;, 0 &gt;</type>
      <name>QuaternionMapf</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga867ff508ac860bdf7cab3b8a8fc1048d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; double &gt;</type>
      <name>Rotation2Dd</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab7af1ccdfb6c865c27fe1fd6bd9e759f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Rotation2D&lt; float &gt;</type>
      <name>Rotation2Df</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga35e2cace3ada497794734edb8bc33b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga0024b44eca99cb7135887c2aaf319d28</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const CrossReturnType</type>
      <name>cross</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga2fe1a2a012ce0ab0e8da6af134073039</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>cross3</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gabde56e2a0baba550815a0b05139e4d42</anchor>
      <arglist>(const MatrixBase&lt; OtherDerived &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; Scalar, 3, 1 &gt;</type>
      <name>eulerAngles</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga17994d2e81b723295f5bc3b1f862ed3b</anchor>
      <arglist>(Index a0, Index a1, Index a2) const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gadc0e3dd3510cb5a6e70aca9aab1cbf19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HNormalizedReturnType</type>
      <name>hnormalized</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga1f220045efa302626c287088b63b6ba9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf3229c2d3669e983075ab91f7f480cb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HomogeneousReturnType</type>
      <name>homogeneous</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaf99305a3d7432318236df7b80022df37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator *</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gae9451098be60e8ceda3c583d96e0aee1</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;matrix, const UniformScaling&lt; Scalar &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; float &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga02918175ff75e5df9fd291cf5fc3fd1b</anchor>
      <arglist>(float s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; double &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gad2e71727718ca788680b3aa9eb485f98</anchor>
      <arglist>(double s)</arglist>
    </member>
    <member kind="function">
      <type>UniformScaling&lt; std::complex&lt; RealScalar &gt; &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga76386154f2cdb77190759744830422d1</anchor>
      <arglist>(const std::complex&lt; RealScalar &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 2 &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaafd4d881e7a6c2a68c1db03e261c767b</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix&lt; Scalar, 3 &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga162d759175d7c5214f33fefb30862815</anchor>
      <arglist>(const Scalar &amp;sx, const Scalar &amp;sy, const Scalar &amp;sz)</arglist>
    </member>
    <member kind="function">
      <type>const DiagonalWrapper&lt; const Derived &gt;</type>
      <name>Scaling</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>ga109425bca2048c3df19249c04e73715c</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;coeffs)</arglist>
    </member>
    <member kind="function">
      <type>internal::umeyama_transform_matrix_type&lt; Derived, OtherDerived &gt;::type</type>
      <name>umeyama</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gab3f5a82a24490b936f8694cf8fef8e60</anchor>
      <arglist>(const MatrixBase&lt; Derived &gt; &amp;src, const MatrixBase&lt; OtherDerived &gt; &amp;dst, bool with_scaling=true)</arglist>
    </member>
    <member kind="function">
      <type>PlainObject</type>
      <name>unitOrthogonal</name>
      <anchorfile>group__Geometry__Module.html</anchorfile>
      <anchor>gaa0dc2c32a9379eeb2b4c4a05c1a6fe52</anchor>
      <arglist>(void) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Householder_Module</name>
    <title>Householder module</title>
    <filename>group__Householder__Module.html</filename>
    <class kind="class">Eigen::HouseholderSequence</class>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType &gt;</type>
      <name>householderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga5f2b3f80cdf7ae96609e4a8d2e55e371</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
    <member kind="function">
      <type>HouseholderSequence&lt; VectorsType, CoeffsType, OnTheRight &gt;</type>
      <name>rightHouseholderSequence</name>
      <anchorfile>group__Householder__Module.html</anchorfile>
      <anchor>ga897ebce658762148f706f73a05525e89</anchor>
      <arglist>(const VectorsType &amp;v, const CoeffsType &amp;h)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>IterativeLinearSolvers_Module</name>
    <title>IterativeLinearSolvers module</title>
    <filename>group__IterativeLinearSolvers__Module.html</filename>
    <class kind="class">Eigen::BiCGSTAB</class>
    <class kind="class">Eigen::ConjugateGradient</class>
    <class kind="class">Eigen::DiagonalPreconditioner</class>
    <class kind="class">Eigen::IdentityPreconditioner</class>
    <class kind="class">Eigen::IncompleteLUT</class>
    <class kind="class">Eigen::IterativeSolverBase</class>
    <class kind="class">Eigen::LeastSquareDiagonalPreconditioner</class>
    <class kind="class">Eigen::LeastSquaresConjugateGradient</class>
    <class kind="class">Eigen::SolveWithGuess</class>
  </compound>
  <compound kind="group">
    <name>Jacobi_Module</name>
    <title>Jacobi module</title>
    <filename>group__Jacobi__Module.html</filename>
    <class kind="class">Eigen::JacobiRotation</class>
    <member kind="function">
      <type>void</type>
      <name>applyOnTheRight</name>
      <anchorfile>group__Jacobi__Module.html</anchorfile>
      <anchor>gaa07f741c86219601664433777827bf1c</anchor>
      <arglist>(Index p, Index q, const JacobiRotation&lt; OtherScalar &gt; &amp;j)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>KLUSupport_Module</name>
    <title>KLUSupport module</title>
    <filename>group__KLUSupport__Module.html</filename>
    <member kind="function">
      <type>int</type>
      <name>klu_solve</name>
      <anchorfile>group__KLUSupport__Module.html</anchorfile>
      <anchor>ga0d1961df082372806b114ad390fb45d0</anchor>
      <arglist>(klu_symbolic *Symbolic, klu_numeric *Numeric, Index ldim, Index nrhs, double B [], klu_common *Common, double)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LU_Module</name>
    <title>LU module</title>
    <filename>group__LU__Module.html</filename>
    <class kind="class">Eigen::FullPivLU</class>
    <class kind="class">Eigen::PartialPivLU</class>
  </compound>
  <compound kind="group">
    <name>MetisSupport_Module</name>
    <title>MetisSupport module</title>
    <filename>group__MetisSupport__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>OrderingMethods_Module</name>
    <title>OrderingMethods module</title>
    <filename>group__OrderingMethods__Module.html</filename>
    <class kind="class">Eigen::AMDOrdering</class>
    <class kind="class">Eigen::COLAMDOrdering</class>
    <class kind="class">Eigen::NaturalOrdering</class>
  </compound>
  <compound kind="group">
    <name>PardisoSupport_Module</name>
    <title>PardisoSupport module</title>
    <filename>group__PardisoSupport__Module.html</filename>
    <class kind="class">Eigen::PardisoLDLT</class>
    <class kind="class">Eigen::PardisoLLT</class>
    <class kind="class">Eigen::PardisoLU</class>
  </compound>
  <compound kind="group">
    <name>PaStiXSupport_Module</name>
    <title>PaStiXSupport module</title>
    <filename>group__PaStiXSupport__Module.html</filename>
    <class kind="class">Eigen::PastixLDLT</class>
    <class kind="class">Eigen::PastixLLT</class>
    <class kind="class">Eigen::PastixLU</class>
  </compound>
  <compound kind="group">
    <name>QR_Module</name>
    <title>QR module</title>
    <filename>group__QR__Module.html</filename>
    <class kind="class">Eigen::ColPivHouseholderQR</class>
    <class kind="class">Eigen::CompleteOrthogonalDecomposition</class>
    <class kind="class">Eigen::FullPivHouseholderQR</class>
    <class kind="class">Eigen::HouseholderQR</class>
  </compound>
  <compound kind="group">
    <name>Sparse_Module</name>
    <title>Sparse meta-module</title>
    <filename>group__Sparse__Module.html</filename>
  </compound>
  <compound kind="group">
    <name>SparseCholesky_Module</name>
    <title>SparseCholesky module</title>
    <filename>group__SparseCholesky__Module.html</filename>
    <class kind="class">Eigen::SimplicialCholesky</class>
    <class kind="class">Eigen::SimplicialCholeskyBase</class>
    <class kind="class">Eigen::SimplicialLDLT</class>
    <class kind="class">Eigen::SimplicialLLT</class>
  </compound>
  <compound kind="group">
    <name>SparseCore_Module</name>
    <title>SparseCore module</title>
    <filename>group__SparseCore__Module.html</filename>
    <class kind="class">Eigen::Map&lt; SparseMatrixType &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseMatrixType, Options &gt;</class>
    <class kind="class">Eigen::Ref&lt; SparseVectorType &gt;</class>
    <class kind="class">Eigen::SparseCompressedBase</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, ReadOnlyAccessors &gt;</class>
    <class kind="class">Eigen::SparseMapBase&lt; Derived, WriteAccessors &gt;</class>
    <class kind="class">Eigen::SparseMatrix</class>
    <class kind="class">Eigen::SparseMatrixBase</class>
    <class kind="class">Eigen::SparseSelfAdjointView</class>
    <class kind="class">Eigen::SparseSolverBase</class>
    <class kind="class">Eigen::SparseVector</class>
    <class kind="class">Eigen::SparseView</class>
    <class kind="class">Eigen::TriangularViewImpl&lt; MatrixType, Mode, Sparse &gt;</class>
    <class kind="class">Eigen::Triplet</class>
    <member kind="function">
      <type>const SparseView&lt; Derived &gt;</type>
      <name>sparseView</name>
      <anchorfile>group__SparseCore__Module.html</anchorfile>
      <anchor>ga320dd291cbf4339c6118c41521b75350</anchor>
      <arglist>(const Scalar &amp;m_reference=Scalar(0), const typename NumTraits&lt; Scalar &gt;::Real &amp;m_epsilon=NumTraits&lt; Scalar &gt;::dummy_precision()) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SparseLU_Module</name>
    <title>SparseLU module</title>
    <filename>group__SparseLU__Module.html</filename>
    <class kind="class">Eigen::SparseLU</class>
  </compound>
  <compound kind="group">
    <name>SparseQR_Module</name>
    <title>SparseQR module</title>
    <filename>group__SparseQR__Module.html</filename>
    <class kind="class">Eigen::SparseQR</class>
  </compound>
  <compound kind="group">
    <name>SPQRSupport_Module</name>
    <title>SuiteSparseQR module</title>
    <filename>group__SPQRSupport__Module.html</filename>
    <class kind="class">Eigen::SPQR</class>
  </compound>
  <compound kind="group">
    <name>arraytypedefs</name>
    <title>Global array typedefs</title>
    <filename>group__arraytypedefs.html</filename>
  </compound>
  <compound kind="group">
    <name>matrixtypedefs</name>
    <title>Global matrix typedefs</title>
    <filename>group__matrixtypedefs.html</filename>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 2 &gt;</type>
      <name>Matrix2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga202b9ee6eca6f9329f0ab85669cbff2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 2 &gt;</type>
      <name>Matrix2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga72a19eccc523e6a3be2d2f6d5eb3e8f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 2 &gt;</type>
      <name>Matrix2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3b934095f8a2834e6cc27267427239d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 2 &gt;</type>
      <name>Matrix2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga36b8989b6aa63020139fc36bae6979e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 2 &gt;</type>
      <name>Matrix2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga757e178bb30b809f0aef66d97ced667a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab83cc34f0c5f22f4b5d1f251b41e3068</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, Dynamic &gt;</type>
      <name>Matrix2Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4890c18b6e495d05214e358163cf9a1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, Dynamic &gt;</type>
      <name>Matrix2Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4337b95add7532543e2ce8a953076efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, Dynamic &gt;</type>
      <name>Matrix2Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad815a2f2444e6e80ed274156f1a8bc50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, Dynamic &gt;</type>
      <name>Matrix2Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga697370341f5c160df998ea3cc6b90a5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 3 &gt;</type>
      <name>Matrix3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab92ee2a1f008a7fda01345b0f22e814e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 3 &gt;</type>
      <name>Matrix3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4b9c3ac3acf9aa95aabc184d015477ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 3 &gt;</type>
      <name>Matrix3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga84e9fd068879d808012bb6d5dbfecb17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 3 &gt;</type>
      <name>Matrix3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga276bae130c142e906ad8f47d24d11c1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 3 &gt;</type>
      <name>Matrix3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf5dfa8fd62427c5f3c8035daf15ebfcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7730c67f4db8a69633b2738f3394e4bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, Dynamic &gt;</type>
      <name>Matrix3Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga381cbe412d5b16b7194cf6024575c0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, Dynamic &gt;</type>
      <name>Matrix3Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c97aab588823ad481ba656e3e77f4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, Dynamic &gt;</type>
      <name>Matrix3Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8679d666af201be0bcd40f3e35a65d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, Dynamic &gt;</type>
      <name>Matrix3Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga050deb0b1fceba1f4ae6c113fa85983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 4 &gt;</type>
      <name>Matrix4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf2b40d33e069e1116ce298c91947dab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 4 &gt;</type>
      <name>Matrix4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac05645759f6bda0aafa5839eaa9b7e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 4 &gt;</type>
      <name>Matrix4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga31c5fac458c04196a36b36b5e51127ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 4 &gt;</type>
      <name>Matrix4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3a5de8dfef28d29aed525611e15a37e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 4 &gt;</type>
      <name>Matrix4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gace49b1dc3432f8a6639966a2cb7178be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7d5c04644430644d2df94149a9b4a830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, Dynamic &gt;</type>
      <name>Matrix4Xcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0d1bc5571d4dc974b5884724b2fbc548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, Dynamic &gt;</type>
      <name>Matrix4Xd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga48026f4398fac445e40ef6dbef982202</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, Dynamic &gt;</type>
      <name>Matrix4Xf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6a832fa39493771bd8a8db716ce7f05a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, Dynamic &gt;</type>
      <name>Matrix4Xi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab3f7dcab7284ffec9367b4dd8af38c1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6d1c2d28ca0068cd17cf6d2cf8c58a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 2 &gt;</type>
      <name>MatrixX2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c2ba6c656edea6168744a32fecc44fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 2 &gt;</type>
      <name>MatrixX2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac447f0605e611b96777be797b3b00aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 2 &gt;</type>
      <name>MatrixX2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaca57522dfcdf33fe23b1925dad42a529</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 2 &gt;</type>
      <name>MatrixX2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2d5bc3edbf7bc373d9aea75021a41733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9027279bf1b1442cc00fd366853de805</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 3 &gt;</type>
      <name>MatrixX3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga7991a54e93d17e57b16f2c4d672ec2c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 3 &gt;</type>
      <name>MatrixX3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0b3c70c1132399eef6137425c0c963e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 3 &gt;</type>
      <name>MatrixX3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gafab4934976aa4c2954363e167fcb5750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 3 &gt;</type>
      <name>MatrixX3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac23a801a13cca1f7b2731f633dc5ca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9c6d62ca622265a1632550ce3c412f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 4 &gt;</type>
      <name>MatrixX4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0ac53bad0c095e5d423577c3b53a869b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 4 &gt;</type>
      <name>MatrixX4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga2a4086b6a21c25cc8484a5251079b71d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 4 &gt;</type>
      <name>MatrixX4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8866ec0bb7508768dc612c3bbab824ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 4 &gt;</type>
      <name>MatrixX4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga72375f7b6a11e8ee10bc3f65c6e4501e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaadf0b25f5437fbddaf84324419418be8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, Dynamic &gt;</type>
      <name>MatrixXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae40207c482eaada1403778d301236443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, Dynamic &gt;</type>
      <name>MatrixXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga99b41a69f0bf64eadb63a97f357ab412</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, Dynamic &gt;</type>
      <name>MatrixXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga731599f782380312960376c43450eb48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, Dynamic &gt;</type>
      <name>MatrixXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaceba5f63d4040c79c44109590d4fa606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 2 &gt;</type>
      <name>RowVector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gab1f67794cc63abeaeac2303f8baaf6df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 2 &gt;</type>
      <name>RowVector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gac2b1f854d4fdaad31d3f41f02eec5bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 2 &gt;</type>
      <name>RowVector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga75fd569f64b8c47a2195585fabf21d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 2 &gt;</type>
      <name>RowVector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0057b99444743f618a942e846c1432d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 2 &gt;</type>
      <name>RowVector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9f54d6a47f5267f83c415ac54f5a89f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 3 &gt;</type>
      <name>RowVector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaece35a42352af994c0e6864e92eb46aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 3 &gt;</type>
      <name>RowVector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabaa2e91eec7f84fbfb5f910a573b9fc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 3 &gt;</type>
      <name>RowVector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1c5edbdbd375cabcbe35f8ab6fccc836</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 3 &gt;</type>
      <name>RowVector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaea2a29181eaf9dd766d5394da2724db3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 3 &gt;</type>
      <name>RowVector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6bc0fc46d6e2df231690cea03c97da33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, 4 &gt;</type>
      <name>RowVector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gadf0fe3d8b49c8d2d0a6e67be0edc26bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, 4 &gt;</type>
      <name>RowVector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabb8a0afce8775b057184dfb63da1f2f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, 4 &gt;</type>
      <name>RowVector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga686a79ab124a0e5ef838a46604cc4532</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, 4 &gt;</type>
      <name>RowVector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga49cdd96ba38be2b15754cf49a244f47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, 4 &gt;</type>
      <name>RowVector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8925ca20a1b04cafb29e08196b9d0dae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5a0dc428a53c3770f93b62355ec5c85e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 1, Dynamic &gt;</type>
      <name>RowVectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gabec6d6bbab3c6dcb47c72283c1beed80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 1, Dynamic &gt;</type>
      <name>RowVectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga531c6af4be9297dbe53127a46c246e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 1, Dynamic &gt;</type>
      <name>RowVectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8e714721c8c4e7eb948e18fbcbdc76de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 1, Dynamic &gt;</type>
      <name>RowVectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga75533fcdd7b769126a8a16cd8e342330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 2, 1 &gt;</type>
      <name>Vector2cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gad5f721f41a05074197ffffe829663c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 2, 1 &gt;</type>
      <name>Vector2cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaae03b4c7ee97240927a7a3d917a5f069</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 2, 1 &gt;</type>
      <name>Vector2d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga6c206cbf6f8f3b74bc63ecd362fc2ad6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 2, 1 &gt;</type>
      <name>Vector2f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga4cbcafbd33875f185289e750e90d0188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 2, 1 &gt;</type>
      <name>Vector2i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3243031169188c73ed241df41cc979b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 3, 1 &gt;</type>
      <name>Vector3cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga1f9f0b80ba445671559b20b18900f1c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 3, 1 &gt;</type>
      <name>Vector3cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga3b15db6013a02e43f7c913a1d250eee5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 3, 1 &gt;</type>
      <name>Vector3d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaabb0b4639dc0b48e691e02e95873b0f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 3, 1 &gt;</type>
      <name>Vector3f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga5ec9ce2d8adbcd6888f3fbf2e1c095a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 3, 1 &gt;</type>
      <name>Vector3i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga837c23269fa22059fbfdca6c653bcc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, 4, 1 &gt;</type>
      <name>Vector4cd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga0817c8be0e5a087ea3a8127fd508aedf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, 4, 1 &gt;</type>
      <name>Vector4cf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaad0b8878654cbb4276617a3e417a1622</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, 4, 1 &gt;</type>
      <name>Vector4d</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga9b2fcb53776a2829871f8a49009bef0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, 4, 1 &gt;</type>
      <name>Vector4f</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gae6a8e578d2848cc75f573c15a73bd9b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, 4, 1 &gt;</type>
      <name>Vector4i</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga46c6c866ea747e6bbd5c435eeaf6c365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; double &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga495330872c3cd279e5fd0419747ada55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; std::complex&lt; float &gt;, Dynamic, 1 &gt;</type>
      <name>VectorXcf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaded8ea004065d07b12a363fe1ed36b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; double, Dynamic, 1 &gt;</type>
      <name>VectorXd</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8554c6170729f01c7572574837ecf618</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; float, Dynamic, 1 &gt;</type>
      <name>VectorXf</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>ga8028d921d43acd5605eabad41c254ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix&lt; int, Dynamic, 1 &gt;</type>
      <name>VectorXi</name>
      <anchorfile>group__matrixtypedefs.html</anchorfile>
      <anchor>gaf20e523ca57ee8ef0a945cd4703d2bfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>flags</name>
    <title>Flags</title>
    <filename>group__flags.html</filename>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>ActualPacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga020f88dc24a123b9afbd756c4b220db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_DEPRECATED const unsigned int</type>
      <name>AlignedBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gac5795adacd266512a26890973503ed88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>CompressedAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaed0244284da47a2b8661261431173caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>DirectAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gabf1e9d0516a933445a4c307ad8f14915</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>EIGEN_DEPRECATED const unsigned int</type>
      <name>EvalBeforeAssigningBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga0972b20dc004d13984e642b3bd12532e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>EvalBeforeNestingBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gaa34e83bae46a8eeae4e69ebe3aaecbed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LinearAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga4b983a15d57cd55806df618ac544d09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>LvalueBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae2c323957f20dfdc6cb8f44428eaec1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>NoPreferredStorageOrderBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga3c186ad80ddcf5e2ed3d7ee31cca1860</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>PacketAccessBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>ga1a306a438e1ab074e8be59512e887b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const unsigned int</type>
      <name>RowMajorBit</name>
      <anchorfile>group__flags.html</anchorfile>
      <anchor>gae4f56c2a60bbe4bd2e44c5b19cbe8762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>enums</name>
    <title>Enumerations</title>
    <filename>group__enums.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AccessorLevels</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga9f93eac38eb83deb0e8dbd42ddf11d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ReadOnlyAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5daa1f2b0e6a668b11f2958940965d2b572</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>WriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dabcadf08230fb1a5ef7b3195745d3a458</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5da50108ad00095928de06228470ceab09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DirectWriteAccessors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga9f93eac38eb83deb0e8dbd42ddf11d5dacbe59d09ba2fdf8eac127bff1a1f0234</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AlignmentType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga45fe06e29902b7a2773de05ba27b47a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Unaligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a4e19dd09d5ff42295ba1d72d12a46686</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned8</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a9d99d7a9ff1da5c949bec22733bfba14</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned16</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ad0b140cd97bc74365b51843d28379655</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned32</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a8a380b1cd0c3e5a6cceac06f8235157a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned64</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a2639cfa1e8faac751556bc0009fe95a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned128</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1a60057da2408e499b5656244d0b26cc20</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Aligned</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga45fe06e29902b7a2773de05ba27b47a1ae12d0f8f869c40c76128260af2242bc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ComputationInfo</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga85fad7b87587764e5cf6b513a9e0ee5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Success</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea671a2aeb0f527802806a441d58a80fcf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NumericalIssue</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea1c6e20706575a629b27a105f07f1883b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoConvergence</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea6a68dfb88a8336108a30588bdf356c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InvalidInput</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga85fad7b87587764e5cf6b513a9e0ee5ea580b2a3cafe585691e789f768fb729bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CornerType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaafc7e22c8efbfefd5997e2cd9ec223e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DecompositionOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gae3e239fb70022eb8747994cf5d68b4a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9fa9302d510cee20c26311154937e23f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinU</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9aa7fb4e98834788d0b1b0f2b8467d2527</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeFullV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a36581f7c662f7def31efd500c284f930</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeThinV</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a540036417bfecf2e791a70948c227f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>EigenvaluesOnly</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9afd06633f270207c373875fd7ca03e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ComputeEigenvectors</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a7f7d17fba3c9bb92158e346d5979d0f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ax_lBx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a5eb11a88a4bd445f58f1b24598d3848f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ABx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9a7d9813cec527e299a36b749b0f7e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BAx_lx</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggae3e239fb70022eb8747994cf5d68b4a9a9870817d373c41ba0dc7f6b5ab0895b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DirectionType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gad49a7b3738e273eb00932271b36127f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Vertical</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7ae2efac6e74ecab5e3b0b1561c5ddf83e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Horizontal</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a961c62410157b64033839488f4d7f7e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BothDirections</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggad49a7b3738e273eb00932271b36127f7a04fefd61992e941d509a57bc44c59794</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>QRPreconditioners</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga46eba0d5c621f590b8cf1b53af31d56e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NoQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea2e95bc818f975b19def01e93d240dece</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>HouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56ea9c660eb3336bf8c77ce9d081ca07cbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd2e2f4875c5b4b6e602a433d90c4e5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FullPivHouseholderQRPreconditioner</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga46eba0d5c621f590b8cf1b53af31d56eabd745dcaff7019c5f918c68809e5ea50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gac22de43beeac7a78b384f99bed5cee0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheLeft</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba21b30a61e9cb10c967aec17567804007</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OnTheRight</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggac22de43beeac7a78b384f99bed5cee0ba329fc3a54ceb2b6e0e73b400998b8a82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>StorageOptions</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaacded1a18ae58b0f554751f6cdf9eb13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ColMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a0103672ae41005ab03b4176c765afd62</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RowMajor</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a77c993a8d9f6efe5c1159fb2ab07dd4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AutoAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13ad0e7f67d40bcde3d41c12849b16ce6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DontAlign</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaacded1a18ae58b0f554751f6cdf9eb13a56908522e51443a0aa0567f879c2e78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TransformTraits</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gaee59a86102f150923b0cac6d4ff05107</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Isometry</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a84413028615d2d718bafd2dfb93dafef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Affine</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0872f0a82453aaae40339c33acbb31fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>AffineCompact</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a8192e8fdb2ec3ec46d92956cc83ef490</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Projective</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ggaee59a86102f150923b0cac6d4ff05107a0f7338b8672884554e8642bce9e44183</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>UpLoType</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>ga39e3366ff5554d731e7dc8bb642f83cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Lower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdaf581029282d421eee5aae14238c6f749</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Upper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdafca2ccebb604f171656deb53e8c083c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2ef430bff6cc12c2d1e0ef01b95f7ff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZeroDiag</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdac4dc554a61510151ddd5bafaf6040223</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda8f40b928c10a71ba03e5f75ad2a72fda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UnitUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdadd28224d7ea92689930be73c1b50b0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyLower</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda2424988b6fca98be70b595632753ba81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>StrictlyUpper</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cda7b37877e0b9b0df28c9c2b669a633265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SelfAdjoint</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdacf9ccb2016f8b9c0f3268f05a1e75821</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Symmetric</name>
      <anchorfile>group__enums.html</anchorfile>
      <anchor>gga39e3366ff5554d731e7dc8bb642f83cdad5381b2d1c8973a08303c94e7da02333</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>alignedboxtypedefs</name>
    <title>Global aligned box typedefs</title>
    <filename>group__alignedboxtypedefs.html</filename>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 1 &gt;</type>
      <name>AlignedBox1d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga8f193812dd7f209bf0cad4c204467c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 1 &gt;</type>
      <name>AlignedBox1f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga6262856e3cd000754aac5cd8b5506abc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 1 &gt;</type>
      <name>AlignedBox1i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gaa6152017f242b0c811edf11b0a74b2a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 2 &gt;</type>
      <name>AlignedBox2d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga7b82b79645c51953a3f6f2c1841b38cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 2 &gt;</type>
      <name>AlignedBox2f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga5dfeb2a4a9162a4f27d6ff44373b1aa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 2 &gt;</type>
      <name>AlignedBox2i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gac69f837670aa6b0ad5dd79fa95b09878</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 3 &gt;</type>
      <name>AlignedBox3d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga857f74d00f22da880085f4512fbbd0a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 3 &gt;</type>
      <name>AlignedBox3f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga9ca01b681ac1194d21c1915f894093fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 3 &gt;</type>
      <name>AlignedBox3i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga031551164f3e7e4c3706fbd35385da68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, 4 &gt;</type>
      <name>AlignedBox4d</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>gadea1e208f9105033b34ab1fc8a83c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, 4 &gt;</type>
      <name>AlignedBox4f</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga1b0642044b450ce5ba6a98f5c243196e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, 4 &gt;</type>
      <name>AlignedBox4i</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga5d962468fe5a40846eda27494bbd2892</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; double, Dynamic &gt;</type>
      <name>AlignedBoxXd</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga83a204d009da25fa06405ab344612916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; float, Dynamic &gt;</type>
      <name>AlignedBoxXf</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga4a5585f62619c15418cfd942768e900f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignedBox&lt; int, Dynamic &gt;</type>
      <name>AlignedBoxXi</name>
      <anchorfile>group__alignedboxtypedefs.html</anchorfile>
      <anchor>ga9e7bd21661222f194acf20831a90b11a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SuperLUSupport_Module</name>
    <title>SuperLUSupport module</title>
    <filename>group__SuperLUSupport__Module.html</filename>
    <class kind="class">Eigen::SuperILU</class>
    <class kind="class">Eigen::SuperLU</class>
    <class kind="class">Eigen::SuperLUBase</class>
  </compound>
  <compound kind="group">
    <name>SVD_Module</name>
    <title>SVD module</title>
    <filename>group__SVD__Module.html</filename>
    <class kind="class">Eigen::BDCSVD</class>
    <class kind="class">Eigen::JacobiSVD</class>
    <class kind="class">Eigen::SVDBase</class>
  </compound>
  <compound kind="group">
    <name>UmfPackSupport_Module</name>
    <title>UmfPackSupport module</title>
    <filename>group__UmfPackSupport__Module.html</filename>
    <class kind="class">Eigen::UmfPackLU</class>
  </compound>
  <compound kind="group">
    <name>CoeffwiseMathFunctions</name>
    <title>Catalog of coefficient-wise math functions</title>
    <filename>group__CoeffwiseMathFunctions.html</filename>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_abs</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_inverse</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_conj</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_exp</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_log</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_log1p</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_log10</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_pow</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_sqrt</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_rsqrt</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_square</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_cube</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_abs2</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_sin</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_cos</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_tan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_asin</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_acos</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_atan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_sinh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_cosh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_tanh</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_ceil</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_floor</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_round</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_isfinite</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_isinf</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_isnan</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_erf</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_erfc</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_lgamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_digamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_igamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_igammac</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_polygamma</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_betainc</docanchor>
    <docanchor file="group__CoeffwiseMathFunctions">cwisetable_zeta</docanchor>
  </compound>
  <compound kind="group">
    <name>DenseDecompositionBenchmark</name>
    <title>Benchmark of dense decompositions</title>
    <filename>group__DenseDecompositionBenchmark.html</filename>
  </compound>
  <compound kind="group">
    <name>TopicFixedSizeVectorizable</name>
    <title>Fixed-size vectorizable %Eigen objects</title>
    <filename>group__TopicFixedSizeVectorizable.html</filename>
    <docanchor file="group__TopicFixedSizeVectorizable" title="Executive Summary">FixedSizeVectorizable_summary</docanchor>
    <docanchor file="group__TopicFixedSizeVectorizable" title="Explanation">FixedSizeVectorizable_explanation</docanchor>
  </compound>
  <compound kind="group">
    <name>InplaceDecomposition</name>
    <title>Inplace matrix decompositions</title>
    <filename>group__InplaceDecomposition.html</filename>
  </compound>
  <compound kind="group">
    <name>LeastSquares</name>
    <title>Solving linear least squares systems</title>
    <filename>group__LeastSquares.html</filename>
    <docanchor file="group__LeastSquares" title="Using the SVD decomposition">LeastSquaresSVD</docanchor>
    <docanchor file="group__LeastSquares" title="Using the QR decomposition">LeastSquaresQR</docanchor>
    <docanchor file="group__LeastSquares" title="Using normal equations">LeastSquaresNormalEquations</docanchor>
  </compound>
  <compound kind="group">
    <name>Support_modules</name>
    <title>Support modules</title>
    <filename>group__Support__modules.html</filename>
    <subgroup>CholmodSupport_Module</subgroup>
    <subgroup>KLUSupport_Module</subgroup>
    <subgroup>MetisSupport_Module</subgroup>
    <subgroup>PardisoSupport_Module</subgroup>
    <subgroup>PaStiXSupport_Module</subgroup>
    <subgroup>SPQRSupport_Module</subgroup>
    <subgroup>SuperLUSupport_Module</subgroup>
    <subgroup>UmfPackSupport_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_chapter</name>
    <title>Dense matrix and array manipulation</title>
    <filename>group__DenseMatrixManipulation__chapter.html</filename>
    <subgroup>TutorialMatrixClass</subgroup>
    <subgroup>TutorialMatrixArithmetic</subgroup>
    <subgroup>TutorialArrayClass</subgroup>
    <subgroup>TutorialBlockOperations</subgroup>
    <subgroup>TutorialSlicingIndexing</subgroup>
    <subgroup>TutorialAdvancedInitialization</subgroup>
    <subgroup>TutorialReductionsVisitorsBroadcasting</subgroup>
    <subgroup>TutorialReshape</subgroup>
    <subgroup>TutorialSTL</subgroup>
    <subgroup>TutorialMapClass</subgroup>
    <subgroup>TopicAliasing</subgroup>
    <subgroup>TopicStorageOrders</subgroup>
    <subgroup>DenseMatrixManipulation_Alignement</subgroup>
    <subgroup>DenseMatrixManipulation_Reference</subgroup>
    <subgroup>CoeffwiseMathFunctions</subgroup>
    <subgroup>QuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Alignement</name>
    <title>Alignment issues</title>
    <filename>group__DenseMatrixManipulation__Alignement.html</filename>
    <subgroup>TopicUnalignedArrayAssert</subgroup>
    <subgroup>TopicFixedSizeVectorizable</subgroup>
    <subgroup>TopicStructHavingEigenMembers</subgroup>
    <subgroup>TopicStlContainers</subgroup>
    <subgroup>TopicPassingByValue</subgroup>
    <subgroup>TopicWrongStackAlignment</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseMatrixManipulation_Reference</name>
    <title>Reference</title>
    <filename>group__DenseMatrixManipulation__Reference.html</filename>
    <subgroup>Core_Module</subgroup>
    <subgroup>Jacobi_Module</subgroup>
    <subgroup>Householder_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_chapter</name>
    <title>Dense linear problems and decompositions</title>
    <filename>group__DenseLinearSolvers__chapter.html</filename>
    <subgroup>TutorialLinearAlgebra</subgroup>
    <subgroup>TopicLinearAlgebraDecompositions</subgroup>
    <subgroup>LeastSquares</subgroup>
    <subgroup>InplaceDecomposition</subgroup>
    <subgroup>DenseDecompositionBenchmark</subgroup>
    <subgroup>DenseLinearSolvers_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>DenseLinearSolvers_Reference</name>
    <title>Reference</title>
    <filename>group__DenseLinearSolvers__Reference.html</filename>
    <subgroup>Cholesky_Module</subgroup>
    <subgroup>LU_Module</subgroup>
    <subgroup>QR_Module</subgroup>
    <subgroup>SVD_Module</subgroup>
    <subgroup>Eigenvalues_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_chapter</name>
    <title>Sparse linear algebra</title>
    <filename>group__Sparse__chapter.html</filename>
    <subgroup>TutorialSparse</subgroup>
    <subgroup>TopicSparseSystems</subgroup>
    <subgroup>MatrixfreeSolverExample</subgroup>
    <subgroup>Sparse_Reference</subgroup>
    <subgroup>SparseQuickRefPage</subgroup>
  </compound>
  <compound kind="group">
    <name>Sparse_Reference</name>
    <title>Reference</title>
    <filename>group__Sparse__Reference.html</filename>
    <subgroup>SparseCore_Module</subgroup>
    <subgroup>OrderingMethods_Module</subgroup>
    <subgroup>SparseCholesky_Module</subgroup>
    <subgroup>SparseLU_Module</subgroup>
    <subgroup>SparseQR_Module</subgroup>
    <subgroup>IterativeLinearSolvers_Module</subgroup>
    <subgroup>Sparse_Module</subgroup>
    <subgroup>Support_modules</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_chapter</name>
    <title>Geometry</title>
    <filename>group__Geometry__chapter.html</filename>
    <subgroup>TutorialGeometry</subgroup>
    <subgroup>Geometry_Reference</subgroup>
  </compound>
  <compound kind="group">
    <name>Geometry_Reference</name>
    <title>Reference</title>
    <filename>group__Geometry__Reference.html</filename>
    <subgroup>Geometry_Module</subgroup>
    <subgroup>Splines_Module</subgroup>
  </compound>
  <compound kind="group">
    <name>MatrixfreeSolverExample</name>
    <title>Matrix-free solvers</title>
    <filename>group__MatrixfreeSolverExample.html</filename>
  </compound>
  <compound kind="group">
    <name>TopicPassingByValue</name>
    <title>Passing Eigen objects by value to functions</title>
    <filename>group__TopicPassingByValue.html</filename>
  </compound>
  <compound kind="group">
    <name>QuickRefPage</name>
    <title>Quick reference guide</title>
    <filename>group__QuickRefPage.html</filename>
    <docanchor file="group__QuickRefPage" title="Modules and Header files">QuickRef_Headers</docanchor>
    <docanchor file="group__QuickRefPage" title="Array, matrix and vector types">QuickRef_Types</docanchor>
    <docanchor file="group__QuickRefPage" title="Basic matrix manipulation">QuickRef_Basics</docanchor>
    <docanchor file="group__QuickRefPage" title="Predefined Matrices">QuickRef_PredefMat</docanchor>
    <docanchor file="group__QuickRefPage" title="Mapping external arrays">QuickRef_Map</docanchor>
    <docanchor file="group__QuickRefPage" title="Arithmetic Operators">QuickRef_ArithmeticOperators</docanchor>
    <docanchor file="group__QuickRefPage" title="Coefficient-wise &amp; Array operators">QuickRef_Coeffwise</docanchor>
    <docanchor file="group__QuickRefPage" title="Reductions">QuickRef_Reductions</docanchor>
    <docanchor file="group__QuickRefPage" title="Sub-matrices">QuickRef_Blocks</docanchor>
    <docanchor file="group__QuickRefPage" title="Miscellaneous operations">QuickRef_Misc</docanchor>
    <docanchor file="group__QuickRefPage" title="Reverse">QuickRef_Reverse</docanchor>
    <docanchor file="group__QuickRefPage" title="Replicate">QuickRef_Replicate</docanchor>
    <docanchor file="group__QuickRefPage" title="Diagonal, Triangular, and Self-adjoint matrices">QuickRef_DiagTriSymm</docanchor>
    <docanchor file="group__QuickRefPage" title="Diagonal matrices">QuickRef_Diagonal</docanchor>
    <docanchor file="group__QuickRefPage" title="Triangular views">QuickRef_TriangularView</docanchor>
    <docanchor file="group__QuickRefPage" title="Symmetric/selfadjoint views">QuickRef_SelfadjointMatrix</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicSparseSystems</name>
    <title>Solving Sparse Linear Systems</title>
    <filename>group__TopicSparseSystems.html</filename>
    <docanchor file="group__TopicSparseSystems" title="List of sparse solvers">TutorialSparseSolverList</docanchor>
    <docanchor file="group__TopicSparseSystems" title="Built-in direct solvers">TutorialSparseSolverList_Direct</docanchor>
    <docanchor file="group__TopicSparseSystems" title="Built-in iterative solvers">TutorialSparseSolverList_Iterative</docanchor>
    <docanchor file="group__TopicSparseSystems" title="Wrappers to external solvers">TutorialSparseSolverList_Wrapper</docanchor>
    <docanchor file="group__TopicSparseSystems" title="Sparse solver concept">TutorialSparseSolverConcept</docanchor>
    <docanchor file="group__TopicSparseSystems" title="The Compute Step">TheSparseCompute</docanchor>
    <docanchor file="group__TopicSparseSystems" title="The Solve step">TheSparseSolve</docanchor>
    <docanchor file="group__TopicSparseSystems">BenchmarkRoutine</docanchor>
  </compound>
  <compound kind="group">
    <name>SparseQuickRefPage</name>
    <title>Quick reference guide for sparse matrices</title>
    <filename>group__SparseQuickRefPage.html</filename>
    <docanchor file="group__SparseQuickRefPage" title="Sparse Matrix Initialization">SparseMatrixInit</docanchor>
    <docanchor file="group__SparseQuickRefPage" title="Matrix properties">SparseBasicInfos</docanchor>
    <docanchor file="group__SparseQuickRefPage" title="Arithmetic operations">SparseBasicOps</docanchor>
    <docanchor file="group__SparseQuickRefPage" title="Other supported operations">sparseotherops</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStlContainers</name>
    <title>Using STL Containers with Eigen</title>
    <filename>group__TopicStlContainers.html</filename>
    <docanchor file="group__TopicStlContainers" title="Executive summary">StlContainers_summary</docanchor>
    <docanchor file="group__TopicStlContainers" title="Using an aligned allocator">allocator</docanchor>
    <docanchor file="group__TopicStlContainers" title="The case of std::vector">StlContainers_vector</docanchor>
    <docanchor file="group__TopicStlContainers" title="An alternative - specializing std::vector for Eigen types">vector_spec</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStorageOrders</name>
    <title>Storage orders</title>
    <filename>group__TopicStorageOrders.html</filename>
    <docanchor file="group__TopicStorageOrders" title="Column-major and row-major storage">TopicStorageOrdersIntro</docanchor>
    <docanchor file="group__TopicStorageOrders" title="Storage orders in Eigen">TopicStorageOrdersInEigen</docanchor>
    <docanchor file="group__TopicStorageOrders" title="Which storage order to choose?">TopicStorageOrdersWhich</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicStructHavingEigenMembers</name>
    <title>Structures Having Eigen Members</title>
    <filename>group__TopicStructHavingEigenMembers.html</filename>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Executive Summary">StructHavingEigenMembers_summary</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="What kind of code needs to be changed?">StructHavingEigenMembers_what</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="How should such code be modified?">StructHavingEigenMembers_how</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Why is this needed?">StructHavingEigenMembers_why</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Should I then put all the members of Eigen types at the beginning of my class?">StructHavingEigenMembers_movetotop</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="What about dynamic-size matrices and vectors?">StructHavingEigenMembers_dynamicsize</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="So is this a bug in Eigen?">StructHavingEigenMembers_bugineigen</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="What if I want to do this conditionnally (depending on template parameters) ?">StructHavingEigenMembers_conditional</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Other solutions">StructHavingEigenMembers_othersolutions</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Disabling alignment">othersolutions1</docanchor>
    <docanchor file="group__TopicStructHavingEigenMembers" title="Private structure">othersolutions2</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicAliasing</name>
    <title>Aliasing</title>
    <filename>group__TopicAliasing.html</filename>
    <docanchor file="group__TopicAliasing" title="Examples">TopicAliasingExamples</docanchor>
    <docanchor file="group__TopicAliasing" title="Resolving aliasing issues">TopicAliasingSolution</docanchor>
    <docanchor file="group__TopicAliasing" title="Aliasing and component-wise operations">TopicAliasingCwise</docanchor>
    <docanchor file="group__TopicAliasing" title="Aliasing and matrix multiplication">TopicAliasingMatrixMult</docanchor>
    <docanchor file="group__TopicAliasing" title="Summary">TopicAliasingSummary</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicLinearAlgebraDecompositions</name>
    <title>Catalogue of dense decompositions</title>
    <filename>group__TopicLinearAlgebraDecompositions.html</filename>
    <docanchor file="group__TopicLinearAlgebraDecompositions" title="Catalogue of decompositions offered by Eigen">TopicLinAlgBigTable</docanchor>
    <docanchor file="group__TopicLinearAlgebraDecompositions" title="Terminology">TopicLinAlgTerminology</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialAdvancedInitialization</name>
    <title>Advanced initialization</title>
    <filename>group__TutorialAdvancedInitialization.html</filename>
    <docanchor file="group__TutorialAdvancedInitialization" title="The comma initializer">TutorialAdvancedInitializationCommaInitializer</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization" title="Special matrices and arrays">TutorialAdvancedInitializationSpecialMatrices</docanchor>
    <docanchor file="group__TutorialAdvancedInitialization" title="Usage as temporary objects">TutorialAdvancedInitializationTemporaryObjects</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialArrayClass</name>
    <title>The Array class and coefficient-wise operations</title>
    <filename>group__TutorialArrayClass.html</filename>
    <docanchor file="group__TutorialArrayClass" title="What is the Array class?">TutorialArrayClassIntro</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Array types">TutorialArrayClassTypes</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Accessing values inside an Array">TutorialArrayClassAccess</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Addition and subtraction">TutorialArrayClassAddSub</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Array multiplication">TutorialArrayClassMult</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Other coefficient-wise operations">TutorialArrayClassCwiseOther</docanchor>
    <docanchor file="group__TutorialArrayClass" title="Converting between array and matrix expressions">TutorialArrayClassConvert</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialBlockOperations</name>
    <title>Block operations</title>
    <filename>group__TutorialBlockOperations.html</filename>
    <docanchor file="group__TutorialBlockOperations" title="Using block operations">TutorialBlockOperationsUsing</docanchor>
    <docanchor file="group__TutorialBlockOperations" title="Columns and rows">TutorialBlockOperationsSyntaxColumnRows</docanchor>
    <docanchor file="group__TutorialBlockOperations" title="Corner-related operations">TutorialBlockOperationsSyntaxCorners</docanchor>
    <docanchor file="group__TutorialBlockOperations" title="Block operations for vectors">TutorialBlockOperationsSyntaxVectors</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialGeometry</name>
    <title>Space transformations</title>
    <filename>group__TutorialGeometry.html</filename>
    <docanchor file="group__TutorialGeometry" title="Transformation types">TutorialGeoElementaryTransformations</docanchor>
    <docanchor file="group__TutorialGeometry" title="Common API across transformation types">TutorialGeoCommontransformationAPI</docanchor>
    <docanchor file="group__TutorialGeometry" title="Affine transformations">TutorialGeoTransform</docanchor>
    <docanchor file="group__TutorialGeometry" title="Euler angles">TutorialGeoEulerAngles</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialLinearAlgebra</name>
    <title>Linear algebra and decompositions</title>
    <filename>group__TutorialLinearAlgebra.html</filename>
    <docanchor file="group__TutorialLinearAlgebra" title="Basic linear solving">TutorialLinAlgBasicSolve</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Checking if a solution really exists">TutorialLinAlgSolutionExists</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Computing eigenvalues and eigenvectors">TutorialLinAlgEigensolving</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Computing inverse and determinant">TutorialLinAlgInverse</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Least squares solving">TutorialLinAlgLeastsquares</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Separating the computation from the construction">TutorialLinAlgSeparateComputation</docanchor>
    <docanchor file="group__TutorialLinearAlgebra" title="Rank-revealing decompositions">TutorialLinAlgRankRevealing</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMapClass</name>
    <title>Interfacing with raw buffers: the Map class</title>
    <filename>group__TutorialMapClass.html</filename>
    <docanchor file="group__TutorialMapClass" title="Introduction">TutorialMapIntroduction</docanchor>
    <docanchor file="group__TutorialMapClass" title="Map types and declaring Map variables">TutorialMapTypes</docanchor>
    <docanchor file="group__TutorialMapClass" title="Using Map variables">TutorialMapUsing</docanchor>
    <docanchor file="group__TutorialMapClass" title="Changing the mapped array">TutorialMapPlacementNew</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixArithmetic</name>
    <title>Matrix and vector arithmetic</title>
    <filename>group__TutorialMatrixArithmetic.html</filename>
    <docanchor file="group__TutorialMatrixArithmetic" title="Introduction">TutorialArithmeticIntroduction</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Addition and subtraction">TutorialArithmeticAddSub</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Scalar multiplication and division">TutorialArithmeticScalarMulDiv</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="A note about expression templates">TutorialArithmeticMentionXprTemplates</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Transposition and conjugation">TutorialArithmeticTranspose</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Matrix-matrix and matrix-vector multiplication">TutorialArithmeticMatrixMul</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Dot product and cross product">TutorialArithmeticDotAndCross</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Basic arithmetic reduction operations">TutorialArithmeticRedux</docanchor>
    <docanchor file="group__TutorialMatrixArithmetic" title="Validity of operations">TutorialArithmeticValidity</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialMatrixClass</name>
    <title>The Matrix class</title>
    <filename>group__TutorialMatrixClass.html</filename>
    <docanchor file="group__TutorialMatrixClass" title="The first three template parameters of Matrix">TutorialMatrixFirst3Params</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Vectors">TutorialMatrixVectors</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="The special value Dynamic">TutorialMatrixDynamic</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Constructors">TutorialMatrixConstructors</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Coefficient accessors">TutorialMatrixCoeffAccessors</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Comma-initialization">TutorialMatrixCommaInitializer</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Resizing">TutorialMatrixSizesResizing</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Assignment and resizing">TutorialMatrixAssignment</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Fixed vs. Dynamic size">TutorialMatrixFixedVsDynamic</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Optional template parameters">TutorialMatrixOptTemplParams</docanchor>
    <docanchor file="group__TutorialMatrixClass" title="Convenience typedefs">TutorialMatrixTypedefs</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialReductionsVisitorsBroadcasting</name>
    <title>Reductions, visitors and broadcasting</title>
    <filename>group__TutorialReductionsVisitorsBroadcasting.html</filename>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Reductions">TutorialReductionsVisitorsBroadcastingReductions</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Norm computations">TutorialReductionsVisitorsBroadcastingReductionsNorm</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Boolean reductions">TutorialReductionsVisitorsBroadcastingReductionsBool</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="User defined reductions">TutorialReductionsVisitorsBroadcastingReductionsUserdefined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Visitors">TutorialReductionsVisitorsBroadcastingVisitors</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Partial reductions">TutorialReductionsVisitorsBroadcastingPartialReductions</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Combining partial reductions with other operations">TutorialReductionsVisitorsBroadcastingPartialReductionsCombined</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Broadcasting">TutorialReductionsVisitorsBroadcastingBroadcasting</docanchor>
    <docanchor file="group__TutorialReductionsVisitorsBroadcasting" title="Combining broadcasting with other operations">TutorialReductionsVisitorsBroadcastingBroadcastingCombined</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialReshape</name>
    <title>Reshape</title>
    <filename>group__TutorialReshape.html</filename>
    <docanchor file="group__TutorialReshape" title="Reshaped 2D views">TutorialReshapeMat2Mat</docanchor>
    <docanchor file="group__TutorialReshape" title="1D linear views">TutorialReshapeMat2Vec</docanchor>
    <docanchor file="group__TutorialReshape">TutorialReshapeInPlace</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialSlicingIndexing</name>
    <title>Slicing and Indexing</title>
    <filename>group__TutorialSlicingIndexing.html</filename>
    <docanchor file="group__TutorialSlicingIndexing" title="Overview">TutorialSlicingOverview</docanchor>
    <docanchor file="group__TutorialSlicingIndexing" title="Basic slicing">TutorialSlicingBasic</docanchor>
    <docanchor file="group__TutorialSlicingIndexing" title="Compile time size and increment">TutorialSlicingFixed</docanchor>
    <docanchor file="group__TutorialSlicingIndexing" title="Reverse order">TutorialSlicingReverse</docanchor>
    <docanchor file="group__TutorialSlicingIndexing" title="Array of indices">TutorialSlicingArray</docanchor>
    <docanchor file="group__TutorialSlicingIndexing" title="Custom index list">TutorialSlicingCustomArray</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialSparse</name>
    <title>Sparse matrix manipulations</title>
    <filename>group__TutorialSparse.html</filename>
    <docanchor file="group__TutorialSparse" title="Sparse matrix format">TutorialSparseIntro</docanchor>
    <docanchor file="group__TutorialSparse" title="First example">TutorialSparseExample</docanchor>
    <docanchor file="group__TutorialSparse" title="The SparseMatrix class">TutorialSparseSparseMatrix</docanchor>
    <docanchor file="group__TutorialSparse" title="Filling a sparse matrix">TutorialSparseFilling</docanchor>
    <docanchor file="group__TutorialSparse" title="Supported operators and functions">TutorialSparseFeatureSet</docanchor>
    <docanchor file="group__TutorialSparse" title="Basic operations">TutorialSparse_BasicOps</docanchor>
    <docanchor file="group__TutorialSparse" title="Matrix products">TutorialSparse_Products</docanchor>
    <docanchor file="group__TutorialSparse" title="Block operations">TutorialSparse_SubMatrices</docanchor>
    <docanchor file="group__TutorialSparse" title="Triangular and selfadjoint views">TutorialSparse_TriangularSelfadjoint</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicUnalignedArrayAssert</name>
    <title>Explanation of the assertion on unaligned arrays</title>
    <filename>group__TopicUnalignedArrayAssert.html</filename>
    <docanchor file="group__TopicUnalignedArrayAssert" title="Where in my own code is the cause of the problem?">where</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="Cause 1: Structures having Eigen objects as members">c1</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="Cause 2: STL Containers or manual memory allocation">c2</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="Cause 3: Passing Eigen objects by value">c3</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="Cause 4: Compiler making a wrong assumption on stack alignment (for instance GCC on Windows)">c4</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="General explanation of this assertion">explanation</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="I don&apos;t care about optimal vectorization, how do I get rid of that stuff?">getrid</docanchor>
    <docanchor file="group__TopicUnalignedArrayAssert" title="How can I check my code is safe regarding alignment issues?">checkmycode</docanchor>
  </compound>
  <compound kind="group">
    <name>TopicWrongStackAlignment</name>
    <title>Compiler making a wrong assumption on stack alignment</title>
    <filename>group__TopicWrongStackAlignment.html</filename>
    <docanchor file="group__TopicWrongStackAlignment" title="Local solution">sec_sol1</docanchor>
    <docanchor file="group__TopicWrongStackAlignment" title="Global solutions">sec_sol2</docanchor>
  </compound>
  <compound kind="group">
    <name>TutorialSTL</name>
    <title>TutorialSTL</title>
    <filename>group__TutorialSTL.html</filename>
  </compound>
  <compound kind="group">
    <name>Splines_Module</name>
    <title>Splines_Module</title>
    <filename>group__Splines__Module.html</filename>
  </compound>
  <compound kind="page">
    <name>Eigen2ToEigen3</name>
    <title>Porting from Eigen2 to Eigen3</title>
    <filename>Eigen2ToEigen3</filename>
    <docanchor file="Eigen2ToEigen3" title="Eigen2 compatibility support">CompatibilitySupport</docanchor>
    <docanchor file="Eigen2ToEigen3" title="The USING_PART_OF_NAMESPACE_EIGEN macro">Using</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Dot products over complex numbers">ComplexDot</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Vector blocks">VectorBlocks</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Matrix Corners">Corners</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Coefficient wise operations">CoefficientWiseOperations</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Triangular and self-adjoint matrices">PartAndExtract</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Triangular in-place solving">TriangularSolveInPlace</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Matrix decompositions">Decompositions</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Linear solvers">LinearSolvers</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Changes in the Geometry module">GeometryModule</docanchor>
    <docanchor file="Eigen2ToEigen3" title="The Transform class">Transform</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Lazy evaluation and noalias">LazyVsNoalias</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Alignment-related macros">AlignMacros</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Aligned Map objects">AlignedMap</docanchor>
    <docanchor file="Eigen2ToEigen3" title="STL Containers">StdContainers</docanchor>
    <docanchor file="Eigen2ToEigen3" title="Internal ei_ prefix">eiPrefix</docanchor>
  </compound>
  <compound kind="page">
    <name>Experimental</name>
    <title>Experimental parts of Eigen</title>
    <filename>Experimental</filename>
    <docanchor file="Experimental" title="Summary">Experimental_summary</docanchor>
    <docanchor file="Experimental" title="Experimental modules">Experimental_modules</docanchor>
    <docanchor file="Experimental" title="Experimental parts of the Core module">Experimental_core</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicClassHierarchy</name>
    <title>The class hierarchy</title>
    <filename>TopicClassHierarchy</filename>
    <docanchor file="TopicClassHierarchy" title="Principles">TopicClassHierarchyPrinciples</docanchor>
    <docanchor file="TopicClassHierarchy" title="The core classes">TopicClassHierarchyCoreClasses</docanchor>
    <docanchor file="TopicClassHierarchy" title="Base classes">TopicClassHierarchyBaseClasses</docanchor>
    <docanchor file="TopicClassHierarchy" title="Inheritance diagrams">TopicClassHierarchyInheritanceDiagrams</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_CustomScalar</name>
    <title>Using custom scalar types</title>
    <filename>TopicCustomizing_CustomScalar</filename>
    <docanchor file="TopicCustomizing_CustomScalar">user_defined_scalars</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_InheritingMatrix</name>
    <title>Inheriting from Matrix</title>
    <filename>TopicCustomizing_InheritingMatrix</filename>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_NullaryExpr</name>
    <title>Matrix manipulation via nullary-expressions</title>
    <filename>TopicCustomizing_NullaryExpr</filename>
    <docanchor file="TopicCustomizing_NullaryExpr" title="Example 1: circulant matrix">NullaryExpr_Circulant</docanchor>
    <docanchor file="TopicCustomizing_NullaryExpr" title="Example 2: indexing rows and columns">NullaryExpr_Indexing</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCustomizing_Plugins</name>
    <title>Extending MatrixBase (and other classes)</title>
    <filename>TopicCustomizing_Plugins</filename>
  </compound>
  <compound kind="page">
    <name>TopicFunctionTakingEigenTypes</name>
    <title>Writing Functions Taking %Eigen Types as Parameters</title>
    <filename>TopicFunctionTakingEigenTypes</filename>
    <docanchor file="TopicFunctionTakingEigenTypes" title="Some First Examples">TopicFirstExamples</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes" title="How to write generic, but non-templated function?">TopicUsingRefClass</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes" title="In which cases do functions taking plain Matrix or Array arguments work?">TopicPlainFunctionsWorking</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes" title="In which cases do functions taking a plain Matrix or Array argument fail?">TopicPlainFunctionsFailing</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes" title="How to resize matrices in generic implementations?">TopicResizingInGenericImplementations</docanchor>
    <docanchor file="TopicFunctionTakingEigenTypes" title="Summary">TopicSummary</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicWritingEfficientProductExpression</name>
    <title>Writing efficient matrix product expressions</title>
    <filename>TopicWritingEfficientProductExpression</filename>
    <docanchor file="TopicWritingEfficientProductExpression" title="General Matrix-Matrix product (GEMM)">GEMM</docanchor>
    <docanchor file="TopicWritingEfficientProductExpression" title="Limitations">GEMM_Limitations</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicInsideEigenExample</name>
    <title>What happens inside Eigen, on a simple example</title>
    <filename>TopicInsideEigenExample</filename>
    <docanchor file="TopicInsideEigenExample" title="Why it&apos;s interesting">WhyInteresting</docanchor>
    <docanchor file="TopicInsideEigenExample" title="Constructing vectors">ConstructingVectors</docanchor>
    <docanchor file="TopicInsideEigenExample" title="Construction of the sum expression">ConstructionOfSumXpr</docanchor>
    <docanchor file="TopicInsideEigenExample" title="The assignment">Assignment</docanchor>
  </compound>
  <compound kind="page">
    <name>UserManual_CustomizingEigen</name>
    <title>Extending/Customizing Eigen</title>
    <filename>UserManual_CustomizingEigen</filename>
  </compound>
  <compound kind="page">
    <name>UserManual_Generalities</name>
    <title>General topics</title>
    <filename>UserManual_Generalities</filename>
  </compound>
  <compound kind="page">
    <name>UserManual_UnderstandingEigen</name>
    <title>Understanding Eigen</title>
    <filename>UserManual_UnderstandingEigen</filename>
  </compound>
  <compound kind="page">
    <name>UnclassifiedPages</name>
    <title>Unclassified pages</title>
    <filename>UnclassifiedPages</filename>
  </compound>
  <compound kind="page">
    <name>TopicNewExpressionType</name>
    <title>Adding a new expression type</title>
    <filename>TopicNewExpressionType</filename>
    <docanchor file="TopicNewExpressionType" title="The setting">TopicSetting</docanchor>
    <docanchor file="TopicNewExpressionType" title="Getting started">TopicPreamble</docanchor>
    <docanchor file="TopicNewExpressionType" title="The traits class">TopicTraits</docanchor>
    <docanchor file="TopicNewExpressionType" title="The expression class">TopicExpression</docanchor>
    <docanchor file="TopicNewExpressionType" title="The evaluator">TopicEvaluator</docanchor>
    <docanchor file="TopicNewExpressionType" title="The entry point">TopicEntry</docanchor>
    <docanchor file="TopicNewExpressionType" title="A simple main function for testing">TopicMain</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicPitfalls</name>
    <title>Common pitfalls</title>
    <filename>TopicPitfalls</filename>
    <docanchor file="TopicPitfalls" title="Compilation error with template methods">TopicPitfalls_template_keyword</docanchor>
    <docanchor file="TopicPitfalls" title="Aliasing">TopicPitfalls_aliasing</docanchor>
    <docanchor file="TopicPitfalls" title="C++11 and the auto keyword">TopicPitfalls_auto_keyword</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicPreprocessorDirectives</name>
    <title>Preprocessor directives</title>
    <filename>TopicPreprocessorDirectives</filename>
    <docanchor file="TopicPreprocessorDirectives" title="Macros with major effects">TopicPreprocessorDirectivesMajor</docanchor>
    <docanchor file="TopicPreprocessorDirectives" title="C++ standard features">TopicPreprocessorDirectivesCppVersion</docanchor>
    <docanchor file="TopicPreprocessorDirectives" title="Assertions">TopicPreprocessorDirectivesAssertions</docanchor>
    <docanchor file="TopicPreprocessorDirectives" title="Alignment, vectorization and performance tweaking">TopicPreprocessorDirectivesPerformance</docanchor>
    <docanchor file="TopicPreprocessorDirectives" title="Plugins">TopicPreprocessorDirectivesPlugins</docanchor>
    <docanchor file="TopicPreprocessorDirectives" title="Macros for Eigen developers">TopicPreprocessorDirectivesDevelopers</docanchor>
  </compound>
  <compound kind="page">
    <name>GettingStarted</name>
    <title>Getting started</title>
    <filename>GettingStarted</filename>
    <docanchor file="GettingStarted" title="How to &quot;install&quot; Eigen?">GettingStartedInstallation</docanchor>
    <docanchor file="GettingStarted" title="A simple first program">GettingStartedFirstProgram</docanchor>
    <docanchor file="GettingStarted" title="Compiling and running your first program">GettingStartedCompiling</docanchor>
    <docanchor file="GettingStarted" title="Explanation of the first program">GettingStartedExplanation</docanchor>
    <docanchor file="GettingStarted" title="Example 2: Matrices and vectors">GettingStartedExample2</docanchor>
    <docanchor file="GettingStarted" title="Explanation of the second example">GettingStartedExplanation2</docanchor>
    <docanchor file="GettingStarted" title="Where to go from here?">GettingStartedConclusion</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicTemplateKeyword</name>
    <title>The template and typename keywords in C++</title>
    <filename>TopicTemplateKeyword</filename>
    <docanchor file="TopicTemplateKeyword" title="Using the template and typename keywords to define templates">TopicTemplateKeywordToDefineTemplates</docanchor>
    <docanchor file="TopicTemplateKeyword" title="An example showing the second use of the template keyword">TopicTemplateKeywordExample</docanchor>
    <docanchor file="TopicTemplateKeyword" title="Explanation">TopicTemplateKeywordExplanation</docanchor>
    <docanchor file="TopicTemplateKeyword" title="Resources for further reading">TopicTemplateKeywordResources</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicAssertions</name>
    <title>Assertions</title>
    <filename>TopicAssertions</filename>
    <docanchor file="TopicAssertions" title="Assertions">PlainAssert</docanchor>
    <docanchor file="TopicAssertions" title="Redefining assertions">RedefineAssert</docanchor>
    <docanchor file="TopicAssertions" title="Disabling assertions">DisableAssert</docanchor>
    <docanchor file="TopicAssertions" title="Static assertions">StaticAssert</docanchor>
    <docanchor file="TopicAssertions" title="Derived static assertions">DerivedStaticAssert</docanchor>
    <docanchor file="TopicAssertions" title="Strict assertions">StrictAssertions</docanchor>
    <docanchor file="TopicAssertions" title="Permissive assertions">PermissiveAssertions</docanchor>
    <docanchor file="TopicAssertions" title="Disabling static assertions">DisableStaticAssert</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCMakeGuide</name>
    <title>Using %Eigen in CMake Projects</title>
    <filename>TopicCMakeGuide</filename>
  </compound>
  <compound kind="page">
    <name>TopicEigenExpressionTemplates</name>
    <title>Expression templates in Eigen</title>
    <filename>TopicEigenExpressionTemplates</filename>
  </compound>
  <compound kind="page">
    <name>TopicLazyEvaluation</name>
    <title>Lazy Evaluation and Aliasing</title>
    <filename>TopicLazyEvaluation</filename>
  </compound>
  <compound kind="page">
    <name>TopicMultiThreading</name>
    <title>Eigen and multi-threading</title>
    <filename>TopicMultiThreading</filename>
    <docanchor file="TopicMultiThreading" title="Make Eigen run in parallel">TopicMultiThreading_MakingEigenMT</docanchor>
    <docanchor file="TopicMultiThreading" title="Using Eigen in a multi-threaded application">TopicMultiThreading_UsingEigenWithMT</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicResizing</name>
    <title>Resizing</title>
    <filename>TopicResizing</filename>
  </compound>
  <compound kind="page">
    <name>TopicScalarTypes</name>
    <title>Scalar types</title>
    <filename>TopicScalarTypes</filename>
  </compound>
  <compound kind="page">
    <name>TopicVectorization</name>
    <title>Vectorization</title>
    <filename>TopicVectorization</filename>
  </compound>
  <compound kind="page">
    <name>TutorialSparse_example_details</name>
    <title></title>
    <filename>TutorialSparse_example_details</filename>
  </compound>
  <compound kind="page">
    <name>TopicUsingBlasLapack</name>
    <title>Using BLAS/LAPACK from %Eigen</title>
    <filename>TopicUsingBlasLapack</filename>
  </compound>
  <compound kind="page">
    <name>TopicUsingIntelMKL</name>
    <title>Using Intel® MKL from %Eigen</title>
    <filename>TopicUsingIntelMKL</filename>
    <docanchor file="TopicUsingIntelMKL" title="Links">TopicUsingIntelMKL_Links</docanchor>
  </compound>
  <compound kind="page">
    <name>TopicCUDA</name>
    <title>Using Eigen in CUDA kernels</title>
    <filename>TopicCUDA</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>notitle</title>
    <filename>index</filename>
  </compound>
</tagfile>
