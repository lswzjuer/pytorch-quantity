workspace(name = "roadstar")

load("//third_party:protobuf_deps.bzl", "PROTOBUF_DEPS")
load("//third_party:cpp_lang_deps.bzl", "CPP_LANG_DEPS")

# googletest (GTest and GMock)
new_http_archive(
    name = "gtest",
    build_file = "third_party/gtest.BUILD",
    strip_prefix = "googletest-release-1.8.0-ec44c6c1675c25b9827aacd08c02433cccde7780",
    url = "http://git.fabu.ai/third_party/googletest/repository/archive.tar.gz?ref=release-1.8.0",
)

# gflags
git_repository(
    name = "com_github_gflags_gflags",
    remote = "http://git.fabu.ai/third_party/gflags.git",
    tag = "v2.2.0",
)

bind(
    name = "gflags",
    actual = "@com_github_gflags_gflags//:gflags",
)

# glog
new_http_archive(
    name = "glog",
    build_file = "third_party/glog.BUILD",
    strip_prefix = "glog-42f630ffd3b33ce50400bc08fa1498b8c0b15b64-42f630ffd3b33ce50400bc08fa1498b8c0b15b64",
    url = "http://git.fabu.ai/third_party/glog/repository/archive.tar.gz?ref=42f630ffd3b33ce50400bc08fa1498b8c0b15b64",
)

# G3log
new_git_repository(
    name = "g3log",
    build_file = "third_party/g3log.BUILD",
    remote = "http://git.fabu.ai:7070/third_party/g3log.git",
    tag = "v0.9.6",
)

# Google Benchmark
new_git_repository(
    name = "benchmark",
    build_file = "third_party/benchmark.BUILD",
    remote = "http://git.fabu.ai/third_party/benchmark.git",
    tag = "v1.1.0",
)

# proto rules (Protobuf and GRPC)
git_repository(
    name = "org_pubref_rules_protobuf",
    remote = "http://git.fabu.ai/third_party/rules_protobuf.git",
    tag = "v0.8.1",
)

load("@org_pubref_rules_protobuf//cpp:rules.bzl", "cpp_proto_repositories")

cpp_proto_repositories(
    lang_deps = CPP_LANG_DEPS,
    protobuf_deps = PROTOBUF_DEPS,
)

load("@org_pubref_rules_protobuf//python:rules.bzl", "py_proto_repositories")

py_proto_repositories(
    omit_cpp_repositories = True,
    protobuf_deps = PROTOBUF_DEPS,
)

# eigen
new_local_repository(
    name = "eigen",
    build_file = "third_party/eigen.BUILD",
    path = "/usr/include/eigen3",
)

# CivetWeb (web server)
new_http_archive(
    name = "civetweb",
    build_file = "third_party/civetweb.BUILD",
    strip_prefix = "civetweb-v1.9.1-b0c7f652ac46b86a91e8316d21b9ef2d45b6f776",
    url = "http://git.fabu.ai/third_party/civetweb/repository/archive.tar.gz?ref=v1.9.1",
)

# curlpp
new_git_repository(
    name = "curlpp",
    build_file = "third_party/curlpp.BUILD",
    remote = "http://git.fabu.ai/third_party/curlpp.git",
    tag = "v0.8.1",
)

#ros
new_local_repository(
    name = "ros",
    build_file = "third_party/ros.BUILD",
    path = "/opt/roadstar-platform/ros",
)

# OpenCV 3.3.1
new_local_repository(
    name = "opencv3",
    build_file = "third_party/opencv3.BUILD",
    path = "/usr/local/opencv-3.3.1",
)

# YAML-CPP
new_local_repository(
    name = "yaml_cpp",
    build_file = "third_party/yaml_cpp.BUILD",
    path = "/usr",
)

# YAML-CPP
new_local_repository(
    name = "canlib",
    build_file = "third_party/canlib.BUILD",
    path = "/usr",
)

# qpOASES
new_git_repository(
    name = "qp_oases",
    build_file = "third_party/qp_oases.BUILD",
    remote = "http://git.fabu.ai/third_party/qpOASES.git",
    tag = "3.2.1",
)

# Proj.4
new_git_repository(
    name = "proj4",
    build_file = "third_party/proj4.BUILD",
    remote = "http://git.fabu.ai/third_party/proj.4.git",
    tag = "4.9.3",
)

# tinyxml2
new_git_repository(
    name = "tinyxml2",
    build_file = "third_party/tinyxml2.BUILD",
    remote = "http://git.fabu.ai/third_party/tinyxml2.git",
    tag = "5.0.1",
)

#vtk
new_local_repository(
    name = "vtk",
    build_file = "third_party/vtk.BUILD",
    path = "/usr",
)

#pcl
new_local_repository(
    name = "pcl",
    build_file = "third_party/pcl.BUILD",
    path = "/usr/local/include/pcl-1.9",
)

# caffe
new_local_repository(
    name = "caffe",
    build_file = "third_party/caffe.BUILD",
    path = "/usr/local/caffe",
)

# tensorflow
new_local_repository(
    name = "tensorflow",
    build_file = "third_party/tensorflow.BUILD",
    path = "/usr/local/tensorflow",
)

# mxnet
new_local_repository(
    name = "mxnet",
    build_file = "third_party/mxnet.BUILD",
    path = "/usr/local/mxnet",
)

# tensorrt
new_local_repository(
    name = "tensorrt",
    build_file = "third_party/tensorrt.BUILD",
    path = "/usr/local/tensorrt",
)

# cuda
new_local_repository(
    name = "cuda",
    build_file = "third_party/cuda.BUILD",
    path = "/usr/local/cuda",
)

# rpclib
new_git_repository(
    name = "rpclib",
    build_file = "third_party/rpclib.BUILD",
    remote = "http://git.fabu.ai:7070/third_party/rpclib.git",
    tag = "v2.2.1",
)

# libcarla
new_git_repository(
    name = "libcarla",
    build_file = "third_party/libcarla.BUILD",
    remote = "http://git.fabu.ai:7070/third_party/libcarla.git",
    tag = "v0.9.3_customed",
)

# pylon
new_local_repository(
    name = "pylon",
    build_file = "third_party/pylon.BUILD",
    path = "/opt/pylon5",
)

http_archive(
    name = "llvm_toolchain",
    strip_prefix = "llvm_toolchain-master",
    urls = ["http://git.fabu.ai/third_party/llvm_toolchain/-/archive/master/llvm_toolchain-master.tar.gz"],
)

new_local_repository(
    name = "osqp",
    build_file = "third_party/osqp.BUILD",
    path = "/usr/local/osqp",
)

# Ugly workaround for that dreamview frontend will break the build.
# Neither .bazelignore nor expecting it in build script could fix it.
local_repository(
    name = "dreamview_frontend",
    path = "modules/dreamview/frontend/node_modules/rxjs/src",
)
